{
  "series": "Request for Comments",
  "number": "197",
  "howpublished": "RFC 197",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0197",
  "url": "https://www.rfc-editor.org/info/rfc197",
  "title": "Initial Connection Protocol - Reviewed",
  "pagetotal": "5",
  "year": "1971",
  "month": "jul",
  "body": "\n\n\n\n\n\nNetwork Working Group                        A.Shoshani, SDC\nRequest for Comment # 197                   E. Harslem, Rand\nNIC # 7142                                      14 July 1971\nCategories:  C.3, D.1\nUpdates:  None\nObsoletes:  None\n\n         INITIAL CONNECTION PROTOCOL--REVIEWED\n\nINTRODUCTION\n------------\n\n     At the Network meeting preceding the SJCC '71, an\n\"ICP Committee\" was established.  It's purpose was to get\n\"something\" working fast with minimum modifications to the\ncurrent ICP so as to minimize complaints.  (This seems like\na good definition for almost everything!)  Consequently,\nthose who had objections to the current ICP were interviewed\nand a compromise was reached in the form of RFC #165.  The\nICP committee didn't have a chance to think about an alter-\nnative because of the above mentioned constraints.  In this\nnote we attempted a simple version of an ICP assuming that\nwe can add commands to Host-Host protocol. We hope that this\nwill be useful in the design of the next version of the\nHost-Host protocol.\n\nICP COMMANDS\n------------\n\n     To establish a regular connection one party can issue\nan INIT (NCP sends RTS or STR commands), then the other\nparty can accept the request for connection by responding\nwith an INIT or refusing it with a CLOSE.  We think that\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\na similar, simple mechanism is desirable for the ICP.\nFurthermore, the ICP should allow for simplex as well as\nduplex connections from user to server.\n\n     The following commands are necessary for simplex\nconnections:\n\n     ISC - Initiate Simplex Connection\n\n     ASC - Accept Simplex Connection\n\n     RSC - Refuse Simplex Connection\n\n     The notation for parameters is similar to that\nof RFC #165:\n\n     L - Server socket name, in one special case the\n         server is \"logger\".\n\n     U - User socket.\n\n     S - Socket assigned by server for the connection\n         with user.\n\n     X - Is the byte size if U is odd and is the link\n         number if U is even.\n\n     -                           -\n     X - Is the complement of X (X is the link number\n         if U is odd and byte size if U is even.\n\n     To initiate a simplex connection the user's NCP\nissues:\n           ISC, L, U, X\n\n     To refuse this connection the server's NCP issues:\n\n           RSC, L, U\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 2]\n\f\n     To accept this connection the server's NCP issues:\n                         -\n           ASC, L, U, S, X\n\n     Similarly, for duplex connections, we have:\n\n           IDC, L, U1, X1, U2, X2\n\n           RDC, L, U1, U2\n                           -           -\n           ADC, L, U1, S1, X1, U2, S2, X2\n\nwhere (U1,U2), (S1,S2), (U1,S1) and (U2,S2) are pairs of\nopposite gender.\n\n     After the server accepts the connection(s), it (they)\ngoes immediately to a \"connected state\", and the appropriate\nALL command(s) must be sent.\n\nADVANTAGES\n----------\n\n     The main advantage to this approach is that it mini-\nmizes the dialog between user and server.  The server socket\nL is used only as an address, not a socket to connect to,\ntherefore eliminating the need to establish a connection to\nL, choose a byte size, send an ALL command, send and receive\ndata on it and CLOSE it.  Race conditions as mentioned in\nRFC #143 do not arise.  Socket L is the server and should\nbe in a \"Listening for ICP\" state when an ISC or IDC is\nreceived.  If socket L is not in that state, the serving\nNCP should refuse to ICP request.  The serving NCP should\n_not_ queue ICP requests.\n\n     In the current ICP, when the user choses socket U, he\nhas to reserve sockets U+2 and U+3.  In the above described\napproach no restrictions exist for U1 and U2 (except that\nthey are of opposite gender);  the same is true for S1 and\nS2.\n\n     We think that duplex commands are necessary since both\nconnections are to be connected to the same server process.\nTheir separation by using two ISCs, will add complications\nof correlating the two ISCs with the same process.  Also,\nif two ISCs are used, the first might be accepted and the\nsecond refused.  This leads to uncertainty on the user's\npart.  This condition cannot occur with the duplex commands.\n\n\n\n\n                                                                [Page 3]\n\f\nMINIMUM MODIFICATION TO CURRENT ICP\n-----------------------------------\n\n     The minimum change we can think of to make the current\nICP look similar to the above is to add one NCP level com-\nmand -- accept:\n\n           ACC, L, U, S\n\n     The exchange between NCPs in the notation of RFC #165\nis now:\n\u003cwhere the original uses a script lowercase \"L\" we use \"l\"\u003e\n\u003cwhere the original uses subscripts we use {} so that\n   A-subscript-B is printed A{B} \u003e\n\n     Server NCP                   User NCP\n     ----------                   --------\n\n     Listen for connection on L   RST,U,L,l{A}\n\n     ACC,L,U,S                    S is passed by NCP to the\n                                  user and connection from\n                                  U to L is closed.\n\n     STR,S+1,U+2,B{s}             STR,U+3,S,B{u}\n\n     RTS,S,U+3,l{B}               RTS,U+2,S+1,l{c}\n\n     Wait for connection          Wait for connection\n\n     ALL,l{B},m{B},b{B}           ALL,l{c},m{c},b{c}\n\n\n     An alternative way to the ACC command is a CLS command\nwith an additional parameter (32 bits long).  If parameter\nis zero the request for connection by the user is refused;\nif the parameter is non-zero, the request is accepted and\nsocket S is the value of the parameter.\n\n     All suggested changes improve the ICP dialog both from\nthe aesthetic and efficiency points of view.  We lean strongly,\nhowever, to the first, more major ICP modification.\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\nA COMMENT ABOUT CLS COMMAND\n---------------------------\n\n     It seems appropriate to mention here for the purpose\nof the next version of the Host-Host protocol that the\nCLS command has more than one function.  We think that the\nCLS command should be reserved to close connections in the\n\"connected state\" only (i.e., \"open\" connections).  Two\nadditional commands can be used for \"refusing\" and \"reject-\ning\" requests for connections:\n\n           REJ\u003cmysocket\u003e\u003cyoursocket\u003e -- when a request\n           for connection is rejected unconditionally.\n\n           REF\u003cmysocket\u003e\u003cyoursocket\u003e\u003creason\u003e -- when a\n           request for connection is refused temporarily\n           because the NCP could not handle it.  For\n           example:  no process LISTENed to it and it\n           was timed-out, or NCP tables are full in which\n           case the user process may try again.  The\n           reason for refusing is indicated in the\n           parameter \"reason\".\n\n\n\n\n\n[ This RFC was put into machine readable form for entry ]\n[ into the online RFC archives by BBN Corp. under the   ]\n[ direction of Alex McKenzie.                   12/96   ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 5]\n\f\n"
}