{
  "series": "Request for Comments",
  "number": "142",
  "howpublished": "RFC 142",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0142",
  "url": "https://www.rfc-editor.org/info/rfc142",
  "title": "Time-Out Mechanism in the Host-Host Protocol",
  "pagetotal": "2",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\nNetwork Working Group                            Charley Kline\nRequest for Comments #142                        Johnny Wong\nNIC #6727                                        UCLA (NMC)\nCategories: C.1, C.2, C.3, C.5                   3 May 71\nUpdates: none\nObsoletes: none\n\n\n              Time-out Mechanism in the Host-Host Protocol\n\nOn sending a message to a foreign site, the following situations can\noccur:\n\n1. Destination IMP down - Type 7 message is returned\n\n2. Destination IMP up but destination IMP-HOST interface is\n   down - Type 7 message is returned.\n\n3. Destination IMP and IMP-HOST interface up, but IMP-HOST inter-\n   face is not taking messages - Type 9 message is returned after\n   IMP time-out (ask BBN for time).\n\n4. Destination IMP and IMP-HOST interface up and IMP-HOST inter-\n   face is taking messages - Type 5 (rfnm) message is returned.\n\nA suggestion for handling type 7 and type 9 messages has been made in\nNWG/RFC #117.  In this document we would like to discuss in detail the\nproblem: what should happen to the HOST-HOST protocol on receiving a\nrfnm?\n\nWhen a NCP sends out a STR or RTS control command on a pair of sockets\nand gets a rfnm back, this pair of sockets will be in a wait-match\nstate.  Everything is fine if a matching RTS or STR, or CLS is\nreturned after a reasonable amount of delay.  Trouble will arise when\nnothing is returned after a long time.\n\nThis can happen if the NCP is not running at all but its host is\ntaking in messages (e.g. UCLA's host will receive messages even if the\nNCP is not running), or if the NCP is running very slowly.  The same\nproblem exists on sending out a CLS control command and a matching CLS\nis never returned.  The trouble is that resources are tied up, e.g.\nsockets, links and table space in the NCP; and one would like to\nrelease these resources.  In our implementation, when a user does a\nCLOSE, we can't release the sockets until the matching CLS is\nreturned.  This protects us from getting confused if a seconds request\nis made for the same pair of sockets.  This problem can be solved by\nincluding a time-out mechanism in the Host-Host protocol.  This\noperates as follows:\n\n\n\n                                                                [Page 1]\n\f\nne 5\na.  On sending out a STR or RTS and if you do not get back a match-\n    ing RTS or STR, or a CLS in T time units a CLS will be sent.\n    After sending the time-out CLS race condition can be avoided\n    by ignoring the matching RTS or STR that arrives before the\n    matching CLS.\n\nb.  On sending out a CLS (any kind, including the time-out CLS),\n    and if you do not get back a matching CLS in T time units, the\n    matching CLS is assumed to have returned.  However, if a RTS or\n    STR is sent on the same pair of sockets anytime after the time\n    out and before a CLS is returned, and then we receive the CLS,\n    there is no way to determine whether this returning CLS is for\n    matching the previous CLS or for refusing the RTS or STR.  (See\n    the figure for detail).  So far we could not solve this race\n    condition except by assigning sequence number to connection\n    throughout the Network which we don't think is a good solution\n    at all.  Hence, we would like to bring the attention of the\n    Host-Host Protocol Glitch Cleaning Committe to this problem.\n    The time limit T should be a Network Standard and its value should\n    be decided also.\n\n       Reason                                Our NCP\n       ------                                -------\n\n    1. User requests connection              1. RTS -\u003e\n\n    2. User gets tired requests CLS\n       (or NCP timeout)                      2. CLS -\u003e\n\n    3. No matching CLS returned in\n       T time units                          3. CLS assumed returned\n                                                free socket and other\n                                                resources\n\n    4. User requests another connection\n       over same socket pair                 4. RTS -\u003e\n\n    5. CLS received                          ?? does it belong to\n                                             2 or 4?\n\n                                   Figure\n\n         [ This RFC was put into machine readable form for entry ]\n            [ into the online RFC archives by Gert Doering 4/97]\n\n\n\n\n\n\n                                                                [Page 2]\n\f\n"
}