{
  "series": "Request for Comments",
  "number": "215",
  "howpublished": "RFC 215",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0215",
  "url": "https://www.rfc-editor.org/info/rfc215",
  "title": "NCP, ICP, and Telnet: The Terminal IMP implementation",
  "pagetotal": "7",
  "year": "1971",
  "month": "aug",
  "body": "\n\n\n\n\n\nNetwork Working Group                                      A. McKenzie\nRequest for Comments: 215                                          BBN\nNIC #7545                                               30 August 1971\nCategories: C.2, D.1, D.3, G.1\nUpdates: none\nObsoletes: none\n\n                         NCP, ICP, and TELNET:\n\n                    The Terminal IMP Implementation\n\n       By early December there will be six Terminal IMPs incorporated\ninto the network, with additional Terminal IMPs scheduled for delivery\nat a rate of about one per month thereafter.  For this reason the\nimplementation of network protocols (and deviations from them) may be of\ninterest to the network community.  This note describes the choices made\nby the Terminal IMP system programmers where choices are permitted by\nthe protocols, and documents some instances of non-compliance with\nprotocols.\n\n     Most of the choices made during protocol implementation on the\nTerminal IMP were influenced strongly by storage limitations.  The\nTerminal IMP has no bulk storage for buffering, and has only 8K of 16-\nbit words available for both device I/O buffers and program.  The\nprogram must drive up to 64 terminals which generally will include a\nvariety of terminal types with differing code sets and communication\nprotocols (e.g., the IBM 2741 terminals).  In addition, the Terminal IMP\nmust include a rudimentary language processor which allows a terminal\nuser to specify parameters affecting his network connections.  Since the\nTerminal IMP exists only to provide access to the network for 64\nterminals, it must be prepared to maintain 128 (simplex) network\nconnections at any time; thus each word stored in the NCP tables on a\nper-connection basis consumes a significant portion of the Terminal IMP\nmemory.\n\n     It should be remembered that the Terminal IMP is designed to\nprovide access to the network for its users, not to provide service to\nthe rest of the network.  Thus the Terminal IMP does not contain\nprograms to perform the \"server\" portion of the ICP; in fact, it does\nnot have a \"logger\" socket.\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nRFC #215\n\n\n     The Terminal IMP program currently implements only the NCP, the\nICP, and the TELNET protocol since these are of immediate interest to\nthe sites with Terminal IMPs.  It is anticipated that portions of the\ndata transfer protocol will be implemented in the future; the portions\nto be implemented are not yet clearly defined, but will probably include\nthe infinite bit stream (first) and the \"transparent\" mode (later).\nDevelopments in the area of data transmission protocol will be\ndocumented in the future.\n\n     The remainder of this note describes, and attempts to justify,\ndeviations from the official protocols and other design choices of\ninterest.  Although written in the present tense, there are some\nadditional known instances of deviation from protocol which will be\ncorrected in the near future.\n\n   A)  Deviations from Protocols\n\n      1)  The Terminal IMP does not guarantee correct response\n          to ECO commands.  If some Host A sends a control\n          message containing ECOs to the Terminal IMP, and the\n          message arrives at a time when\n\n          a)  the Terminal IMP has a free buffer and\n\n          b)  the control link from the Terminal IMP to Host A\n              is not blocked\n\n          then the Terminal IMP will generate a correct ERP for\n          each ECO.  In all other cases the ECO commands will\n          be discarded.  (All control messages sent by the\n          Terminal IMP begin with a NOP control command, so if\n          Host A sends a control message consisting of 60 ECO\n          commands, the Terminal IMP will answer (if at all)\n          with a 121-byte message -- 1 NOP and 60 ERPs.)\n\n          The reason for this method of implementation is that\n          to guarantee correct response to ECO in all cases\n          requires an infinite amount of storage.  For\n          example, suppose Host A sends control messages, each\n          containing an ECO command, to Host B at the rate of\n          one per second, but that Host A accepts messages from\n          the network as slowly as possible (one every 39\n          seconds, say).  Then Host B has only three choices\n          which do not violate protocol:\n\n          a)  Declare itself dead to the network (i.e., turn\n              off its Ready line), thereby denying all its\n              users use of the network.\n\n\n\n                                                                [Page 2]\n\f\nRFC #215\n\n\n          b)  Refuse to accept messages from the network\n              faster than the slowest possible foreign Host\n              (i.e., about one every 39 seconds).  If Host B is\n              a Terminal IMP, this is almost certainly slow\n              enough to soon reach a steady state of no users.\n\n          c)  Implement \"infinite\" storage for buffering\n              messages.\n\n          Since it is clear that none of the \"legal\" solutions\n          are possible, we have decided to do no buffering,\n          which should (we guess) satisfy the protocol well\n          over 99% of the time.\n\n      2)  The Terminal IMP does not guarantee to issue CLS\n          commands in response to \"unsolicited\" RFCs.  There\n          are currently several ways to \"solicit\" an RFC, as\n          follows:\n\n          a)  A terminal user can tell the Terminal IMP to\n              perform the ICP to the TELNET Logger at some\n              foreign Host.  This action \"solicits\" the RFCs\n              defined by the ICP.\n\n          b)  A terminal user can send an RFC to any particular\n              Host and socket he chooses.  This \"solicits\" a\n              matching RFC.\n\n          c)  A terminal user can set his own receive socket\n              \"wild.\"  This action \"solicits\" an STR from\n              anyone to his socket.  Similarly, the user can\n              set his send socket \"wild\" to \"solicit\" an RTS.\n\n          If the Terminal IMP receives a \"solicited\" RFC it\n          handles it in accordance with the protocol.  If the\n          Terminal IMP receives a control message containing\n          one or more \"unsolicited\" RFCs it will either issue\n          CLS commands or ignore the RFCs according to the\n          criteria described above for answering ECOs (and for\n          the same reasons).  Further, if the Terminal IMP\n          does issue a CLS in response to an unsolicited RFC\n          it will not wait for a matching CLS before\n          considering the sockets involved to be free for other\n          use.\n\n      3)  After issuing a CLS for a connection, the Terminal\n          IMP will not wait forever for a matching CLS.\n          There are two cases:\n\n\n\n                                                                [Page 3]\n\f\nRFC #215\n\n\n          a)  The Terminal IMP has sent an RFC, grown tired of\n              waiting for a matching RFC, and therefore issued\n              a CLS\n\n          b)  The Terminal IMP has sent a CLS for an\n              established connection (matching RFCs exchanged)\n\n          In either of these cases the Terminal IMP will wait\n          for a matching CLS for a \"reasonable\" time (probably\n          30 seconds to one minute) and will then \"forget\" the\n          connection.  After the connection is forgotten, the\n          Terminal IMP will consider both sockets involved to\n          be free for other use.\n\n          Because of program size and table size restrictions,\n          the Terminal IMP assigns socket numbers to a terminal\n          as a direct function of the physical address of the\n          terminal.  Thus (given this socket assignment scheme)\n          the failure of some foreign Host to answer a CLS\n          could permanently \"hang\" a terminal.  It might be\n          argued that the Terminal IMP could issue a RST to the\n          offending Host, but this would also break the\n          connections of other terminal users who might be\n          performing useful work with that Host.\n\n      4)  The Terminal IMP ignores all RET commands.  The\n          Terminal IMP cannot buffer very much input from the\n          network to a given terminal due to core size\n          limitations.  Accordingly, the Terminal IMP allocates\n          only one message and a very small number of bits\n          (currently 120 bits; eventually some number in the\n          range 8-4000, based on the terminal's speed) on each\n          connection for which the Terminal IMP is the\n          receiver.  Given such small allocations, the Terminal\n          IMP attempts to keep the usable bandwidth as high as\n          possible by sending a new allocation, which brings\n          the total allocation up to the maximum amount, each\n          time that:\n\n          a)  one of the two buffers assigned to the terminal\n              is empty, and\n\n          b)  the allocations are below the maxima.\n\n          Thus, if a spontaneous RET were received, the\n          reasonable thing for the Terminal IMP to do would be\n          to immediately issue a new ALL.  However, if a\n          foreign Host had some reason for issuing a first\n\n\n\n                                                                [Page 4]\n\f\nRFC #215\n\n\n          spontaneous RET, it would probably issue a second RET\n          as soon as it received the ALL.  This would be likely\n          to lead to an infinite (and very rapid) RET-ALL loop\n          between the two machines, chewing up a considerable\n          portion of the Terminal IMP's bandwidth.  Since the\n          Terminal IMP can't \"afford\" to communicate with such\n          a Host, it ignores all RETs.\n\n      5)  The Terminal IMP ignores all GVB commands.\n          Implementation of GVB appears to require an\n          unreasonable number of instructions and, at the\n          moment at least, no Host appears to use the GVB\n          command.  If we were to implement GVB we would always\n          RET all of both allocations and this doesn't seem\n          very useful.\n\n      6)  The Terminal IMP does not handle a total bit-\n          allocation greater than 65,534 (2^16-2) correctly.\n          If the bit-allocation is ever raised above 65,534 the\n          Terminal IMP will treat the allocation as infinite.\n          This treatment allows the Terminal IMP to store the\n          bit allocation for each connection in a single word,\n          and to avoid double precision addition and\n          subtraction.  Our reasons for this decision are:\n\n      a)  A saving of more than 100 words of memory which\n          would be required for allocation tables and for\n          double precision addition/subtraction routines.\n\n      b)  Our experience, which indicates that very few\n          Hosts (probably one at most) ever raise their\n          total bit allocation above 65,534 bits.\n\n      c)  Our expectation that any Host which ever raises\n          its bit allocation above 65,534 probably would be\n          willing to issue an infinite bit allocation if\n          one were provided by the protocol.  Once the bit\n          allocation is greater than about 16,000, the\n          message allocation (which the Terminal IMP\n          handles correctly) is a more powerful method of\n          controlling network loading of a Host system than\n          bit allocation.  We believe that Hosts which have\n          loading problems will recognize this.\n\n      7)  The Terminal IMP ignores the \"32-bit number\" in the\n          ICP.  When the Terminal IMP (the \"user site\")\n          initiates the Initial Connection Protocol the actual\n          procedure is to send the required RTS to the logger\n\n\n\n                                                                [Page 5]\n\f\nRFC #215\n\n\n          socket of the user-specified foreign Host and\n          simultaneously to set the terminal user's send and\n          receive sockets in a state where each will accept\n          any RFC from the specified Host.  The 32-bit socket\n          number transmitted over the logger connection is\n          ignored, and the first RTS and STR addressing the\n          user's sockets will be accepted (and answered with\n          matching RFCs).\n\n          The ICP allows the foreign Host to transmit the RFCs\n          involving Terminal IMP sockets \"U+2\" and \"U+3\" at\n          any time after receipt of the RFC to the (foreign\n          Host's) logger socket.  In particular, the RFCs may\n          arrive at the Terminal IMP before the 32-bit\n          number.  In the case of a \"normal\" foreign Host, the\n          first incoming RFCs for sockets U+2 and U+3 will come\n          from the sockets indicated by the 32-bit number, so\n          it doesn't matter if the number is ignored.  In the\n          case of a pathologic foreign Host, a potentially\n          infinite number of \"wrong\" RFCs involving U+2 and\n          U+3 may arrive at the Terminal IMP before the 32-bit\n          number is sent.  The Terminal IMP would be required\n          to store this stream of RFCs pending arrival of the\n          32-bit number, then issue CLS commands for all\n          \"wrong\" RFCs.  However, the Terminal IMP does not\n          have infinite storage available for this purpose (it\n          is also doubtful that a terminal user really wants to\n          converse with a pathologic foreign Host) so the\n          Terminal IMP assumes that the foreign Host is\n          \"normal\" and ignores the 32-bit number.\n\n   B)  Other Design Choices Related to Protocol\n\n          1)  The Terminal IMP ignores incoming ERR commands and\n              does not output ERR commands.\n\n          2)  The Terminal IMP assumes that incoming messages have\n              the format and contents demanded by the relevant\n              protocols.  For example, the byte size of incoming\n              TELNET messages is assumed to be 8.  The major checks\n              which the Terminal IMP does make are:\n\n              a)  If an incoming control message has a byte count\n                  greater than 120 then it is discarded.\n\n\n\n\n\n\n\n                                                                [Page 6]\n\f\nRFC #215\n\n\n              b)  If a control command opcode greater than 13 is\n                  found during the processing of a control message\n                  then the remainder of the control message is\n                  discarded.\n\n              c)  If an incoming data message has a byte count\n                  indicating that the bit allocation for the\n                  connection is exceeded (based on the assumed byte\n                  size) then the message is discarded.\n\n          3)  If one control message contains several RST commands\n              only one RRP is transmitted.  If several control\n              messages, each containing RST commands, arrive \"close\n              together\" only one RST is returned.  [The actual\n              implementation is to set a bit each time a RST is\n              found (in \"foreground\") and to reset the bit when a\n              RRP is sent (in \"background\").]\n\n          4)  Socket numbers are preassigned based on the hardware\n              \"physical address\" (in the terminal multiplexing\n              device) of the terminal.  The high order 16 bits of\n              the socket number give the device number (in the\n              range 0-63) and the low order bits are normally 2 or\n              3 depending on the socket's gender (zero is also used\n              during ICP).  [We would be pleased to see socket\n              number length reduced to 16 bits; in that case the\n              high order 8 bits would be mapped to the device and\n              the low order 8 bits would contain 2 or 3.]\n\n          5)  During ICP, with the Terminal IMP as the user site,\n              the Terminal IMP follows the \"Listen\" option rather\n              than the \"Init\" option (as described at the top of\n              page 3, NIC #7170).  In other words, the Terminal IMP\n              does not issue the RFCs involving sockets U+2 and U+3\n              except in response to incoming RFCs involving those\n              sockets.  In this context, we will mention that the\n              \"deadlock\" mentioned in NWG-RFC #202 does not exist,\n              since the ICP does not give the server the \"Listen\"\n              option (see NIC #7170, page 2).\n\n\n          [ This RFC was put into machine readable form for entry ]\n            [ into the online RFC archives by Randy Dunlap 5/97 ]\n\n\n\n\n\n\n\n\n                                                                [Page 7]\n\f\n"
}