{
  "series": "Request for Comments",
  "number": "296",
  "howpublished": "RFC 296",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0296",
  "url": "https://www.rfc-editor.org/info/rfc296",
  "title": "DS-1 Display System",
  "pagetotal": "17",
  "year": "1972",
  "month": "jan",
  "body": "\n\n\n\n\n\nNetwork Working Group                                          D. Liddle\nRequest for Comments: 296                           Owens-Illinois, Inc.\nNIC: 8484                                                   January 1972\n\n                          DS-1 DISPLAY SYSTEM\n\nIntroduction\n\n   This document describes a proposed modular graphic/alphanumeric\n   display system containing a 512 x 512 line, 60 line per inch plasma\n   display/memory panel and a mini- processor.  It is intended to\n   combine the advantages of display memory and local processing power\n   to operate in three general modes as follows:\n\n   1. As an \"intelligent terminal\" operating on data received from the\n      network or a local host to perform text editing, picture\n      processing, etc.\n\n   2. As a passive terminal in which the mini-processor translates\n      existing display lists, command strings and data structure for\n      storage tube terminals or other devices into the proper form to\n      operate the plasma display.  In particular, a software module for\n      simulation of the ARDS 100A is provided.\n\n   3. As an offline system, where the processor is operated as a stand-\n      along mini-computer for debugging, editing, and general display\n      work.\n\n   The DS-1 consists of a display module, a processor module, and\n   keyboard (see Figure 1).  The display model is a DIGIVUE_\n   display/memory unit, model 512-60, produced by Owens-Illinois, Inc.,\n   containing the plasma panel and associated drive circuitry.  The\n   processor module was specially designed and built for the DS-1\n   application by the Raytheon Company.\n\n   A modem is enclosed in the processor module, and is described in\n   later sections.  An alternative RS 232 interface is also available\n   for connection to a TIP or teletype compatible system.\n\n   [Figure 1 DS-1 Display System*]\n\n   In addition to the display module and the processor, the DS-1 has a\n   modem for data transmission, and Ascii keyboard, and an I/0 interface\n   to support numerous external devices.  The mechanical design of the\n   DS-1 emphasizes flexibility, so that both the keyboard and display\n   module can be oriented independently of the processor module.\n\n\n\n\n\nLiddle                                                          [Page 1]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Software will be supplied with the DS-1, for such functions as text\n   editing, vector generation, data management and various I/0 routines.\n\n   The DS-1 is intended principally to operate as an online terminal;\n   the offline mode is used for programming and data preparing chores\n   which do not require access to the host computer.  In describing\n   system operation, therefore, offline operations are simply a subset\n   of online operations in which the only I/0 functions are local.  The\n   I/0 operations are accomplished by \"direct\" input/output\n   instructions, a special feature of the 700 series machines developed\n   at the Raytheon Company.  A single instruction (DIN for input, DOT\n   for output) enables the external device addressed by the instruction\n   to accept the data presently in the accumulator (DOT) or to transmit\n   data to the accumulator (DIN) over the data buss.\n\n   The plasma display X and Y address registers are seen as output\n   devices by the processor; the other basic output device is the modem.\n   The keyboard and input modem are the basic input devices, in addition\n   to the optional cassette tape system for program loading.  These\n   devices, and the interfacing of other peripherals are described in\n   later sections.\n\n   Figure 2 is a block diagram of the basic DS-1 configurations,\n   emphasizing the I/0 structure.  The principal role of the processor\n   module is in the restructuring of input data to an appropriate output\n   form, either from modem-to-display (computer to operator) or\n   keyboard-to-modem (operator to computer).  Such processing consists\n   of handling communication chores,\n\n   [Figure 2 US-1 I/0 Configuration*]\n\n   string and stack manipulation, character suppression or translation,\n   vector construction from endpoint data or character-encoded line\n   drawing commands, and data stream protocol and management, so that\n   the input/output character stream over the modem or channel remains\n   compatible with the host computer, while the keyboard inputs and\n   display outputs are being effectively and efficiently handled.\n\n   The real significance of the DS-1 as a new display terminal stems\n   from its use of the plasma display/memory unit.  Because of its\n   inherent memory and selective erase capability, it can be addressed\n   asynchronously, requires no special \"refresh\" or access to buffer\n   memory, and is indistinguishable from any other output medium, such\n   as tape, etc.  Seen from the operator's point of view, it has very\n   desirable human factors, such as high contrast and \"crisp\" line\n   dimensions, no jitter, flicker, or distortion, and the capability for\n   rear projection of pictorial or tabular data from slides or\n   microfiche, for example.\n\n\n\nLiddle                                                          [Page 2]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Both the display module and the processor are described in details in\n   subsequent sections, as well as the mechanical construction,\n   communication interfaces, keyboard, and the system software.\n\n   Section 2. Display Module\n\n   The DS-1 display module is an Owens-Illinois DIGIVUE_ display/memory\n   unit Model 512-60.  It contains the plasma panel, drive electronics,\n   and display logic.  These three assemblies are described in the\n   following paragraphs.\n\n   PANEL\n\n   The DIGIVUE_ display panel (or plasma panel) is a matrix device.  It\n   is constructed from two pieces of 1/4\" plate glass, upon which very\n   fine gold electrode lines are deposited.  These electrodes are then\n   completely covered by a dielectric film.  These two plates are then\n   sealed together with a gap of a few thousandths of an inch between\n   them, and with their electrode patterns orthogonally oriented.\n\n   This \"sandwich\" is then baked out and pumped down to high vacuum,\n   backfilled with a gas mixture consisting largely of Neon, and sealed\n   off.  The addition of flexible ribbon cable connectors completes the\n   fabrication of the panel.  The device is fat, roughly _\" thick, and\n   virtually transparent.\n\n   The panel is operated in such a way that any location (i.e., any x, y\n   intersection) may be individually turned \"on\" or \"off\" as a source of\n   visible light.  Further, such a location has a \"memory\" and is\n   sustained in the 'on\" or \"off\" state until a new selection signal\n   changes it.\n\n   An AC voltage is applied between all x and all y electrodes in\n   parallel, so that an AC signal less than the breakdown potential is\n   applied across the gas at all times.  This is called the sustaining\n   voltage, VS.  When a single x,y point is to be addressed, a voltage\n   pulse, VP, is applied to the appropriate x and y lines, such that the\n   total addressing voltage at their intersection is given by\n\n                             V ADD = VS + 2VP,\n\n   which exceeds the breakdown potential of the gas, initiation a\n   discharge.\n\n   Since the electrodes are covered by a dielectric, no discharge\n   current can flow in the external circuit.  Rather, the ions and\n   electrons produced by the discharge are carried by the applied field\n   and are deposited as stored charge on the dielectric surfaces, until\n\n\n\nLiddle                                                          [Page 3]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   the resultant net field is nearly zero, quenching the discharge after\n   about one microsecond.  As the AC sustaining voltage changes\n   polarity, however, this stored charge constitutes a bias voltage,\n   adding to the sustaining signal and producing a new discharge, which\n   results in stored charge causing another discharge on the next half\n   cycle, etc.  Thus, once addressed, a single x,y location continues to\n   produce a discharge twice in every sustainer period, or about 100\n   thousand times per second.  Naturally, this appears as a continuous\n   glow to the eye.  A sustained location may be turned off by\n   addressing in such a way that the stored charge is allowed to return\n   to zero.  Thus, a location, or 'cell\", may be turned on or off in a\n   bistable, random access manner.\n\n   The plasma display has a number of extremely useful visual\n   characteristics.  Its transparency permits the use of rear-projected\n   data from microfilm, color slides, maps, forms, etc., to be \"mixed\"\n   with the dynamic, computer generated data to be displayed\n   (characters, plots, graphics, etc.). In addition to the high\n   brightness of the gas discharge, the contrast ration is extremely\n   nigh.  The panel used in the model 512-60 has 512 x 512 lines at 60\n   lines per inch.  This high resolution and large size allows highly\n   readable characters and graphics to be mixed, without distortion or\n   jitter of the data.  Dot matrix characters are especially attractive,\n   since the \"dots\" of the discharge sites have very clean, crisp\n   dimensions.\n\n   A significant system characteristic of the plasma display matrix is\n   its random access memory property.  Unlike storage tube displays, it\n   may be selectively erased as well as written, changing a single\n   point, curve, or character without altering the contents of other\n   locations on the panel.  Large quantities of text, time histories of\n   measured data, or complex memory.  This allows more efficient use of\n   the processor and simpler data management within computer memory.\n\n   The 512-60 panel used in the DS-1 application will have an active\n   area of 8.5 x 8.5 inches, containing 512 x 512 lines.  There will be\n   an additional 4 line peripheral border around the addressable area to\n   provide conditioning of the discharge sites.\n\n   The back of the panel will be frosted with an optically diffusing\n   surface suitable for the projection of optical images.  A\n   circularly-polarizing neutral density filter with anti-glare coating\n   will be provided on the front of the display.  The brightness and\n   contrast will be sufficient for use in a normal lighted laboratory\n   area.\n\n\n\n\n\n\nLiddle                                                          [Page 4]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Drive Electronics\n\n   The Drive electronics for the display module will be the standard\n   Owens-Illinois circuits requri3ed to operate a 512 x 512 line panel\n   as part of our model 512-60 standard display unit.  They consist of a\n   sustaining generator, which maintains cells, once addressed, in the\n   appropriate state (\"on\" or \"off\") after removal of the addressing\n   signal, and pulse-forming circuits for the generation and appropriate\n   mixing of addressing pulses at the selected panel sites.\n\n   The sustainer will operate with a basic period of 20 microseconds,\n   with a peak voltage of approximately 130 volts.  Exact voltage\n   levels, frequency and waveshape are adjusted for optimal performance\n   subject to power supply constraints and data rate requirements.\n\n   The address circuits are multiplexed to reduce the number of active\n   circuits required and employ a non-linear mixing scheme for line\n   selection.  A pulse of 100 volts is applied with the proper time\n   phase to achieve writing and erasing.  The pulse is disabled in all\n   but the selected line pair.\n\n   Provision is also made for bulk erasure in which the entire panel is\n   erased in two sustainer periods.  A power supply of high density\n   design will provide the necessary sustaining, addressing, and logical\n   level voltages.  The design will employ high-frequency invertors and\n   switching regulation for maximum efficiency and reduced size.  It\n   requires about 250 watts, and will be housed inside the processor\n   module.\n\n   Display Logic\n\n   The logic included in the display module provides the timing and\n   control required for the sustaining generator and the address pulses,\n   and also provides the logic level interface to the processor module.\n   The interface is TTL compatible.  It contains 2 nine-bit address\n   ports X0-X8 and Y0-Y8, which [not legible*], in absolute binary code\n   the x,y intersection which is to be addressed.  These addresses are\n   accepted when given a write command or an erase command by the\n   control lines W or E, respectively.  These inputs must all be held\n   steady until acceptance of the data and completion of the operation\n   has been indicated by the status line, a logic level output from the\n   display unit.  Ad additional control line, B, is used in conjunction\n   with the H line to cause a bulk erasure of the entire screen.\n\n\n\n\n\n\n\n\nLiddle                                                          [Page 5]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   The model 512-60 display unit proposed in this document is of the\n   serial address type, and thus can write or erase a single point each\n   20 u/seconds.  This permits vectors to be drawn at more than 800\n   inches/second.  Characters in a 5x7 dot matrix can be written at a\n   rate of about 1400 characters per second.\n\n   A parallel address type display unit is presently being developed at\n   Owens-Illinois.  This module, when available, will be compatible with\n   the DS-1 system with no modification to the processor required.  This\n   display will address 16 lines in parallel, which will allow more than\n   6,000 characters per second to be displayed, or a complete page to be\n   generated in .330 seconds.\n\n   Section 3 Processor Module\n\n   The Processor is a minicomputer (Figure 1) that accepts ASCII encoded\n   commands and generates outputs to control the writing of information\n   by the display module.  The Processor performs the functions of\n   storing information, data and instructions and regulating the flow of\n   information between the terminal's Keyboard, Modems, Display Module,\n   and Program Loading Device (Figure 2).\n\n   In a typical operation, the processor calls up input commands from\n   the modem and the keyboard and generates instructions to the display\n   module driver circuitry to produce the required characters, vectors,\n   or editing programs.\n\n   Instructions and data are stored in 16 bit words.  Arithmetic\n   functions are performed in 2's complement form.  The basic machine\n   cycle time is 1.6 microseconds.\n\n   The major functional units of the processor are: (Figures 3 \u0026 4)\n\n   o  Memory\n\n   o  Memory Address Register\n\n   o  Program Counter\n\n   o  Instruction Register\n\n   o  Accumulator\n\n   o  Instruction Processing Synchronizer\n\n   o  Terminal I/O Circuitry\n\n   These units are briefly described next.\n\n\n\nLiddle                                                          [Page 6]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Memory\n\n   An operational memory of 2048 - 16 bit words plus bootstrap memory of\n   64-16 bit words are provided.  The 2038 word memory is a Random\n   Address Memory (RAM) and is used to store the character generator,\n   the vector generator, and the editing programs needed to provide the\n   specific operational requirements of the terminal.  Using the RAM\n   type memory provides the flexibility\n\n   [Figure 3 Processor Data Flow*]\n\n   [Figure 4 Instruction Processor Synchronizer*]\n\n   to alter instruction routines and to tailor the terminal for the\n   application.  Since the terminal uses RAM, an operational program\n   loading device (a magnetic tape cassette read/write recorder) is\n   proposed so that the operational program can be loaded when the\n   terminal is turned on.\n\n   The RAM size is sufficient to permit storage of 128 characters, a\n   vector generation routine and an instruction set.\n\n   The bootstrap memory is provided for storing a terminal start up\n   program that puts the terminal in a state for reading instruction\n   data into its operational memory from external sources.  Read Only\n   Memory (ROM) devices are used for the bootstrap memory.  Both the RAM\n   and the ROM memories are made up entirely of MOS.\n\n   Memory Address Register\n\n   The Memory Address Register (MA) is a twelve bit register that can be\n   loaded with the program counter or the address portion of the memory\n   data.\n\n   Program Counter\n\n   The Program Counter (PC) is a 12 bit counter-register that can be\n   loaded with the address portion of the instruction register.\n\n   Instruction Register\n\n   The Instruction Register (IR) is a 16 bit register of which 4 bits\n   contain the instruction and 12 bits the data associated with the\n   instruction.  This can be loaded with a 16 bit memory word.\n\n\n\n\n\n\n\nLiddle                                                          [Page 7]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Accumulator (AC)\n\n   The Accumulator (AC) is a 16 bit shift register that can be loaded\n   with the contents of the program counter, the data inputs, or the\n   arithmetic unit.\n\n   Instruction Processing Synchronizer (IPS)\n\n   The Instruction Processing Synchronizer controls the timing and data\n   flow in the processor.  Clocked by its own oscillator, the IPS calls\n   up instructions from the memory, which then dictates the sequence to\n   be followed.\n\n   Terminal I/O Circuitry\n\n   The processor communicates with the other elements of the terminal\n   either directly on the I/O bus or via one of three device\n   controllers.  The controllers are required to make the I/O devices\n   compatible with the processor.  Separate controllers are provided for\n   Keyboard, Display Module, and Serial I/O devices.\n\n   The I/O Bus includes:\n\n   o  16 Parallel Input Data Lines\n\n   o  16 Parallel Output Data Lines\n\n   o  4 lines for selecting the I/O device to communicate with the\n      processor\n\n   o  4 Lines for specifying the function to be performed\n\n   o  16 sense lines for monitoring the status of each I/O device\n\n   o  2 strobe lines to initiate the transfer of data to and from the\n      I/O devices\n\n   o  1 system clock line\n\n   Each of these lines are available at the I/O Bus Connector.  The\n   lines required by each controller varies with the function performed\n   by the controller (Figure 4).  Three ports are provided with the\n   Serial I/O Channel Controller, two asynchronous and one synchronous.\n   The latter is for use with an optional cassette tape recorder that\n   can be either supplied as an option with the terminal or purchased at\n   a later date.  The two asynchronous ports are for interface with a\n\n\n\n\n\nLiddle                                                          [Page 8]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   teletypewriter modem (not supplied) and a telephone modem that is\n   supplied with the terminal.  Direct connection with a data processing\n   machine ca be accomplished at the I/O bus connector.\n\n   The processor provides a single level interrupt that causes the\n   processor to transfer control to a designated sub-program while\n   automatically storing the contents of all appropriate registers and\n   the return linkage.  The mask and unmask instructions cause the\n   interrupt line to be gated according to the state of an inhibit\n   flip-flop.  The last instruction (Interrupt Return) restores the\n   program counter, accumulator, and overflow indicator to the condition\n   existing at the time of interrupting.\n\n   Software\n\n   The desired terminal operations, that is, the logical capabilities of\n   the display terminal will be implemented in software.  This approach\n   provides a degree of flexibility and versatility to the terminal's\n   editing and display writing capability.  In the latter area, the\n   generation and display of characters, symbols, and graphics are\n   limited in variety only by the resolution (60 dots per inch) and the\n   size (8-1/2\" x 8-1/2\") of the display screen.  The flexible nature of\n   this approach is enhanced by the expandability of the memory to 4K\n   (32K optional).\n\n   The software is divided into two segments: (1) servicing routines for\n   the input modem, the output modem, the keyboard, and the display\n   module and (2), specific function routines for line generation,\n   editing, point generation, and character generation.\n\n   Typical software processing starts with the program in an idle loop\n   checking the input sense line.  When a bit is ready in the modem, the\n   sense line goes true, the processor skips and the program inputs the\n   bit.  The sense line resets.  The program counts the bit, saves it,\n   and returns to an idle loop waiting for subsequent bits.  As each bit\n   is input, it is stored in proper sequence.  When a word is entirely\n   memory, it is moved to another memory location where it can be\n   decoded.  The program resets the input, counts for the next word, and\n   transfers to the task routine which analyzes the command and\n   determines which segment of the program is to perform the function.\n\n   For this case, assume that the program was instructed to plot a\n   character.  The program computes a table from the value of the\n   character code.  The table contains a compacted image of the dots\n   representing the character.  The image is unpacked from the table\n   into a temporary hold area.  Then, starting at the top left corner,\n   the program outputs the coordinates and the one or zero value of the\n   image.  The next point is output in the next lower Y position.  The\n\n\n\nLiddle                                                          [Page 9]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   process is repeated until 14 bits have outputted (one column).  The\n   program resets the Y coordinate to the original Y and increments the\n   X.  The next column is output the same as the first.\n\n   When nine columns have been output, the program returns to the idle\n   loop.\n\n   Instruction Description\n\n   Instructions and data are in the form of 16 bit words.  Arithmetic\n   functions are performed in 2's complement form.  The following word\n   formats are applicable:\n\n   Instruction              0  1  3  4     15\n                            I   OP    Address\n\n   Address Data             0  1           15\n                            I     Address\n\n   Data                     0 1            15\n                            S      Data\n\n   The instruction format provides 1 bit to indicate indirect\n   addressing, 3 bits for the operations code (OOP) and 12 bits for the\n   address.  The address data format contains 15 bits of address and 1\n   bit for indicating indirect addressing.  The data word format\n   includes 1 sign bit and 15 bits for data.\n\n   Logical control of data flow in the display processor is centered\n   about the accumulator, with the majority of the operations involving\n   it, or the sensing of data conditions involving the accumulator.  The\n   19 processor operations represent 6 types of instructions:\n\n   o  Data Movement (Through the accumulator)\n\n   o  Logical operations (on accumulator contents)\n\n   o  Condition Checking\n\n   o  Input/Output\n\n   o  Jump Control\n\n   o  Indexing\n\n   Each of these instruction types are briefly discussed next.  Refer to\n   Appendix I for a complete description of the instruction set.\n\n\n\n\nLiddle                                                         [Page 10]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n              Data Movement Instructions - CLA, LDA, ADD, STC\n\n   These four instructions: enable the accumulator to be cleared or to\n   be loaded with data; effect the addition of a word to the\n   accumulator's contents; and enable the accumulator contents to be\n   stored in memory.\n\n                  Logical Operations - AND, CMP, RAL, SAL\n\n   These four instructions: enable a word in memory to be logically\n   \"anded\" to the accumulator; permit the 2's complement of the\n   accumulator's contents to be formed; enable a left rotation of the\n   accumulator contents, and permit a left shift of the accumulator's\n   contents to be made.\n\n               Condition Checking - SAZ, SNZ, SAC, SNA, SNO\n\n   These five instructions allow for various condition checks.  SAZ and\n   SNZ permit the accumulator to be checked for zero or non-zero\n   contents.  SAG and SNA enable any bit position in the accumulator to\n   be checked for a 1 or 0 setting.  SNO provides a check for\n   accumulator overflow.\n\n                        Input/Output - SS, DIN, DOT\n\n   The SS instruction provides a means of determining whether devices\n   which interface with the processor (e.g., modem display module) are\n   ready for data transfers.  Actual transfer of data occurs through the\n   accumulator, one word at a time.  DIN causes one 16-bit word to be\n   transferred from an external device to the accumulator.  DOT\n   indicates the transfer of one 16-bit word from the accumulator to an\n   external device.  The particular device DIN or DOT address is\n   indicated by the value in the device address field of the\n   instruction; the instructions enable controller I/O with a variety of\n   peripheral units.\n\n                          Jump Control - JMP, JSR\n\n   These instructions provide the means for altering the flow of program\n   logic.  JMP is an unconditional transfer of control to a designated\n   memory location.  JSR provides a subroutine capability to the\n   program.  The execution of a JSR instruction involves saving the\n   return address to the jump at a designated location.  By designating\n   the store for the return address as not being in line with executed\n   code, the program which is in execution can be held in read only\n   memory.\n\n                              Indexing - IAS\n\n\n\nLiddle                                                         [Page 11]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   These instructions provide an indexing facility to the order code.\n   The indexing occurs in the memory location specified in the address\n   field of the IAS instruction; thus, multiple indexing is possible.\n\n   The above instruction types provide a fundamental but general\n   programming capability.  A basic symbolic assembly language has been\n   built about this instruction set and is used to write programs which\n   do character, assembler program; the assembler is written in FORTRAN\n   language.\n\n   Modem\n\n   The display terminal is supplied with a modem for interfacing the I/O\n   controller with a telephone line.  The modem operates asynchronously\n   through one of the three I/O controller ports (Figure 5).  It is an\n   FSK unit that operates at data rates from 0 to 1800 bps in a four\n   wire full-duplex mode and from 0 to 1200 bps in a half-duplex mode.\n   In the four wire full-duplex mode, both the local and remote modem\n   operate fully independently.  A data transfer sequence may be\n   originated from either model at any time by activating the Request To\n   Send signal.  The data transfer sequence is terminated by dropping\n   the RTS signal at the originating modem.  In the half-duplex mode,\n   the modem operates with any data format.  Selection between transmit\n   and receive modem identity is determined by the status of the Request\n   To Send signal from the processor.\n\n   The modem may be used over a dial-up network using the half-duplex\n   mode.  Operation in this manner requires the use of the November,\n   1968, Data Access Arrangement, number F-57951, supplied by the Bell\n   System.  In this operating mode, a data call is originated by the\n   phone set associated with the Data Access Arrangement.  At the remote\n   location, the call is manually answered and the data key on the phone\n   se is placed in the data position.\n\n   Keyboard\n\n   A multimode keyboard with standard ASCII character-to-key assignments\n   is proposed.  The keyboard includes codes for upper and lower case\n   alphanumerics and special function keys and codes for editing\n   operations.\n\n   [Figure 5 DS-1 I/O Data Lines*]\n\n   Section 4 Mechanical Considerations\n\n   The DS-1 consists of three separate self-contained sub-units: the\n   display module, the processor module, and the keyboard.\n\n\n\n\nLiddle                                                         [Page 12]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   Display Module - The Display Module will contain the plasma panel and\n   the driver electronics.  It's overall size will 14\" W x 14\" H x 61/2\"\n   D, and will weight approximately 25 pounds.  An 8-1/2\" x 8-1/2\"\n   viewing area will be provided.\n\n   Interconnections to this unit will be provided at the rear of the\n   assembly.\n\n   Processor Module - The processor enclosure will contain circuit board\n   assemblies, three separate power supplies, and a cassette tape\n   recorder (optional).  The overall size of this unit will be\n   approximately 20\" W x 6-1/2\" H x 26\" D and will weigh approximately\n   60 pounds.\n\n   Input/Output connectors will be provided at the rear of the enclosure\n   to accommodate the units with which it must interface.\n\n   Keyboard - This unit will provide a full alphanumeric keyboard housed\n   in a desk top enclosure approximately 15\" W x 3\" H x 7\" D.  The unit\n   will include:\n\n   o  The entire displayable character set in the standard ASCII layout.\n\n   o  Special Function keys for editing and I/O control.\n\n   Keyboard operation is similar in touch characteristics to an electric\n   typewriter and suitable for use by an inexperienced operator.\n\n   Appendix I\n\n   DS-1 Instruction Set The following instructions are provided;\n\n   The execution item for instructions having indirect addressing\n   (optional with instruction marked*) requires one cycle for each\n   indirect level.\n\n   LDA, A, I Load Word      0  1  2  3  4      15\n                            I  0  0  0      A\n\n   This instruction loads the contents of address A into the\n   accumulator.  The previous contents are lost.  The program counter is\n   indexed by 1.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4      15\n   JMP, A, I, Jump          I  0  0  1      A\n\n\n\n\n\nLiddle                                                         [Page 13]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   This instruction causes program control to be transferred to the\n   address A.  The contents of the accumulator are not altered.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4      15\n   JSR, A, I, Jump \u0026 Save   I  0  1  1      A\n                   Return\n\n   This instruction stores the present address plus 1 at the location\n   specified by the contents of memory location A and transfers program\n   control to location A+1.  The accumulator is cleared.\n\n                              Time = 3 cycles*\n                            0  1  2  3  4      15\n   ADD, A, I, Add           I  0  1  0      A\n\n   This instruction adds the contents of memory at location A to the\n   accumulator.  The overflow indicator is set to the appropriate state\n   and remains set until the next ADD, IAS, or CLA instruction is\n   processed.\n\n                              Time = 2 cycles*\n                            0  1  2  3  4      15\n   AND, A, I And            I  1  0  0      A\n\n   The instruction ands logically the contents of the accumulator with\n   the data stored in Location A.  The results is stored in the\n   accumulator.\n\n                              Time = 2 cycles*\n                            0  1  2  3  4      15\n   STA, A, I Store          I  1  0  1      A\n           Accumulator\n\n   This instruction stores the contents of the accumulator in memory\n   Location A.\n\n                              Time = 2 cycles*\n   IAS, A, I Index \u0026 Skip   0  1  2  3  4      15\n             If Zero        I  1  1  0      A\n\n   This instruction reads the contents of memory location A and adds 1\n   to it.  The results are then stored back in location A of the memory.\n   If the results of the addition is zero (i.e., an overflow generated)\n   the next instruction is skipped.  Otherwise, the next instruction is\n   executed.  The accumulator contains the contents of A plus 1.\n\n\n\n\n\nLiddle                                                         [Page 14]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n                              Time = 3 cycles*\n                            0  1  2  3  4  5  6  7  8   11  12  15\n   SAL, N Shift             0  1  1  1  0  0  0  0    n\n   Accumulator Left\n\n   This instruction shifts the contents of the accumulator left by n\n   bits, the least significant bits become zero.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8   11  12  15\n   RAL, N Rotate            1  1  1  1  0  0  0  0    n\n   Accumulator Left\n\n   This instruction rotates the contents of the accumulator left by n\n   bits.  The most significant bit becomes the initial least significant\n   bit.\n\n                              Time = cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   HLT, Halt                0  1  1  1  1  0  0  1\n\n   This instruction causes program execution to stop.  Used primarily\n   for debugging purposes, depression of the RUN button or SINGLE CYCLE\n   button causes continued execution either continuous or one cycle\n   respectively.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   SAZ Skip Accumulator     0  1  1  1  0  1  0  0\n   Zero\n\n   This instruction causes the next instruction to be skipped if the\n   accumulator is zero.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   SNZ Skip Accumulator     1  1  1  1  0  1  0  0\n   Non-Zero\n\n   This instruction causes the next instruction to be skipped if the\n   accumulator is non-zero.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8  11  12  15\n   SAC, B Skip              1  1  1  1  0  1  0  1    B\n   Accumulator\n\n\n\n\n\nLiddle                                                         [Page 15]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   This instruction causes the next instruction to be skipped if bit\n   number B is one (1).  The most significant bit is zero and the least\n   significant is 15.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   SNO Skip No                 1  1  1  0  0  0  0\n   Overflow\n\n   This instruction causes the skipping of the next instruction if the\n   overflow is not set.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   CMP Complement              1  1  1  0  0  1  1\n   Accumulator\n\n   This instruction stores the 2's complement of the accumulator in the\n   accumulator.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8  11  12  15\n   DOT Data Output             1  1  1  0  0  0  1   Add    Func.\n\n   This instruction causes the contents of the accumulator to be gated\n   to the DIO Data buss and a Data Output Strobe (DOS) pulse to be\n   transmitted to the peripheral device.  This pulse is used by the\n   device to store the contents of the Standard I/O Buss.  The device\n   Address and Function data is transmitted simultaneous with data.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8  11  12  15\n   DIN Data Input              1  1  1  1  1  0  0   Add    Func.\n\n   This instruction causes the device address and function data to be\n   transmitted as in the DOT instruction.  Upon detection of this\n   address, function and DATA Input Strobe (DIS), the device gates its\n   data onto the Standard I/O Buss.  The deactivation of the Data Input\n   Strobe indicates that the data has been received and stored.\n\n                              Time = 1 cycle*\n                    0  1  2  3  4  5  6  7  8  9  10  11  13  14  15\n   INR Interrupt    0  1  1  1  1  1  1  1  0  0   0     L    0    0\n   Return\n\n\n\n\n\n\n\nLiddle                                                         [Page 16]\n\f\nRFC 296                   DS-1 Display System               January 1972\n\n\n   This instruction causes the Program Counter, the Accumulator, and the\n   Overflow indicator to be restored to the conditions prior to\n   servicing the present active level.  Parameter L must be set to the\n   level being processed for correct return linkage.  The interrupt is\n   returned to the idle state.  See pages 3-3 and 3-4.\n\n                              Time = 4 cycles*\n                            0  1  2  3  4  5  6  7  8    15\n   MSK Mask Interrupts      1  1  1  1  1  1  1  0\n\n   This instruction causes the interrupt system to be inhibited from\n   causing any interrupt to be processed.  Interrupts waiting or\n   received while interrupts are _masked_ will be processed when they\n   are unmasked.  See pages 3-3 and 3-4.\n\n                              Time = 1 cycle*\n                            0  1  2  3  4  5  6  7  8    15\n   UNM Unmask Interrupts    0  1  1  1  1  1  1  0\n\n   This instruction causes the interrupt system to be processed in the\n   normal manner.  See pages 3-3 and 3-4.\n\n                            Time = 1 cycle*\n\n   * Please see the PDF file for figures and missing text (not legible in\n     the original).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLiddle                                                         [Page 17]\n\f\n"
}