{
  "series": "Request for Comments",
  "number": "393",
  "howpublished": "RFC 393",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0393",
  "url": "https://www.rfc-editor.org/info/rfc393",
  "title": "Comments on Telnet Protocol Changes",
  "pagetotal": "4",
  "year": "1972",
  "month": "oct",
  "body": "\n\n\n\n\n\nNetwork Working Group\nRequest for Comments: 393                         Joel M. Winett\nNIC 11585                                         Lincoln Laboratory\nCategories: TELNET                                LL-67\nReferences: RFC 109, 139, 158,318, and 328        3 October 1972\n\n\n                  Comments on TELNET Protocol Changes\n\n\n\n    Through this RFC, I am registering my objection to two of the\nthree suggestions for changing the TELNET protocol as described in RFC\n328 and am adding my suggestion for the interpretation of the TELNET\nReverse Break Control Code.\n\n\n1.  Hide-your-input\n\n    This code was originally put in the TELNET protocol to give the\n    virtual terminal the ability to simulate a real terminal which has the\n    print suppress capability. If the terminals being used at some\n    installations do not have the ability to disable the printing\n    mechanism, the TELNET being used can either ignore this code or\n    attempt to simulate the function using other means (e. g., blacking\n    out a number of character positions and returning to the first\n    character position).  Every attempt should be made to allow a network\n    user of a time-sharing system to have the same facilities as a local\n    user of the time-sharing system. The specification of TELNET protocol\n    should not limit the function of users if a function cannot be\n    supported by all users.\n\n    The \"Hide-your-input\" and \"Echo\" TELNET control codes provide for the\n    support of two functions available in some time-sharing systems.  The\n    \"Hide-your-input\" function is really a special case of the \"Echo\" mode\n    of operation where the server tells the user that the server will echo\n    but the server does not. A separate code is used for this func- tion\n    since some servers may support this function but may not support the\n    full \"Echo\" mode of operation.\n\n\n   ] This material has not been reviewed for public release and is [\n   ] intended only for use with the ARPA network. It should not be [\n   ] quoted or cited in any publication not related to the ARPA    [\n   ] network.                                                      [\n\n\n\n\n\n\n                                                                [Page 1]\n\f\n    The \"Hide-your-input\" and \"Echo\" modes of operation are disabled with\n    the \"No-echo\" control. ASCII control codes could have been chosen for\n    these functions but it was decided that the NVT ASCII control codes\n    should only be specified for commonly used functions.\n\n    To indicate the number of characters for which the printing should be\n    suppressed, the \"Hide-your-input\" TELNET control could be rede- fined\n    to include a byte following the \"Hide-your-input\" control to indicate\n    the number of characters for which the printing should be concealed.\n    The \"No-echo\" control would still be sent so that systems with the\n    print suppress feature would not have to count characters.\n\n\n2.  Data Types\n\n    The protocol should allow a server to support users with character\n    codes other than ASCII, e. g., EBCDIC. The definition of an alter-\n    nate character code should include the definition of the TELNET\n    control codes. An EBCDIC code has been proposed in RFC # 109 and has\n    been implemented on the Lincoln Laboratory 360/67. If it is desired to\n    allow one to return to the network standard ASCII code, the non-ASCII\n    code should contain a code to indicate return to ASCII.\n\n\n3.  Reverse Break\n\n    The code for Break is defined as a 129th ASCII data code. It is\n    usually transmitted from a user's network virtual terminal to a server\n    when a corresponding key (break key or attention key) is typed on the\n    TELNET terminal and is interpreted by serving systems as that special\n    key. Since a common function of this key is to interrupt a running\n    process the server must be alerted to the fact that this code has been\n    transmitted no matter when it is sent.  Thus, the TELNET SYNC (TELNET\n    data mark together with a network interrupt on the TELNET send socket)\n    must also be trans- mitted to cause the serving process to examine the\n    received charac- ters. The ASCII control code EOT (Octal 4) could have\n    been chosen for the break function but his code is not interpreted by\n    all systems.  Thus, it was decided that an NVT TELNET control code\n    should be used for this purpose.\n\n    The use of the Break Code from server to user TELNET has not\n    previously been defined and, thus, could be used to solve the\n    following problems which occur with line at a time and half duplex\n    systems. Line at a time systems do not output characters to the\n    terminal a character at a time but, instead, wait until a line is ready\n    for output. If a CR-LF sequence (TELNET protocol for end of line)\n    is received it is interpreted as an end of line and the characters\n    received are output. If characters are received which do not end\n\n\n\n                                                                [Page 2]\n\f\n    with CR-LF the user TELNET does not know whether or not other\n    characters will follow which are part of the current line. Thus, the\n    characters received thus far must be output, without a CR-LF (new\n    line). If an end of message code were transmitted, the user TELNET\n    would know whether or not other characters would be received for\n    output. The user TELNET would then print characters either when\n    the TELNET Break control is received or when the CR-LF newline\n    sequence is received.\n\n    If the user TELNET is being run from a half duplex terminal, the\n    terminal cannot receive input and type output at the same time.  Thus,\n    if output is received while the terminal is being used for input the\n    TELNET program must either buffer the received characters or abort the\n    input mode of operation to write out the received charac- ters. If\n    characters received are written out as they are received, the terminal\n    operation would be very similar to a full duplex terminal.  This mode\n    of operation requires that the terminal have a reverse break\n    capability to allow the input mode to be aborted by program control.\n\n    In some systems it is only desirable to abort the input mode of\n    operation when a complete line is ready for output. If a string of\n    characters received does not end with an end of line code, the\n    characters received will not be output until after the input line is\n    entered, i. e., the mode of operation changed from input to output.\n    If an end of message code were transmitted, the user TELNET could\n    abort the input mode of operation even though the end of line code was\n    not received.\n\n    In systems which do not support the reverse break feature or if the\n    terminal does not have this feature it is not possible to abort an\n    input mode of operation in order to output received characters. In\n    this case, the systems can operate in either of two modes, a) un-\n    locked keyboard, or b) locked keyboard mode.\n\n    In an unlocked keyboard system, received characters are not output\n    until the user completes an input line. An input line is completed\n    when the end of line code is entered. This might be a CR, a LF, or\n    a NL code. After received characters, if any, are output, the input\n    modes is re-entered. To receive output the user must enter an input\n    line (possibly a null line). If the user is waiting for output, he must\n    repeatedly enter a line until the output has been received and typed.\n    Since an input line must be entered just to receive output, it is\n    desirable to define an input line which does not result in anything\n    being sent to the serving system. If a null line (a line consisting of\n    just the end of line code) is chosen for this purpose, some other input\n    line must be defined to cause a null line to be transmitted.\n\n    In a locked keyboard system, the input mode is not immediately\n\n\n\n                                                                [Page 3]\n\f\n    re-entered after an input line is entered. It is re-entered only after\n    a defined prompt is received. The prompt can be defined to be the\n    reception of any character or can be defined to be a specific charac-\n    ter code. If a specific code is chosen the serving site must send this\n    code whenever the terminal should be put into input mode. If an end of\n    message code were transmitted this code could be inter- preted to be\n    the input prompt code.\n\n     In summary, three situations have been described where an end of\nmessage code would be desirable.\n\n     a) To indicate when a line which does not end with CR-LF should\n        be output for line at a time systems\n\n     b) To indicate that the input mode in half duplex operation should\n        be aborted so that received characters can be output\n\n     c) As a prompt character to cause the input mode to be entered\n        for locked keyboard half duplex systems\n\n     The ASCII TELNET control code for Break (Reverse Break) could be\ninterpreted as an end of message code when sent from server to user.\n\n\n\n          [ This RFC was put into machine readable form for entry ]\n          [ into the online RFC archives by BBN Corp. under the   ]\n          [ direction of Alex McKenzie.                      1/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\n"
}