{
  "series": "Request for Comments",
  "number": "186",
  "howpublished": "RFC 186",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0186",
  "url": "https://www.rfc-editor.org/info/rfc186",
  "title": "Network graphics loader",
  "pagetotal": "17",
  "year": "1971",
  "month": "jul",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        J. Michener\nRequest for Comments: 186                                            MCG\nNIC: 7130                                                   12 July 1971\n\n\n                       A Network Graphics Loader\n\nMOTIVATION\n\n   The facility described herein will permit remote users on the ARPA\n   network to obtain graphics output from programs they write for the\n   Evans and Sutherland Line Drawing System Model 1 (LDS-1) located at\n   the DMCG computer.  Also, users at that computer can employ the\n   facility to do graphics on their ARDS and IMLAC consoles.\n\n   INTRODUCTION\n\n   The Graphics Loader on the Project MAC Dynamic Modeling/Computer\n   Graphics PDP-10 is for use with the E\u0026S LDS-1 display.  Display\n   programs can be shipped to it and executed repeatedly.  The output,\n   which would normally be visible at the PDP-10 installation, is\n   transmitted to the originating site in digital form.\n\n   Corrections and alterations to display programs can be transmitted so\n   that the bulk of the program need be sent only once.  Any data or\n   parameters which vary may be sent whenever they change.\n\n   The originating site may request to have any part of its program or\n   data transmitted back to it from the Graphics Loader.  With this\n   feature it is possible to debug a display program which is\n   incorrectly modifying itself.\n\n   In order to simplify the Graphics Loader, it is assumed that the\n   display program should occupy a contiguous block of core starting at\n   location 1000 octal (i.e., it has been assembled absolutely), that\n   its first executable instruction is at the same place, and that, when\n   one frame is complete, it jumps to location 777 octal.\n\n   The E\u0026S LDS-1 has the capability of writing into memory the\n   coordinates of endpoints of the line segments which would be visible\n   to a user sitting at the LDS-1 display device.  A register called the\n   Writer Address Register (WAR) is used to indicate an area of memory\n   to contain these coordinates.  Various submodes are available for\n   output to memory, but for the submode of greatest interest, \"Scaled\n   Coordinates to Memory\" mode, each \"visible\" line segment causes two\n   words of coordinate data to be stored.  The contents of the WAR are\n   incremented for each word stored.\n\n\n\n\nMichener                                                        [Page 1]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   For each execution of the display program, the Graphics Loader sets\n   the proper output mode (suppressing output to the cathode ray tube at\n   the DGSD machine), initializes the WAR before execution and saves the\n   final value of the WAR after execution.  Thus it is easy for the\n   Graphics Loader to transmit to the user only the \"visible output\" of\n   the display program.\n\nDESCRIPTION OF REQUESTS FROM THE REMOTE USER PROGRAM\n\n   Request are in the form of 36 bit words.  The first word of a request\n   is interpreted as two 18 bit fields.  The left half contains a number\n   identifying which of six operations is being requested.  The right\n   half is either a mode or is ignored, depending on the requested\n   operation.  (If the left half is not a valid operation number, an\n   error message is sent and the next word is considered to begin a new\n   request.)\n\n   Depending upon the operation requested and upon the mode, one word of\n   argument data may or may not be read.  This word is (also) treated as\n   two 18 bit halves.  The interpretation of the halves depends on the\n   operation.  In the description of individual operations, the left\n   half will be called A1; the right half will be called A2 (standing\n   for Arguments 1 and 2).\n\n   Error checking of the arguments is performed next.  If an error\n   condition is present, error information is sent to the user program\n   at the originating site and the Graphics Loader prepares itself for\n   the next command.  If no error condition is present, an acknowledging\n   message is sent unless the Suppress Acknowledgement mode prevails.\n   For certain requests, the operation is performed before the\n   acknowledgement is transmitted.\n\n   For those operations involving a transfer of display program\n   information (either to or from the Graphics Loader), this transfer is\n   done next, after the error checking of arguments has been performed\n   and after an acknowledge message has been sent.\n\n   This done, the Graphics Loader reads the next command.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                        [Page 2]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\nSPECIFICATIONS\n\n0.  The valid operations are currently:\n\n      SETUP            indicated by an operation number of 1\n\n      EXECUTE          indicated by an operation number of 2\n\n      TRANSMIT         indicated by an operation number of 3\n\n      UPDATE           indicated by an operation number of 4\n\n      FLUSH connection indicated by an operation number of 5\n\n      MODESET          indicated by an operation number of 6\n\n\n   An invalid operation number is an error condition (condition number\n   0).\n\n1.  The SETUP request.\n\n   The mode field of the first word is ignored.  SETUP requires an\n   argument word.  The arguments A1 and A2 are both treated like\n   lengths, so both must be non-negative numbers.  If they are not,\n   error condition 2 is recognized.\n\n   1A.   If A1 is _strictly_ _positive_, then this request describes a\n         whole new display program, and any previous display program\n         from this user is to be forgotten.  In this case, A1 is the\n         total length of the display program, exclusive of the area to\n         be addressed by the Write Address Register (WAR).  A2 is the\n         length of the area to be addressed by the WAR.  As such, A2\n         must be at least twice the greatest possible number of visible\n         line segments to be displayed.  (If the LDS-1 programmer feels\n         sure of himself, he may set up his own \"WAR area\" and set his\n         own \"Output To Memory\" modes.  He would not need to use the A2\n         parameter at all.)\n\n         An acknowledge message is sent (unless suppressed; see\n         MODESET).  Then the display program is read (which consists of\n         (A1) words).\n\n   1B.   If A1 is _zero_ then this request is for a change in the length\n         of the area to be addressed by the WAR.  A2 contains the new\n         length.  A2 may be larger or smaller than the current length of\n\n\n\n\n\nMichener                                                        [Page 3]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n         the area.  If no previous 1A type of SETUP request has been\n         processed, error condition 1 is recognized.  Otherwise an\n         acknowledge message is sent (unless suppressed, see MODESET).\n\n         (This request would typically be used if an initial estimate on\n         the number of words required were too low.  Error condition 5,\n         described under EXECUTE may be indicate a low estimate.)\n\n2. The EXECUTE request.\n\n   The EXECUTE request does not take a parameter word, but the mode\n   field is used to specify the number of times that the \"EXECUTE\n   action\" is to be performed.  (This \"action\" is described in detail\n   following this paragraph.  Briefly, it is a single execution of the\n   display program.)  If the mode field is zero or negative, then one\n   EXECUTE action is performed.  Whenever an error is encountered during\n   a multiple EXECUTE, the iteration is immediately stopped.  This way,\n   the status of the display program after the error is not destroyed,\n   and no flood of error messages is ever sent, only a single one.\n\n   The EXECUTE action is as follows:\n\n   If no previous SETUP request has been processed, error condition\n   number 1 will be recognized.\n\n   An attempt is made to seize the E\u0026S LSD-1 display processor.  (If a\n   previous EXECUTE has succeeded in seizing it, then this will also\n   succeed.  If some other user of the DMCG machine has control of the\n   display processor, this will fail and error condition 4 will be\n   recognized.)\n\n   The display program is now executed.  The environment at the\n   beginning of execution of the display program is given in Appendix 1.\n\n   If a previous execute failed in a way indicating a programming error\n   in the display program (error conditions 6,7 and 8), then an SETUP or\n   an UPDATE request must be executed before another request will be\n   processed.\n\n   (If no SETUP of UPDATE is given before another EXECUTE, then error\n   condition 3 is recognized.)\n\n   If the LDS-1 runs for two seconds without causing an interrupt or\n   jumping to the \"finish\" location (the word before the origin of the\n   display program) then it is assumed the program is running away.  The\n   LDS-1 is stopped, and error condition 6 is recognized.  (A SETUP or\n   an UPDATE is required before another EXECUTE is permitted.)\n\n\n\n\nMichener                                                        [Page 4]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   If the LDS-1 stops because too many output words are stored (i.e., if\n   the WCR becomes positive or zero), error condition 5 is recognized.\n   The number of output words made available to the user is as specified\n   by A2 of the most recent SETUP request.\n\n   If the LDS stops in any manner other than either those described\n   above or by jumping to the word before the origin (the \"finish\"\n   location), then error condition 7 is recognized.  (A SETUP or an\n   UPDATE is required before another EXECUTE is permitted.)\n\n   If the LDS-1 stops by jumping to the finish location, then the value\n   of the WAR at the time determines the amount of output in the \"WAR\n   area\" which the user may have access to.\n\n   If the WAR has been altered so that it contains an address smaller\n   than its initial value, then the effective value of the WAR is its\n   initial value.  If the WAR contains a value greater than the address\n   of the end of the area for output, then a WCR stop error is imitated\n   (the effective value of the WAR is the maximum allowed by SETUP and\n   error condition 5 is recognized).  The situation in which no error is\n   recognized will be called a \"normal stop\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                        [Page 5]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   Summary for Normal Stop:\n\n   Origin                     |\n   -----\u003e+-----------------+  |\n         |                 |  |\n         | Display Program |   - \u003c--If WAR here, it is set to here._\n         |                 |  |                                     |\n         +-----------------+ _|                                     |\n                                                                    |\n                              \u003c-------------------------------------+\n                             _\n         +-----------------+  |\n         |                 |  |\n         | WAR output area |   - \u003c--If WAR here, it is left alone.\n         |                 |  |\n         +-----------------+ _|\n\n                             _ \u003c-----------------------------------+\n                              |                                    |\n                              |                                    |\n                               - \u003c--If WAR here, it is set to here,+\n                              |     and error condition 5 is\n                              |     recognized.\n                              |\n\n\n   If no error condition is recognized for an EXECUTE request, an\n   acknowledge message is sent (unless suppressed; see MODE SET).  The\n   _effective_ value of the WAR is saved for later use in determining\n   how much output the display program generated, but it is saved only\n   for normal stops and WRC positive stops.\n\n   After normal stop, if Auto-TRANSMIT mode is set (see MODESET, below)\n   then a TRANSMIT request is simulated (using the arguments specified\n   in the MODESET request which initiated Auto-TRANSMIT mode).\n   Otherwise the next request is begun.\n\n3. The TRANSMIT Request.\n\n   Transmit takes one argument word and decodes the mode field, except\n   in special cases.  Normally A1 indicates the number of words of\n   display program and/or output (in the WAR area) which are to be\n   transmitted (possibly after data format conversion as indicated by\n   the mode field).  A2 indicates the starting address of the block of\n   data to be (converted and) sent.\n\n\n\n\n\n\nMichener                                                        [Page 6]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   3A.   Special Case:  If A2 is zero, the mode and A1 are ignored.  In\n         this case an acknowledge message is sent (unless suppressed), a\n         length word (containing 1) is sent (36 bits - left half word\n         equals 1, right halfword equals zero) and then a word\n         containing the origin address for display programs.  (This\n         address should always be 1000 (octal); it might have to change,\n         however, and this mechanism is provided to permit the user to\n         determine what its value is.)\n\n   3B.   The normal case is when A2 is non-zero.\n\n         If there has never been a SETUP request, error condition 1 is\n         recognized.  If the mode field is non-zero or 1, or if A1 is\n         negative, or A2 is less than the origin (but not zero), or A1 +\n         A2 is greater than the current \"effective value of the WAR\"\n         (read on), then error condition 2 is recognized.\n\n         The \"effective value of WAR\" always points to the word beyond\n         the last word of output from the LDS-1.  Before the first\n         EXECUTE request, it points to the word after the end of the\n         display program (indicating that zero words have been output).\n         EXECUTE requests effect the value in various ways (depending on\n         error conditions, etc.) as described previously.  The effective\n         WAR value is also changed to correctly reflect the effect of\n         SETUP requests, which can change the size of the WAR area (type\n         1.B), and UPDATE request, which can increase the size of the\n         display program causing the whole WAR arla to be shifted.\n\n         If the parameters are correct, an acknowledge message is sent\n         (unless suppressed; see MODESET).\n\n         If A1, the number of words to be reformatted (possibly) and\n         sent, is zero it is understood that the block of words to be\n         processed starts at A2 and terminates with the last word\n         before the effective WAR value.  (Thus the number of words to\n         be processed is \"the effective WAR value minus A2\".)\n\n         If the mode field of the first word of the request is zero then\n         no reformatting will be done: an exact copy of the core image\n         will be transmitted.  If it is a one, then the block of words\n         to be processed is _assumed_ to contain the coordinates of end\n         points of a sequence of line segments.  (The odd numbered words\n         (starting counting with one, not zero!) are assumed to\n         represent _set-point_ data and the even-numbered words are\n         assumed to contain draw-to data.  (Note that this is consistent\n         with LDS-1 \"Scaled Coordinate to Memory\" mode _as_ _long_ _as_\n         _no_ _dots_ _are_ _displayed_!!)  The line segments are recoded\n         in ARDS format, five seven-bit ASCII characters to a word, with\n\n\n\nMichener                                                        [Page 7]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n         the right most bit of each 36 word unspecified.  The last word\n         may contain null ASCII characters (all zero) to fill out the\n         word.\n\n         The first word transmitted (after the acknowledge message, if\n         any) has a left half of 3 and a right half of: 0 (for exact\n         core image) or 1 (for ARDS format).\n\n         The next word has a left half equal to the number of words\n         which follow and a right half of zero.  For ARDS format, this\n         is the number of words after reformatting (of course).\n\n         Unless zero words are to be transmitted, the next words are the\n         data request.\n\n         Note that the following sequence of requests could be used to\n         simply convert line data (in the correct format) to ARDS\n         format:\n\n         (The notation \"A,,B\" stands for a 36 bit word whose left half\n         has the value \"A\" and whose right half has the value \"B\".)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                        [Page 8]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n         Establish network connection\n         SETUP,,0                       ; start\n         2n,,0                          ; data representing \"n\" line\n                                        ;   segments follow\n         +----------------+             _\n         |                |              |\n         |                |               - 2n coordinate pairs\n         |                |             _|\n         +----------------+\n         TRANSMIT,,2                    ; request ARDS transmission\n         0,,1000                        ; convert and transmit the\n                                        ;   whole \"program\"\n         FLUSH,,0                       ; signoff\n\n4. The UPDATE request.\n\n   The UPDATE request allows a portion of the display program to be\n   altered and also allows the end of the display to be extended (to\n   include more data perhaps).  The mode field of the first word of the\n   request indicates the number times the _EXECUTE-action_ is to be\n   performed if the UPDATE request is successful.  The UPDATE request\n   takes an argument word which is similar to that of TRANSMIT (i.e., A1\n   is a length and A2 is an address).\n\n   If no SETUP request has previously been executed error condition 1 is\n   recognized.\n\n   If A1 is negative or if A2 is less than the origin of the display\n   program, error condition 2 is recognized.\n\n   If A1 + A2 is greater than the end of the display program, then the\n   length of the display program is increased to equal \"A1 + A2 -\n   origin\".  The WAR area remains the same length as before, and its\n   contents are shifted to their new locations.  The \"effective WAR\n   value\" (see TRANSMIT) is increased by the amount of increase in\n   display program length.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                        [Page 9]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   An acknowledge message is sent (unless suppressed) if no error\n   condition is recognized (and if no problem with core size limitation\n   arises).  Also, the flag which is set by severe error conditions\n   encountered during EXECUTE requests, is cleared by successful UPDATE\n   requests.\n\n   The next \"A1\" words are read and stored in consecutive locations\n   starting in location \"A2\".  If A1 is zero, no words are read.\n\n   If the mode field of the first word of the UPDATE request is\n   positive, it is taken as an iteration count for a multiple EXECUTE\n   request.  Otherwise, the next request is read from the Network.\n\n5.  The FLUSH request.\n\n   The Flush request takes no arguments and ignores the mode field of\n   the first word of the request.  No acknowledge message is sent.  The\n   network connection is broken and the process destroys itself.\n\n6.  THE MODESET request.\n\n   The mode field of the first request word is decoded first.  If it is\n   zero or less, or if it is greater than (currently) 6, error condition\n   2 is recognized.\n\n   6A.   If the mode field is 1, then acknowledge messages and ASCII\n         error messages are not to be suppressed.\n\n   6B.   If the mode field is 2, then acknowledge messages and ASCII\n         error messages are to be suppressed.\n\n   6C.   If the mode field is 3, exit from Auto TRANSMIT mode.  (See\n         6D.)\n\n   6D.   If the mode field is 4 or 5, whenever an EXECUTE has a normal\n         stop, a TRANSMIT request is to be automatically performed.\n\n   The mode field for the transmit is to be 4 less than the mode field\n   for this MODESET request.  One (more) word is read from the network.\n   It contains the arguments for the TRANSMIT.  (That is, the word is\n   saved and used when the TRANSMIT operation is performed.  The values\n   of the arguments are checked at that time, not during the MODESET\n   request.\n\n\n\n\n\n\n\n\nMichener                                                       [Page 10]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\nEXAMPLE\n\n   Suppose a display routine calculated and saved a different 3\n   dimensional transformation matrix each time it was executed.  (It\n   might be programmed to make an object appear to rotate.)  The user of\n   the routine typically would want to set up the matrices and then \"let\n   'er rip\" with ten or twenty (or more) executions.  This could be done\n   as follows:\n\n        SETUP,,0\n\n    +--\u003elength,,2000          ; length of display pgm\n    |    -                    ; large output area\n    |   |  -----\n    |   |  -----\n    +--\u003e   -----\n        | program\n        |  -----\n        |  -----\n         -\n\n        MODESET,,5            ; auto transmit in ARDS mode\n\n        0,,1000+length        ; arguments for transmit\n\n                              ;    meaning \"current contents\n\n                              ;    of output area\"\n\n        EXQ,,10               ; execute 10 times, sending\n\n                              ;    the data each time\n\n        UPDATE,,20            ; update, then execute 20 times\n\n        8,,address of matrix  ; arguments for update, to\n\n             -                ;    change a matrix\n            |\n   8 words -  new matrix\n            |\n             _\n           etc.\n\n\n\n\n\n\n\n\nMichener                                                       [Page 11]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   The output from the Graphics Loader for this example would be as\n   follows:\n\n   ACKNOWLEDGE     setup,setup     :(See description of ACKN\n\n                                   ;  for format in word)\n\n   ACKNOWLEDGE     modeset,modeset\n\n   ACKNOWLEDGE     transmit, exq\n\n        output,,1                   ; output in ARDS mode\n\n        leng1,,0\n       _\n      |\n     -  data\n      |_\n\n   ACKNOWLEDGE     transmit,exq\n\n        output,,1\n\n        leng2,,0\n       _\n      |\n     -  data\n      |_\n             .               (in total, there are 10 sets of output.)\n             .\n             .\n\n   ACKNOWLEDGE     update,update\n\n   ACKNOWLEDGE     transmit, update\n\n        output,,1\n\n        leng11,,0\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                       [Page 12]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n       -\n      |\n     -  data\n      |\n       -\n             .\n             .               (in total, there are 20 sets of output.)\n             .\n\nACKNOWLEDGE MESSAGES\n\n   These messages are each a single 36 bit word.  They can be suppressed\n   dynamically by the MODESET request.  The left half of the 36 bit word\n   identifies the fact that it is an acknowledge message by containing a\n   1.  The right half is further divided into two 9-bit fields\n   (quarters).  The right 9-bit field (within the right half word)\n   contains the opcode field of the last request sent by the user.  Thus\n   if an UPDATE request was received last, this field is a 4.\n\n   The left 9-bit field (within the right half word) contains the number\n   of the action actually being performed.  This differs from the opcode\n   of the last request received only for Auto TRANSMIT mode and when a\n   positive mode field is given in an UPDATE request (which is an\n   EXECUTE count).\n\n   Possible pairs of these fields are given below.  Note that Auto\n   TRANSMIT mode sends only one acknowledge message which indicates both\n   successful execution of the display program _and_ correct parameters\n   for the TRANSMIT operation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                       [Page 13]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   Currently    Most Recent    Comments:\n   Executing:   Request\n                Received:\n\n   SETUP        SETUP           ; Sent before data words are read.\n\n   EXQ          EXQ             ; Never sent in Auto-Transmit mode.\n\n   TRANSMIT     EXQ              ; Only sent in Auto-Transmit mode.\n\n   TRANSMIT     TRANSMIT\n\n   EXQ          UPDATE          ; Never sent in Auto-Transmit mode.\n\n   TRANSMIT     UPDATE          ; Only sent in Auto-Transmit mode.\n\n   UPDATE       UPDATE          ; Sent before data words are read.\n\n   MODESET      MODESET         ; When setting up Auto-Transmit mode,\n\n                                ;   this is sent before the argument\n\n                                ;   word for TRANSMIT is read.\n\nNotes:\n\n   1)    A MODESET request which suppresses acknowledge messages is\n         never acknowledged.  One which permits acknowledge messages is\n         always acknowledged.\n\n   2)    Requests which read data words (certain SETUP, UPDATE and\n         MODESET requests) send acknowledge messages (unless suppressed)\n         _before_ reading the data words.\n\nERROR MESSAGES\n\n   These messages contain one or more words.  If acknowledge messages\n   are suppressed, then only one word is sent.  (The assumption was made\n   that brevity of response would also be desired for error messages if\n   it were also desired for normal output.)\n\n   The first (or only) word contains a left half of 2.  (Identifying\n   this as an error message).  The right half contains the number of the\n   error condition recognized; these numbers are summarized below.\n\n   If the long form of the error message is being used, additional words\n   are sent, the first contains a positive count of the remaining words\n   in the left half and zero in the right half.  Words following the\n\n\n\nMichener                                                       [Page 14]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\n   count word contain five 7-bit ASCII characters per word (the last\n   word may end in null characters) which spell out a descriptive error\n   message.  These messages are summarized below:\n\n   Error Condition Number          Error Message\n\n             0              UNRECOGNIZED OPERATION CODE\n\n             1              PREVIOUS SETUP REQUIRED\n\n             2              INVALID MODE OR OPERAND FIELD\n\n             3              PREVIOUS EXECUTE FAILED\n\n             4              DISPLAY PROCESSOR OCCUPIED\n\n             5              OUTPUT AREA OVERRUN\n\n             6              DISPLAY ERROR: TWO SECOND TIME OUT\n\n             7              DISPLAY ERROR: IMPROPER DISPLAY STOP\n\n             8              DISPLAY ERROR: MEMORY PROTECTION VIOLATION\n\nOUTPUT FROM TRANSMIT\n\n   This output consists of an identifying word (left half of 3, right\n   half containing 0 for image mode and 1 for ARDS mode), a count word\n   (left half indicating the number of words following this word, right\n   half of zero) and zero or more data words in whatever data format the\n   first word indicated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                       [Page 15]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\nAppendix 1\n\n   The environment at the beginning of execution of the user's display\n   program is as follows:\n\nThis LDS-1 is in program mode.\n\nRAR/                    Origin of user's program.\n\nWAR/                    First word of a block of core at least as long\n                        as requested via SETUP operations.  This block\n                        immediately follows the last word of the display\n                        program.\n\nPC/                     Origin of user's program.\n\nSP/                     Address of first word beyond the end of a 200\n                        (octal) word area of combined data sink and\n                        control register stack.\n\nP1/                     Unspecified.\n\nP2/                     Unspecified.\n\nDSP/                    First word of a 200 (octal) word area of\n                        combined data sink and control register stack.\n\nUR/                     Unspecified.\n\nRCR/                    Unspecified.\n\nWCR/                    Minus one plus the negative of the length of the\n                        \"WAR area\" as specified in the most recent\n                        SETUP request.\n\nDIR/                    Stop on WCR positive.\n                        Do not stop on Hit.\n                        Matrix Multiplier inactive.\n                        \"Overlap\" permitted.\n                        Two dimensional mode.\n                        Do not \"Do Twice\".\n\nRSR/                    Unspecified.\n\nSR/                     0, except for bits not under program control\n                        like the stylus \"Z\" coordinate bits.\n\nNEXT/                   Unspecified.\n\n\n\nMichener                                                       [Page 16]\n\f\nRFC 186                A Network Graphics Loader            12 July 1971\n\n\nSAVELB/                 -3777,,-3777\n\nSAVERT/                 3777,,3777\n\nVIEWLB/                 -3777,,-3777\n\nVIEWRT/                 3777,,3777\n\nWINDLB/                 -3777,,-3777\n\nWINDRT/                 3777,,3777\n\nINSTLB/                 -3777,,-3777\n\nINSTRT/                 3777,,3777\n\nNAME/                   Unspecified.\n\nCDIR/                   Scaled Coordinates to Memory\n                        Curve mode inactive.\n                        Minimum effort inactive.\n                        Solid, not dashed lines.\n                        Self mode inactive.\n\nHITANG/                 Unspecified.\n\nSELINT/                 Unspecified.\n\nMatrix Multiplier/      Unspecified.\n\nOrigin of program -1/           (Should be jumped to when the\n                                 display program is finished.)\n\n\n        [This RFC was put into machine readable form for entry]\n         [into the online RFC archives by Lorrie Shiota, 10/01]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMichener                                                       [Page 17]\n\f\n"
}