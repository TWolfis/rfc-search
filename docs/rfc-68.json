{
  "series": "Request for Comments",
  "number": "68",
  "howpublished": "RFC 68",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0068",
  "url": "https://www.rfc-editor.org/info/rfc68",
  "title": "Comments on Memory Allocation Control Commands: CEASE, ALL, GVB, RET, and RFNM",
  "pagetotal": "2",
  "year": "1970",
  "month": "aug",
  "body": "\n\n\n\n\n\nNetwork Working Group                                           M. Elie\nRequest for Comments #68                                        31 August 70\n                                                                UCLA\n\n             Comments on memory allocation control commands\n                     CEASE, ALL, GVB, RET) and RFNM\n\nThe protocol provides a scheme for buffer allocation.  This scheme is\nrather complicated because it necessitates two parallel mechanisms.\nIt is not obvious that both are necessary.  In fact it is suggested\nthat this scheme could be probably replaced by a slightly different\nconception of the Request for Next Message (RFNM).  Now the RFNM is\nsent back from the receiving imp after the message has been\nreconstituted and the first packet transmitted to the host.  Nothing\ninsures that the whole message has been accepted and correctly\nreceived by the host; also the design of the host imp interface\npermits the host to stop accepting data from the imp during any length\nof time; as the link has been already unblocked by sending back the\nRFNM another message may be transmitted by the sending foreign host\nwhich will congest the imp's memory.  On the other hand it is prob-\nable that usually the host is able to accept data from the imp at a\nhigher rate than it is transmitted on the network, e.g. 200k bits/sec;\nthus the time to transmit a full message from the imp to the host\nwould be approximately 1/20th of a second which is 10 times less than\nthe average delay of transmission of a message over the network.  This\nindicates that to send a RFNM after the reception of a full message by\nthe host would not increase significantly the response time on the\nnetwork.\n\nIn this case there is no reason why the RFNM could not be initiated by\nthe receiving host as an acknowledgment of the correct reception of\nthe message (ACK), and take the form of either a host imp or a control\ncommand message.  This RFNM could have the two forms\n\n         ACK  (CONTINUE)\nor       ACK  (CEASE)\n\nThis would permit to add to the message some error detection\nredundancy, such as check sum bits as proposed in [DELO 69].  In the\npresent design nothing insures that one or several bits of the text\nhas not been altered, e.g., by an interference or a deficiency of one\nof the host imp interfaces.  This could have important consequences,\ne.g. if the text is used to update a centralized data base.  Also, if\nthe user has a way of detecting the error, but none of correcting it,\nit has no way of asking for the retransmission of the message, which\nhas probably been discarded at the sending end upon reception of the\nRFNM.  In fact it seems not up to the user to have to detect errors in\n\n\n\n\n                                                                [Page 1]\n\f\nNetwork Working Group                                           M. Elie\nRequest for Comments #68                                        31 August 70\n                                                                UCLA\n\nits text but rather up to the NCP: the user process must as much as\npossible act as if it was talking to some other local process.  So a\nthird kind of RFNM sent by the NCP could be:\n\n            NAK(REPEAT)\n\nRepetition would also be initiated in case of no reply.\n\nThus we see that it seems worthwhile to make these slight\nmodifications which would permit to use between the sending host and\nthe receiving host a very simple point-to-point transmission procedure\nwhich would insure control of the data transmitted from end-to-end.\n\nIt could also replace the memory allocation mechanism: ACK (CONTINUE)\nwould only be sent if space was available for a new message on this\nconnection and/or ACK (CEASE) would be sent if no more space was\navailable; it corresponds to the WABT of classic transmission\nprocedures [USAS69]; transmission could be resumed by an ACK\n(CONTINUE) or a RESUME from the receiving end.  The user process is\nnot mixed at all with this memory allocation which is a function of\nthe system (or NCP): it only sees a varying global transmission speed\nof its data on a connection.  The imp programs take care of the\nrouting of the data according to the distributed nature of the\nnetwork, and neither the user nor the system (or NCP) is concerned\nwith it.  Other improvements to the protocol may be found after\nexperiencing it.\n\nFinally note that this solution does not immobilize the imp memory any\nlonger than the actual solution, because it is not the imp which has\nto repeat a message, but the sending host.\n\n\n______________________________________________\n\nDELO 69 DELOCHE G.  Implementation of the Host-Host Software\n        Procedures in GORDO Network Working Group RFC #11 Aug 1969\n\nUSAS 69 Proposed USA standard data communication control procedures\n        for USASCII CACM Vol. 12 NB 3 March 1969 PB 166-178\n\n\n       [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by Kai Henningsen 6/97 ]\n\n\n\n\n                                                                [Page 2]\n\f\n"
}