{
  "series": "Request for Comments",
  "number": "167",
  "howpublished": "RFC 167",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0167",
  "url": "https://www.rfc-editor.org/info/rfc167",
  "title": "Socket conventions reconsidered",
  "pagetotal": "4",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\n                         Network Working Group\n                        Request for Comment #167\n                               NIC #6784\n\n\n\n                    Socket Conventions Reconsidered\n\n\n\n                          Athay Bhushan (MAC)\n                         Bob Metcalfe (Harvard)\n                            Joel Winett (LL)\n\n                              24 May 1971\n\n\n\n                          Category: C1, C3, C8\n                        Related RFCs: #147, #129\n                    Related Functional Documents: #1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nRFC 167                                  Socket Conventions Reconsidered\n\n\nThe current NCP Protocol says nothing about how hosts should assign\nsocket numbers to process ports, except that the low-order bit is to\nspecify socket gender (i.e., send or receive). Two recent proposals call\nfor additional network-wide conventions on the 32-bit socket-number. The\nfirst proposal asks that a portion of the socket number be reserved for\na network-unique user number for accounting and access control. The\nsecond proposal asks that the high-order 16 bits of the socket number be\nzero to assist smaller hosts in reducing the space required for socket\nnumber tables.\n\nIt is recommended that both of these proposals be set aside.  Because a\nlarge perturbation of the current NCP Protocol is required to provide\nadequate handles for accounting and access control, and because the\nsocket number is already underpowered for its use, it is recommended\nthat both proposals be set aside until serious consideration can be\ngiven to a major NCP Protocol overhaul.\n\nDISCUSSION\n\nThe socket number, as it is used in the current NCP Protocol is a small\nnumber with a big function. It will probably be found that a\nsubstantially more powerful identification mechanism (e.g., a\nhierarchical naming scheme with arbitrarily long names) is required to\nsatisfactorily manipulate process ports. Two features of such a\nmechanism will be (1) that it treats accounting and access control with\nthe respect they deserve, and (2) that it is part of a simpler NCP\nProtocol more easily implemented under the existing size and complexity\nrestrictions of smaller hosts.\n\nSocket numbers are process port identifiers used in establishing\nconnections between processes. It is essential that they be UNIQUE to\navoid ambiguity during connection. It is important that their assignment\nto specific processes be REPEATABLE for reconnection on a regular basis.\n\nTo assure that process port identifiers are unique and repeatable it is\nnecessary to subject their allocation to access controls.  The simplest\nof access controls assuring uniqueness is that provided by NCPs which\ncheck their tables of active connections for duplication when a process\nrequests the use of a specific socket number.\n\nThere is real difficulty in constructing schemes for allowing socket\nnumber assignments to be repeatable. Some socket numbers are to be\nuniversally known and associated with processes operating with specified\nprotocols (e.g., a logger socket, an RJB socket, a file transfer\nsocket). Other socket numbers might not be universally known, but given\nto their users in a transmission over a universally known socket (e.g.,\nthe socket pair specified by the transmission over the logger socket\nusing the Initial Connection Protocol (ICP)).  Concurrently running\n\n\n\n                                                                [Page 2]\n\f\nRFC 167                                  Socket Conventions Reconsidered\n\n\ninstances of a program will require distinct process port identifiers.\nTherefore, socket numbers will in general need to be dynamically\nassigned via some system controlled allocation function.\n\nThere are a number of ways of providing for potentially repeatable\nsocket number assignments. One bad way is to have the NCP keep a list of\nall assigned socket numbers with some indication of who is permitted to\nuse them and for how long -- like keeping track of magnetic tape reels.\nIf there were few available socket numbers (e.g., 16 bits worth) this\nbad method or one comparably distasteful and logistically foreboding\nwould have to be adopted.  With an abundance of socket numbers it is\npossible, using sparse socket number assignment, to devise simple\nalgorithms for deciding whether a socket numbers being requested by a\nprocess can be allocated freely. Such algorithms might take into account\n(1) the dynamic status of the socket (i.e., its association with a\ncurrently active connection), (2) its reserved status as a standard\nservice port address, and (3) its access control attributes in relation\nto those of the requesting process.\n\nOne good strategy for controlling socket numbers is to partition the\nfull socket space at a host among its network users. Under this scheme a\nuser could be assured of having the repeatable use of his partition.  It\nmight also be helpful to designate a utility partition for use in socket\nnumber allocations where repeatability is not essential. Such socket\nnumbers could be selected from the utility partition by some clever\nconstruction on the date and time.\n\nIt will often be the case that a program will be written to use several\nconnections. Remembering that this program might find itself being\nexecuted concurrently by several processes belonging to several users,\nit might be convenient to code with socket tags which are to be extended\nwith runtime user and process identifier fields.\n\nSocket numbers will tend to be viewed -- should be viewed -- as having\nthree fields: a user field to assist in providing repeatability, a\nprocess field to assure uniqueness for concurrent instances of a\nprogram, and a tag field to enable the convenient referencing of\nmultiple connections to a single process.\n\nAlthough fields will be helpful in dealing with socket number\nallocation, it is not essential that such field designations be uniform\nover the network. In all network transactions the 32-bit socket number\nis handled with its 8-bit host number. Thus, if hosts are able to\nmaintain uniqueness and repeatability internally, socket numbers in the\nnetwork as a whole will also be unique and repeatable.  If a host fails\nto do so, only connections with that offending host are affected.\n\n\n\n\n\n                                                                [Page 3]\n\f\nRFC 167                                  Socket Conventions Reconsidered\n\n\nBecause the size, use, and character of systems on the network are so\nvaried, it would be difficult if not impossible to come up with an\nagreed upon particular division of the 32-bit socket number.  Hosts have\ndifferent internal restrictions on the number of users, processes per\nuser, and connections per process they will permit.\n\nIt has been suggested that it may not be necessary to maintain socket\nuniqueness. It is contended that there is really no significant use made\nof the socket number after a connection has been established. The only\nreason a host must now save a socket number for the life of a connection\nis to include it in the CLOSE of that connection. If such is really the\ncase, then the NCP Protocol might be improved by inventing a new CLOSE\nwhich uses the host-line pair associated with the connection. Hosts\nwhich are short on space could then forget a socket number immediately\nafter successful connection.\n\n       [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by Thomas Nielsen 5/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\n"
}