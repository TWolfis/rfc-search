{
  "series": "Request for Comments",
  "number": "477",
  "howpublished": "RFC 477",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0477",
  "url": "https://www.rfc-editor.org/info/rfc477",
  "title": "Remote Job Service at UCSB",
  "pagetotal": "19",
  "year": "1973",
  "month": "may",
  "body": "\n\n\n\n\n\nNetwork Working Group                                     M. Krilanovich\nRequest for Comments: 477                                           UCSB\nNIC: 14922                                                   23 May 1973\nReferences: RFCs 354, 407,\n            NIC 16306\n\n\n                       Remote Job Service at UCSB\n\nIntroduction\n\n   This RFC is the follow-on document to RFC #436, which briefly\n   described UCSB'S RJS.  This document restates the essence of the\n   official RJE protocol (RFC #407), and documents in detail UCSB's\n   implementation of it.\n\n   The program described here is available under socket 5 at UCSB, and\n   supports a subset of the official protocol.  Specifically, no checks\n   are made for RJE control cards in the input file, jobs may not be\n   batched in the input file, only output file dispositions of discard\n   and transmit-and-discard are implemented, no restart markers are sent\n   on output in FTP blocked mode, and several of the commands are not\n   implemented.  There are also other ways in which RJS is known to be\n   less than ideal.  For example, whenever any error is detected while\n   processing a job, such as the output's destination host being dead,\n   the job is abandoned, and any further output deleted.  A re-write of\n   RJS is scheduled for the near future (in about six months), and many\n   of these deficiencies will be corrected at that time.   (Any\n   suggestions for further improvements are more than welcome, and may\n   be made through the Journal to MCK, by mail to the author at the UCSB\n   Computer Center, or by telephone at (8O5) 961-3454.)\n\n   In addition to the deviations from the protocol stated above, several\n   modifications have been made to increase user convience.\n   Specifically, the INACCT, OUTACCT, and ACCT commands have been added\n   to accommodate users of TENEX and other systems requiring an account\n   number, OUTPATH has been added as a synonym for OUT and INUSER for\n   INID, and the BYE command does not cause an ABORT.  Also, in\n   recognition of the fact that the official protocol is biased heavily\n   toward use by programs, and is therefore rather cumbersome for human\n   users, an alternate, optional, command syntax has been provided.  An\n   attempt was made to make this alternate syntax, called 'local\n   syntax', as 'natural' as possible to a human user.  It also provides\n   some features not available with the standard syntax.\n\n\n\n\n\n\n\nKrilanovich                                                     [Page 1]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\nService Provided\n\n   The UCSB Computer Center operates an IBM 360/75 and runs OS MVT\n   release 21.0 and HASP.  All batch jobs at UCSB enter the system\n   through HASP, and therefore RJS acts as an interface between the user\n   and HASP.  RJS's function is to provide the user with a HASP virtual\n   RJE terminal, consisting of card reader, card punch, line printer and\n   operator's console, and to manage the first three of these for the\n   user in response to commands issued by him.  By virtue of the fact\n   that RJS maintains the correspondence between a particular user and\n   the HASP RJE terminal owned by him, the user may issue commands to\n   alter the status of those jobs submitted by him through his RJE\n   terminal.  This may be done even if the user has logged out of RJS\n   and back in again, possibly from another site.\n\n   The sequence of events involved in using RJS are as follows.  First,\n   the user logs in, specifying a user name, password, and account\n   number.  In addition to indicating how subsequent use of RJS is to be\n   billed, this accounting information identifies the owner of a\n   particular RJE terminal.  That is, the association between user name\n   and HASP virtual RJE terminal is unique, and only one individual is\n   allowed logged in under a given user name at a time.\n\n   At present, billing within RJS is not implemented, and therefore the\n   login account number is completely arbitrary, and user name and\n   password are relatively so.  The first time a given user name is\n   used, any password may be chosen; thereafter, as long as the user\n   name is known to RJS, the same password must be used.  A user name\n   remains known to RJS while he is logged in, and when he is not, as\n   long as he owns at least one job known to PJS.  Otherwise, the user\n   name is discarded.\n\n   After a user is logged in, he specifies input and output file\n   information and requests input retrieval be initiated.  He may then\n   log out or not as he wishes; specifically he is not required to\n   remain logged in during source file retrieval.  A job can completed\n   abnormally at any stage of processing, or normally, after storage of\n   the last of its output.  In any case, the circumstances of the final\n   disposition of the job are displayed to the user immediately if he is\n   logged in, saved for a period after its completion, and are available\n   to him on request the next time he logs in.  This status information\n   is retained for at least a fixed period (currently two days), but\n   will be retained longer as long as sufficient storage space is\n   available for it.\n\n\n\n\n\n\n\nKrilanovich                                                     [Page 2]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\nRJS Commands - General Information\n\n   In order to simplify specification of job parameters, RJS maintains a\n   set of accumulators for these parameters.  Each accumulator is\n   initially empty, and may have its contents set or referred to by\n   various commands.  The following parameter accumulators are\n   maintained for each user (user name, password, and account together\n   are termed accounting parameters):  login accounting parameter (those\n   specified either in the LOGIN or the USER, PASS, and ACCT commands),\n   source pathname, print pathname, punch pathname, source accounting\n   parameter, print accounting parameter, and punch accounting\n   parameter.  In addition, associated with each job are the parameters\n   source, print, and punch pathname, and source, print, and punch\n   accounting parameters.\n\n   When the TELNET connections are first opened, RJS sends the user a\n   herald message of the form '300 UCSB RJS (VER.  \u003cdate\u003e) TTY\n   \u003cinteger\u003e.', where \u003cdate\u003e identifies the current version of RJS, and\n   \u003cinteger\u003e identifies the user's terminal in the sense that each\n   TELNET connection is assigned a unique TTY number.\n\n   During the process of running a job, any of several spontaneous job\n   status messages may be displayed to the user.  They are '240 INPUT\n   RETRIEVAL FOR JOB \u003cjobid\u003e HAS BEGUN.', displayed when the input\n   connection(s) have been established, '261 JOB \u003cjobid\u003e HAS COMPLETED\n   EXECUTION.', when the first of the job's printed output has been\n   received from HASP, '466 PRINTED [or PUNCHED] OUTPUT FROM UNKNOWN JOB\n   (HASP JOB NUMBER \u003cinteger\u003e) IS BEING DISCARDED.', if printed or\n   punched output is received from HASP over the user's line for a job\n   not known to RJS, and messages explaining errors such as ICP/RFC\n   failure, invalid job card, null source deck, missing pathname, and\n   data transfer network errors (see Appendix B for for a list of\n   possible reply id's).  In addition, while in local syntax, the user\n   may receive messages from HASP over his virtual operator's console.\n   Some are responses to HASP commands issued by the user, and others\n   are spontaneous messages.   All, however, are asynchronous to the\n   entering of other RJS commands.\n\n   Certain general rules hold for both sets of syntax.  They are as\n   follows:\n\n      1. The character pair CR-LF is used as command accept to terminate\n         commands.   Other occurrences of these two characters are\n         ignored, and may be used as desired for local carriage control.\n\n      2. Any number of blanks are permitted before or after any\n         syntactic unit (including the first and last).\n\n\n\n\nKrilanovich                                                     [Page 3]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n      3. Upper and lower case alphabetics are treated identically\n         everywhere except in \u003cfilename\u003e.\n\n      4. Whenever a switch is made to the syntax not in effect, the\n         current TELNET modes (full or halfduplex, character or line at\n         a time) are saved, and reinstated when the current syntax is\n         again entered.\n\n   In the syntactic descriptions below, the following notation is used:\n\n      'text'             denotes literal text (quotes not part of text)\n\n      \u003cunit\u003e             denotes name of syntactic unit\n\n      \u003ca\u003e_\u003cb\u003e            denotes choice of syntactic units \u003ca\u003e or \u003cb\u003e\n\n      [\u003ca\u003e]              denotes optional syntactic unit\n\n      (\u003ca\u003e\u003cb\u003e\u003cc\u003e)        denotes group of syntactic units treated as a\n                         whole\n\n      =                  syntactic unit at left defined by statement on\n                         right\n\n   The following general syntactic definitions are hereby made:\n\n      \u003cCA\u003e                = command accept\n\n      \u003cuser name \u003e        = a string of 1 to 8 alphameric characters\n\n      \u003cpassword\u003e          = a string of 1 to 8 alphameric characters\n\n      \u003caccount\u003e           = a string of 1 to 6 alphameric characters\n\n      \u003cjobid\u003e             = a string of 1 to 8 alphameric characters,\n                            the first of which is alphabetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                     [Page 4]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\nDescription of RJS Commands, Standard Syntax\n\n   The following is a list of the commands supported in the standard\n   syntax.  Where not specified, the command's response is '200 OK'.  In\n   those cases where it is stated that the user must be logged in, the\n   response '504 LOGIN PLEASE.'  is displayed if the user is not logged\n   in.\n\n   'USER' ['='] \u003cuser name\u003e \u003cCA\u003e\n\n   Specifies the user's user name for accounting purposes, initiates\n   login, and initializes the source, print, and punch user name\n   accumulators to \u003cuser name\u003e.  To complete login, this command must be\n   followed by a successful PASS command.  The only other command\n   allowed before the user is logged in is BYE.  The response to a\n   syntactically valid USER command is always '330 ENTER PASSWORD'\n\n   'PASS' ['='] (password\u003e \u003cCA\u003e\n\n   Specifies the user's password to gain access to the user's account,\n   completes the login initiated by a previous USER command, and\n   initializes the source, print, and punch password accumulators to\n   \u003cpassword\u003e.  The response to a successful PASS command is '230 USER\n   \u003cuser name\u003e OWNS REMOTE TERMINAL \u003cinteger\u003e.', where \u003cinteger\u003e is the\n   number of the HASP virtual RJE terminal owned by the user.  The\n   following error replies are possible:   '431 NEW USERS ARE NOT BEING\n   ACCEPTED AT THIS TIME.' if there is no free HASP terminal to assign\n   to the user (there is currently a maximum of 10), or if there are\n   insufficient other resources available to support another user; '431\n   INCORRECT PASSWORD.' if the specified \u003cpassword\u003e is not that assigned\n   to the previously specified \u003cuser name\u003e; '431 ANOTHER USER IS LOGGED\n   IN AS \u003cuser name\u003e.' - only one user is allowed logged in with a given\n   \u003cuser name\u003e at a time.\n\n   'ACCT' ['='] \u003caccount\u003e \u003cCA\u003e\n\n   Specifies the UCSB Computer Center account number to which the user's\n   use of RJS is to be billed, and initializes the source, print, and\n   punch account accumulators to \u003caccount\u003e.  The response to a\n   syntactically correct ACCT command is '200 OK'.\n\n   As previously stated, RJS billing is yet to be implemented, and\n   therefore the ACCT command is optional.  Users and writers of user\n   processes are warned, however, that it will eventually be required,\n   and that at that point, the PASS command will return a reply id of\n   330, and the ACCT command will have those replies listed above under\n   PASS.\n\n\n\n\nKrilanovich                                                     [Page 5]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   'BYE' \u003cCA\u003e\n\n   Logs the user out and closes the TELNET connections to him,\n   regardless of whether there are any file transfers in progress; if\n   there are, they continue unaltered.  The response to a BYE Command is\n   always '231 LOGOUT C0MPLETED; TRANSFERS (IF ANY) CONTINUE.', followed\n   by a continuation line of 'TTY \u003cinteger\u003e IS DISCONNECTED.'\n\n   'STATUS' \u003cCA\u003e\n\n   Lists the user names of those users currently known to RJS.  The\n   response is either '100 NO USERS ARE KNOWN TO RJS' or '10O THE\n   FOLLOWING USERS ARE KNOWN TO RJS:', followed by one or more lines,\n   each beginning with a continuation reply id of four blanks, giving a\n   remote terminal number, the user name of the user who owns that\n   terminal, and the name of the site from which he last logged in.\n\n   'SYNTAX' \u003cCA\u003e\n\n   Causes the current command syntax to become local syntax.  The TELNET\n   modes (full or half duplex, character or line at a time) most\n   recently in effect in local syntax again become effective.  RJS\n   responds with the local syntax prompt character (currently number\n   sign, '#').\n\n   The remaining commands require the user to be logged in.\n\n   'REINIT' \u003cCA\u003e\n\n   Resets to empty the source, print, and punch accounting parameter,\n   the source, print, and punch pathname, and the login accounting\n   parameter accumulators.  The response to a REINIT command is always\n   '204 OK'.\n\n   ('INUSER' _ 'INID') ['='] \u003cuser name\u003e \u003cCA\u003e\n\n   Sets the source user name accumulator to (user name\u003e.\n\n   'INPASS'  ['='] \u003cpassword\u003e \u003cCA\u003e\n\n   Sets the source password accumulator to \u003cpassword\u003e.\n\n   'INACCT'  ['='] \u003caccount\u003e \u003cCA\u003e\n\n   Sets the source account accumulator to \u003caccount\u003e.\n\n\n\n\n\n\nKrilanovich                                                     [Page 6]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   'OUTUSER' ['='] \u003cuser name\u003e \u003cCA\u003e\n\n   Sets the print and punch user name accumulators to \u003cuser name\u003e.\n\n   'OUTPASS' ['='] \u003cpassword\u003e \u003cCA\u003e\n\n   Sets the print and punch password accumulators to \u003cpassword\u003e.\n\n   'OUTACCT' \u003caccount\u003e \u003cCA\u003e\n\n   Sets the print and punch account accumulators to \u003caccount\u003e.\n\n   'INPATH' ['='] \u003cpathname\u003e \u003cCA\u003e\n   \u003cpathname\u003e = \u003cfile\u003e _ \u003csocket\u003e\n   \u003csocket\u003e = [\u003chost addr\u003e ','] \u003csocket number\u003e \u003cattributes\u003e\n   \u003cfile\u003e = \u003chost addr\u003e \u003cattributes\u003e '/' \u003cfilename\u003e\n   \u003chost addr\u003e = \u003cinteger\u003e\n   \u003csocket number\u003e = \u003cinteger\u003e\n   \u003cinteger\u003e = \u003cdecimal integer\u003e _ ('D' \u003cdecimal integer\u003e) _\n   ('H' \u003chexadecimal integer\u003e) _ ('X' \u003chexadecimal integer\u003e) _\n   ('O' \u003coctal integer\u003e)\n   \u003cattributes\u003e = ':T' _ ':A' _ ':N' _ ':' _ \u003cnull\u003e _ ':E' _\n   ':TE' _ ':AE' _ ':NE'\n   \u003cfilename\u003e = 1 to 16 ASCII characters, excluding CR and LF\n   (codes 0 through 127, excluding 10 and 13)\n\n   Sets the source pathname accumulator to \u003cpathname\u003e.  The \u003cpathname\u003e\n   is the means for specifying a file's source or destination; its\n   semantics are as follows:\n\n\n      1. Specification of \u003csocket\u003e indicates that RJS will establish a\n         simplex connection to the stated socket (RJS issuing the\n         CONNECT, user issuing a LISTEN).  The data is then transferred\n         over this connection, with CLOSE signaling end of file.\n\n      2. If \u003chost addr\u003e in \u003csocket\u003e is defaulted, the host containing\n         the TELNET user will be assumed.\n\n      3. Specification of \u003cfile\u003e indicates that RJS will contact the\n         standard FTP server socket (currently socket 3) at the stated\n         host, and transfer the data according to the File Transfer\n         Protocol.  The \u003cfile name\u003e referred to here corresponds to the\n         term \u003cpathname\u003e used in the FTP specification document, RFC\n         #354.\n\n\n\n\n\n\nKrilanovich                                                     [Page 7]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n      4. The type of carriage control and the data code used are\n         determined by \u003cattributes\u003e.  The meaning of this parameter is\n         as follows:\n\n         ':T'        ASCII code, TELNET carriage control\n         ':A'        ASCII code, ASA carriage control\n         ':N'        ASCII code, no carriage control\n         ':'         identical to ':N' for input, ':A' for output\n         \u003cnull\u003e      identical to ':N' for input, ':A' for output\n         ':E'        identical to ':NE' for input, ':AE' for output\n         ':TE'       EBCDIC code, TELNET carriage control\n         ':AE'       EBCDIC code, ASA carriage control\n         ':NE'       EBCDIC code, no carriage control\n\n         Detailed descriptions of the transfer modes may be found\n         below under 'RJS File Transfer.'\n\n   ('OUTPATH' _ 'OUT') \u003coutput file\u003e '=' \u003cdisp\u003e \u003cCA\u003e\n   \u003coutput file\u003e = 'A' _ 'B' _ \u003cnull\u003e\n   \u003cdisp\u003e = \u003cpathname\u003e _ '(H)' _ ('(S)' (pathname\u003e) _ '(D)'\n\n   Stores \u003cdisp\u003e in the print pathname accumulator if \u003coutput file\u003e is\n   either 'A' or \u003cnull\u003e, or in the punch pathname accumulator if \u003coutput\n   file\u003e is 'B'.  The meanings of the options for \u003cdisp\u003e are as follows:\n\n   \u003cpathname\u003e            transmit-and-discard - the file is sent and\n                         then deleted\n\n   '(H)'                 hold only - the file is not sent but rather\n                         held for user intervention\n\n   '(S)' \u003cpathname\u003e      save - the file is sent and then held for user\n                         intervention\n\n   '(D)'                 discard - the file is deleted as soon as it is\n                         produced\n\n   'INPUT' \u003cCA\u003e\n\n   Creates a job, stores with it the contents of the source, print, and\n   punch accounting parameter and pathname accumulators, and places it\n   in a queue within RJS of jobs owned by the user awaiting source file\n   transfer.  When it becomes the first or only job in this queue, the\n   retrieval of its source file is initiated.  A job identifier\n   ('jobid') is assigned to the job and displayed to the user.  The\n   contents of the source and print pathname accumulators must have been\n   set by INPATH and OUTPATH commands previous to the INPUT command.  If\n   successful, the message '260 ASSIGNED JOBID IS \u003cjobid\u003e.' is\n\n\n\nKrilanovich                                                     [Page 8]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   displayed, where \u003cjobid\u003e is that which may used in subsequent RJS\n   commands to identify this particular job.  If the user is found to\n   own the maximum number of jobs (currently 5), an attempt is made to\n   satisfy the request by finding the oldest of the user's jobs that has\n   completed processing.  If this can be done, the old job is deleted,\n   and the response to the command is '260 JOB \u003cold jobid\u003e IS BEING\n   DISCARDED TO MAKE ROOM FOR THE NEW JOB.', followed by a continuation\n   line of 'ASSIGNED JOB ID IS \u003cnew jobid\u003e.'  The following error\n   responses are possible:  '360 SOURCE PATHNAME HAS NOT BEEN\n   SPECIFIED.', '505 PRINT PATHNAME HAS NOT BEEN SPECIFIED.', '504 NEW\n   JOBS ARE NOT BEING ACCEPTED AT THIS TIME.', and '504 USER (user name\u003e\n   ALREADY OWNS THE MAXIMUM NUMBER OF JOBS.'\n\n   'CHANGE' \u003cjobid\u003e \u003coutput file\u003e '=' \u003cdisp\u003e \u003cCA\u003e\n\n   Stores \u003cdisp\u003e as the print pathname of job \u003cjobid\u003e if \u003coutput file\u003e\n   is either 'A', or \u003cnull\u003e, or as the punch pathname if \u003coutput file\u003e\n   is 'B', if the appropriated file transfer has not yet begun.  The\n   following error replies are possible:  '464 JOB \u003cjobid\u003e NOT FOUND.',\n   '5O4 JOB \u003cjobid\u003e IS ALREADY BEING, OR HAS BEEN, PRINTED.', if \u003coutput\n   file\u003e is 'A', '504 JOB \u003cjobid\u003e IS ALREADY BEING OR HAS BEEN,\n   PUNCHED.', if \u003coutput file\u003e is 'B', and '464 USER \u003cuser name\u003e DOES\n   NOT OWN JOB \u003cjobid\u003e.'\n\n   'STATUS' \u003cjobid\u003e \u003cCA\u003e\n\n   Causes the status of the job known to RJS as \u003cjobid\u003e to be displayed.\n   Included in this display are in which stage of RJS processing the job\n   is ('BEING READ', 'IN EXECUTION', 'BEING PRINTED', 'BEING PUNCHED',\n   or 'HAS COMPLETED'), the pathname information (accounting parameters,\n   host name, socket number, attributes, disposition, and filename) for\n   those files (source, print and punch) that have been supplied for the\n   job, and if the job has failed at some stage of RJS processing, an\n   explanation of the failure.  The possible responses are '464 JOB\n   \u003cjobid\u003e NOT FOUND.', and a line with reply code 161 followed by zero\n   or more continuation lines explaining the status of the job.\n\n   'CANCEL' \u003cjobid\u003e \u003cCA\u003e\n\n   Causes processing of the job known to RJS as \u003cjobid\u003e to terminate\n   immediately, and all record of it to be deleted.  If FTP data and/or\n   command connections are pending or established, they are closed; if\n   the job is in execution, an OS CANCEL command is issued to terminate\n   execution.  Any output from the job is lost, and a subsequent request\n   for status of job \u003cjobid\u003e will return the diagnostic that the job is\n   not found.  The successful responses are '262 JOB \u003cjobid\u003e DELETED.'\n\n\n\n\n\nKrilanovich                                                     [Page 9]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   and '262 JOB \u003cjobid\u003e WILL BE DELETED AS SOON AS POSSIBLE.'; the\n   possible failure responses are '464 JOB NOT FOUND.' and '464 USER\n   \u003cuser name\u003e DOES NOT OWN JOB \u003cjobid\u003e.'\n\n   The following standard RJS commands are as yet not implemented, and\n   elicit the response '506 COMMAND NOT IMPLEMENTED.':  ABORT, ALTER,\n   BACK, HOLD, OP, RECOVER, RESTART, and SKIP.\n\nRJS Commands - Local Syntax Conventions\n\n   In addition to those general conventions discussed above, the\n   following rules hold for local syntax:\n\n      1. Except in certain circumstances, noted below, a period may be\n         used for command accept.\n\n      2. The following control characters have the indicated functions:\n\n      SOH (control A)  delete last character\n      DEL              delete last character\n      SYN (control V)  delete last word\n      CAN (control X)  delete entire line\n      EOT (control D)  display current word\n      ACK (control F)  display entire line\n      '?'              display acceptable input forms\n      ESC              force recognition of current word\n      blank            force recognition of current word\n\n\n      3. The TELNET control characters 'you-echo' and 'I-echo' have the\n         desired results.  'You-echo' also has the effect of changing to\n         character at a time mode, if the user is not already in\n         character at a time mode.\n\nDescription of RJS Commands, Local Syntax\n\n   The following is a list of those commands supported in local syntax.\n   In those cases where no success reply is indicated, RJS responds with\n   CR-LF followed by the prompt character.  In those cases where it is\n   stated that the user must be, or must not be, logged in, 'LOGIN\n   PLEASE.' or 'LOGGED IN.', respectively, are displayed if the user is\n   not in the appropriate state.  When a reference is made to a response\n   listed under a standard syntax command, it should be noted that reply\n   id's are not displayed under local syntax.\n\n   'FULLDUPLEX' \u003cCA\u003e\n\n   Sets the user to fullduplex and character at a time modes.\n\n\n\nKrilanovich                                                    [Page 10]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   'HALFDUPLEX' \u003cCA\u003e\n\n   Sets the user to halfduplex mode.\n\n   'LINE\u003c-AT\u003c-A\u003c-TIME' \u003cCA\u003e\n\n   Set's the user to halfduplex, line at a time modes.  The control\n   characters previously described remain effective, but RJS will send\n   no output over the TELNET connection except when the current command\n   line is empty.\n\n   'LOGIN' \u003cuser name\u003e \u003cpassword\u003e \u003caccount\u003e \u003cCA\u003e\n\n   Specifies the UCSB Computer Center user name and account to which the\n   user's use Of RJS is to be billed, logs the user in, and sets the\n   source, print, and punch accounting parameter accumulators to \u003cuser\n   name\u003e, \u003cpassword\u003e and \u003caccount\u003e.  This command is valid only if the\n   user is not logged in, and has the same replies as the standard\n   syntax 'PASS' command.\n\n   'DISCONNECT' \u003cCA\u003e\n\n   Closes the TELNET connection.  If the user is logged in, he is first\n   logged out.  The effective action taken in response to an unexpected\n   close on the TELNET connection is that of a DISCONNECT.  The response\n   to a DISCONNECT command is 'TTY \u003cinteger\u003e IS DISCONNECTED.'\n\n   The remaining commands require the user to be logged in.\n\n   'LOG0UT' \u003cCA\u003e\n\n   Logs the user out and terminates billing of subsequent activity over\n   the TELNET connection to the previously effective accounting\n   parameters, and performs the effective action of the REINITIALIZE\n   command.  LOGOUT does not close the TELNET connection, nor does it\n   affect any file transfers in progress for jobs owned by the user.\n\n   'REINITIALIZE' \u003cCA\u003e\n\n   Resets to empty the following accumulators:  source, print and punch\n   accounting parameter, source, print and punch pathname, and login\n   accounting parameter.\n\n   'ACCOUNTING' \u003caccount parms\u003e \u003cCA\u003e\n   \u003caccount parms\u003e = '(' \u003cu\u003e ',' \u003cp\u003e ',' \u003ca\u003e ')'\n   \u003cu\u003e = \u003cuser name\u003e _ \u003cnull\u003e\n   \u003cp\u003e = \u003cpassword\u003e _ \u003cnull\u003e\n   \u003ca\u003e = \u003caccount\u003e _ \u003cnull\u003e\n\n\n\nKrilanovich                                                    [Page 11]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   Sets the source, print and punch accounting parameters to \u003caccount\n   parms\u003e.  Specification of \u003cnull\u003e for any of \u003cu\u003e, \u003cp\u003e, or \u003ca\u003e\n   indicates use of the contents of the corresponding login accumulator.\n\n   'SOURCE' \u003caccount parms\u003e \u003cCA\u003e\n\n   Set the source accounting parameter accumulators to \u003caccount parms\u003e.\n\n   'PRINT' \u003caccount parms\u003e \u003cCA\u003e\n\n   Sets the print accounting parameter accumulators to \u003caccount parms\u003e.\n\n   'PUNCH' \u003caccount parms\u003e \u003cCA\u003e\n\n   Sets the punch accounting parameter accumulators to \u003caccount parms\u003e.\n\n   'SOURCE' \u003cjobid\u003e (\u003caccount parms\u003e _ \u003cnull\u003e) \u003cpathname\u003e \u003cCA\u003e\n\n   Sets the source pathname of job \u003cjobid\u003e to \u003cpathname\u003e, and the source\n   accounting parameters to \u003caccount parms\u003e, if specified, or otherwise\n   to the contents of the source accounting parameter accumulators.  If\n   job \u003cjobid\u003e already exists and its source pathname has not been\n   specified, the new pathname is stored; if it has been specified, it\n   is changed unless source file retrieval has already begun.  If the\n   job does not already exist, a new job is created and the pathname\n   stored.  Restrictions are that if a job with a given \u003cjobid\u003e has\n   completed processing, it must be DELETE'd before that \u003cjobid\u003e may be\n   used for a new job; a user may only alter jobs owned by him; and he\n   may not own more than a certain fixed number of jobs (currently 5).\n   If the user already owns the maximum number, an attempt is made to\n   delete an old job to make room for the new one, as described for\n   INPUT under standard syntax.  The SOURCE command has the following\n   possible error responses:  'NEW JOBS ARE NOT BEING ACCEPTED AT THIS\n   TIME.', 'USER \u003cuser name\u003e ALREADY OWNS THE MAXIMUM NUMBER OF JOBS.',\n   'USER \u003cuser name\u003e DOES NOT OWN JOB \u003cjobid\u003e.', 'JOB \u003cjobid\u003e HAS\n   ALREADY COMPLETED.', and 'JOB \u003cjobid\u003e IS ALREADY BEING, OR HAS BEEN,\n   READ.'\n\n   'PRINT \u003cjobid\u003e (\u003caccount parms\u003e _ \u003cnull\u003e) \u003cdisp\u003e \u003cCA\u003e\n\n   Sets the print pathname of job \u003cjobid\u003e to \u003cdisp\u003e, and the print\n   accounting parameters to \u003caccount parms\u003e if specified, or otherwise\n   to the contents of the print accounting parameter accumulators.  The\n   PRINT command either creates a new job or modifies an existing one,\n   as explained under SOURCE, and has the same restrictions and error\n   messages listed for the SOURCE command, after making the obvious\n   substitution of 'PRINTED' for 'READ'.  The PRINT command is valid\n   only before print file transfer begins.\n\n\n\nKrilanovich                                                    [Page 12]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   'PUNCH' \u003cjobid\u003e (\u003caccount parms\u003e _ \u003cnull\u003e) \u003cdisp\u003e \u003cCA\u003e\n\n   Sets the punch pathname of job \u003cjobid\u003e to \u003cdisp\u003e, and the punch\n   accounting parameters to \u003caccount parms\u003e if specified, or otherwise\n   to the contents of the punch accounting parameter accumulators.  The\n   PUNCH command either creates a new job or modifies an existing one,\n   like the SOURCE and PRINT commands, and has the same restrictions and\n   error messages listed for the SOURCE command, after making the\n   substitution of 'PUNCHED' for 'READ'.  The PUNCH command is valid\n   only before punch file transfer begins.\n\n   'DELETE' \u003cjobid\u003e \u003cCA\u003e\n\n   Identical in function to the CANCEL command in standard syntax.\n\n   'INPUT' \u003cjobid\u003e \u003cCA\u003e\n\n   Places the job identified by \u003cjobid\u003e in a queue within RJS of jobs\n   owned by the users awaiting source file transfer.  When it becomes\n   the first or only job in this queue, the retrieval of the source file\n   is initiated.  If the INPUT command is successful, the message 'JOB\n   \u003cjobid\u003e ACCEPTED FOR PROCESSING.' is displayed.  The following error\n   messages are possible:  'JOB \u003cjobid\u003e NOT FOUND.', 'USER \u003cuser name\u003e\n   DOES NOT OWN JOB \u003cjobid\u003e.', 'JOB \u003cjobid\u003e HAS ALREADY COMPLETED.', '\n   SOURCE PATHNAME HAS NOT BEEN SPECIFIED.' and 'PRINT PATHNAME HAS NOT\n   BEEN SPECIFIED.'\n\n   'JOBSTAT' \u003cjobid\u003e \u003cCA\u003e\n\n   Identical in function and response to the 'STATUS' \u003cjobid\u003e command in\n   standard syntax.\n\n   'JOBLIST' \u003cCA\u003e\n\n   Lists the jobid's of those jobs owned by the user.\n\n   $ \u003ctext\u003e \u003cCA\u003e\n   \u003ctext\u003e = a string of any characters including '?' and '.'.\n   Note that \u003cCA\u003e must be CR-LF, rather than period.\n\n   Issues \u003ctext\u003e as a HASP operator command over the user's virtual\n   operator's console.  See Appendix A for a description of HASP\n   commands and command responses.\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 13]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n RJS File Transfer\n\n   The \u003cpathname\u003e defined earlier is the means whereby the user\n   specifies the location and attributes of his source, print and punch\n   files.  The means of determining a file's location have been\n   previously discussed; this section explains the controls the user has\n   over data attributes.\n\n   The parameter \u003cattributes\u003e specifies the type of carriage control and\n   the mode of transfer.  For the case of transfer over a simplex\n   connection, this parameter has the following meanings:\n\n      ':T' or ':TE' - TELNET-like carriage control.  The data is a\n      stream of characters with embedded carriage control bytes.  Page\n      eject is signaled by form feed, ASCII or EBCDIC decimal 12, new\n      line by carriage return - line feed, ASCII l3-lO, EBCDIC 13-27.\n      Multiple new line ('double spacing' or 'triple spacing') is\n      indicated by multiple occurances of CR-LF.\n\n      ':A' or ':AE' - ASA carriage control.  The data is a series of\n      fixed-length records, 81 characters on input, 133 on output, with\n      the first character of each record an ASA carriage control\n      character.  The possible carriage control characters are as\n      follows;  '+' - no line advance before print (overprint), ' ' -\n      one line advance (single space), '0' - two lines advance (double\n      space), '-' - three lines advance (triple space), and '1' - page\n      eject.  Whatever carriage control character appears on input is\n      ignored.\n\n      ':N' or ':NE' - no carriage control.  The data is a series of\n      fixed length records, 80 characters on input, 132 on output.  Any\n      carriage control generated on output is discarded before\n      transmission.\n\n   When file transfer takes place by means of FTP, the interpretation of\n   the \u003cattributes\u003e parameter is somewhat different.  In this case the\n   meanings are as follows:\n\n      ':T' or ':TE' - TELNET-like carriage control.  The data has the\n      same format as for the simplex connection, and is transferred in\n      stream mode, file structure, and either ASCII ('A') or EBCDIC\n      ('E') type.\n\n      ':A' or ':AE' - ASA carriage control.  Data is transferred in\n      blocked mode, record structure, and either ASCII print ('P') or\n      EBCDIC print  ('F') type.  The first character of every record is\n      the ASA carriage control character described above.\n\n\n\n\nKrilanovich                                                    [Page 14]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n      ':N' or ':NE' - no carriage control.  Data is transferred in\n      blocked mode, record structure, and either ASCII ('A') or EBCDIC\n      ('E') type.  As for the simplex connection, no carriage control\n      information is present.\n\n   In order to effect the FTP file transfer, RJS issues the following\n   FTP commands (in the given order):  USER (if access user name has\n   been specified), PASS (if password specified), ACCT (if account\n   specified), BYTE (specifying bytesize of 8), ALLO (if  outputting\n   file), TYPE, STRU, MODE, SOCK, and APPE or RETR.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 15]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\nAppendix A:  The HASP Spooling System\n\n   HASP is a spooling-queuing-scheduling system used in conjunction with\n   IBM OS/360 to aid in processing of batch jobs.  The main purpose of\n   HASP is to increase throughput by minimizing I/O wait time and\n   providing a priority scheduling scheme whereby shorter jobs are\n   chosen for processing over longer jobs.\n\n   There are several stages of processing, or functions, within HASP.\n   At any instant, a given job is either in some stage of processing, in\n   which case the job is said to be active, or it is waiting to be\n   processed by some function, in which case it is said to be queued for\n   that function.  Jobs to be processed by a function are selected from\n   the queue of jobs waiting for that function, in order of decreasing\n   priority.  A job's priority is determined by its estimated CPU tine\n   and volume of output.  The result is that smaller jobs are selected\n   for processing over larger jobs, and therefore spend less time in the\n   system.\n\n   The HASP remote user is provided with a virtual operator's console.\n   Over this console he may enter HASP operator commands to display\n   information about the system in general, and to exercise control over\n   his terminal and his jobs.  HASP sends messages to his console in\n   response to his commands, and to inform him of conditions concerning\n   him as they arise.  HASP commands have the following general form:\n\n   $ \u003cverb\u003e \u003coperand1\u003e,\u003coperand2\u003e,...,\u003coperandn\u003e\n   where\n    \u003cverb\u003e          = a single character verb which\n                       identifies the general function\n                       to be performed\n\n    \u003coperand\u003e       = identification of the object to\n                       be displayed or acted upon.\n\n   Zero or more operands may be present, depending on the command, and\n   commas are used to separate operands when more than one is used.  In\n   general, alphabetics may be entered in either upper or lower case,\n   and for text outside paired apostrophes, blanks may be inserted at\n   any point desired.  Apostrophes intended as text characters must\n   appear in duplicate.\n\n   Every HASP command ellicts one or more responses.  The response \"OK\"\n   is used in many cases to acknowledge the command and to signify that\n   the requested action has been taken or initiated.  In the later case,\n   an information message will be issued when the request is completed.\n\n\n\n\n\nKrilanovich                                                    [Page 16]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   Every HASP console message begins with the text 'S HH.MM.SS' or\n   'S*HH.MM.SS', where HH.MM.SS is the time of day in hours, minutes,\n   and seconds, and in 24 hour clock.\n\n   Many commands display job status information as a response.  The\n   format of this standard response is as follows:\n\n   jobs queued for processing:\n   JOB jjj jobname AW EXEC  class PRIO prio HOLD\n                      PRINT rem             PURGE\n                      PUNCH rem             *DUP*\n                      PURGE\n\n   jobs being processed:\n   JOB jjj jobname EXECUTING class PRIO prio HOLD\n                   ON DEVICE dev             PURGE\n                   IS PURGING\n\n   where\n      jjj             = HASP assigned job number\n      jobname         = OS jobname\n      AW              = 'AWAITING'\n      class           = job's job class\n      prio            = job's HASP internal priority\n      rem             = terminal number of remote terminal\n                        where job is queued to print or punch\n      dev             = device name\n      HOLD            = signifies job is in hold status, or\n                        will be at completion of current\n                        function\n      PURGE           = signifies job will be purged at\n                        completion of current function\n      *DUP*           = signifies job cannot begin execution\n                        until another job with same jobname\n                        completes\n\n   The following is a brief description of those HASP operator\n   commands that may be issued by a remote user (for a more\n   complete description, see NIC #16306):\n\n   SDA                   Display status information on all active jobs\n\n   SDF [,rem]            Display number of jobs queued for special forms\n\n   SDN [,queue]          Display status information on all queued jobs\n\n   SDQ                   Display number of queued jobs\n\n\n\n\nKrilanovich                                                    [Page 17]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\n   SCJ jjj               Delete job immediately\n\n   SKJ jjj               Issue OS CANCEL and delete job\n                         immediately\n\n   SPJ jjj               Delete job after current function\n\n   SDJ jjj               Display job status information\n\n   SD'jobname            Display job status information\n\n   SB device,pages       Backspace device\n\n   SC device             Delete current function on device\n\n   SF device,pages       Forward space device\n\n   SDP device            Display job number of job on device\n\n   SDI                   Display status and classes of initiators\n   SDLINE rem            Display status of remote terminal\n\n   SDRM rem              Display status of remote terminal\n\n   SDU                   Display status of local unit record\n                         devices\n\n   SDM rem,'message'     Display message to remote console\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 18]\n\f\nRFC 477                Remote Job Service at UCSB            23 May 1973\n\n\nAppendix B:  RJS Reply ID's\n\n   The following is a list of the reply id's of the replies\n   generated by RJS in response to the indicated commands:\n\n   command             success reply           failure replies\n\n   USER                     330                     501\n\n   PASS                     230                     501,431,505\n\n   ACCT                     200                     501\n\n   BYE                      231                     501\n\n   REINIT                   2O4                     5O1,5O4\n\n   INUSER/INID              200                     501,504\n\n   INPASS                   200                     501,504\n\n   INACCT                   200                     501,504\n\n   OUTUSER                  200                     501,504\n\n   OUTPASS                  200                     501,504\n\n   OUTACCT                  200                     501,504\n\n   INPATH                   200                     501,504\n\n   OUTPATH/OUT              200                     501,504\n\n   INPUT                    260                     501,360,504,505\n\n   CHANGE                   200                     501,464,504\n\n   STATUS (no operand)      100                     501\n\n   STATUS (with operand)    161                     501,464,504\n\n   CANCEL                   262                     501,464,504\n\n   Possible spontaneous reply id's are:  300, 440, 441, 442, 461, and\n   466.\n          [This RFC was put into machine readable form for entry]\n               [into the online RFC archives by Mikan Mirko]\n\n\n\n\nKrilanovich                                                    [Page 19]\n\f\n"
}