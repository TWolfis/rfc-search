{
  "series": "Request for Comments",
  "number": "202",
  "howpublished": "RFC 202",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0202",
  "url": "https://www.rfc-editor.org/info/rfc202",
  "title": "Possible Deadlock in ICP",
  "pagetotal": "2",
  "year": "1971",
  "month": "jul",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        Steve Wolfe\nRequest for Comments:  #202                                     UCLA-CCN\nNIC #7155                                                     Jon Postel\nCategories:  D                                                  UCLA-NMC\nReferences:  Document #2                                    26 July 1971\nObsoletes:  None\n\nWe have noticed a possible deadlock situation which may arise using the\nInitial Connection Protocol (ICP) specified in Document #2 (NIC #7101 in\nthe Current Network Protocols Notebook NIC #7104).\n\nIf on both sides one RFC is issued and a \"wait for match\" is required\nbefore the second RFC is issued, it is possible that the first RFC's\nwill not match.  In particular a deadlock will occur if both sides open\ntheir send or both sides open their receive sockets first.\n\nBriefly the ICP is:\n\u003cwhere the original uses a script lowercase letter with a single digit\nsubscript we use the lower case letter followed by {digit} so that\nscript-m-subscript-2 is printed m{2}\u003e\n\nServer                                User\n------                                ----\n\nS1:  Listen on socket L.              U1:  RTS(U, L, l{1})\n\nS2:  Wait for a match.                U2:  Wait for match.\n\nS3:  STR(L, U, s{1})\n\nS4:  Wait for allocation.             U3:  All(l{1}, m{1}, b{1})\n\nS5:  Send data S in s{1} bit          U4:  Receive data S in s{1}\n     bytes as allowed by                   bit bytes.\n     allocation m{1}, b{1}.\n\nS6:  CLS(L, U)                        U5:  CLS(U, L)\n\nS7:  RTS(S, U+3, l{2})                U6:  STR(U+3, S, s{2})\n\nS8:  STR(S+1, U+2, s{3})              U7:  RTS(U+2, S+1, l{3})\n\n\"The labels here imply no ordering except that ordering required by the\nHost-Host Protocol.  Note that steps S7 and S8 can be reversed as can U6\nand U7.  Also, notice that at any time after S2 the server could\ninitiate steps S7 and S8 in parallel with steps S3 through S6, and that\nat any time after U4 the user could initiate steps U6 and U7 in parallel\nwith step U5.\"\n\n\n\n                                                                [Page 1]\n\f\nWe recommend that the server perform steps 7 and 8 before waiting for\nthe user to perform step 6 or 7.  It is also suggested that the user\nissue the RFC's in steps 6 and 7 without waiting for the server.  (If\nthe user is only Listening then both Listens should be issued without\nwaiting for the server.)  If for some reason a host must delay between\nissuing RFC's it must issue the RFC's involving sockets S and U+3 first.\n\n       [ This RFC was put into machine readable form for entry ]\n         [ into the online RFC archives by Robert Barnes 6/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 2]\n\f\n"
}