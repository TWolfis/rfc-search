{
  "series": "Request for Comments",
  "number": "65",
  "howpublished": "RFC 65",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0065",
  "url": "https://www.rfc-editor.org/info/rfc65",
  "title": "Comments on Host/Host Protocol document \\#1",
  "pagetotal": "2",
  "year": "1970",
  "month": "aug",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        Dave Walden\nRequest for Comments: 65                       A/S Norsk Data-Elektonikk\n                                                         August 29, 1970\n\n\n  Comments on Host-Host Protocol Document No. 1 (S. Crocker - 8/3/70)\n\n   Page 3.   Eliminate marking.  Instead, make all regular messages into\n   two message: The first containing just the leader and indicating that\n   the data follows in the second (next) message.  Do this both from the\n   source Host to its IMP and from the destination IMP to its Host.\n   Thus, no more hunting for the beginning of the data is necessary.\n   Once this adjustment is made, an additional simplification is\n   available.  If the maximum message length is a common multiple of the\n   word sizes of all the computers in the network (perhaps 2880*2 bits),\n   successive messages of long files can be dropped in place without\n   shifting.\n\n   Page 4.   Control messages should be sent to and from the _control\n   socket_  -- not over the control link.  The concept of the control\n   link causes a great big, unnecessary special case.\n\n   Page 5.   Assigning sockets permanently to certain network resources\n   should be encouraged and a directory of the socket/resource\n   associations should be available somewhere in the network, perhaps in\n   physical book form at each site.\n\n   Page 6.  Links have no Host-Host purpose other than identifying a\n   connection so that socket numbers don't have to be included in all\n   messages and to simplify table look-ups in the NCPs.  However, since\n   there are possibly 512 links* with the same number, links don't aid\n   table look-ups very much.  Also finding the next available link to a\n   particular destination is very ugly .  Therefore, I suggest limiting\n   the number of links to a total of n (where n = 32, 64, or 256 or some\n   other good number) for all destinations.  In other words, a\n   particular link is only in use to one destination at a time(actually\n   from one destination at a time since the receiver picks the link to\n   be used for a connection).  This change makes picking the next\n   available link very simple and,I feel,is a worthwhile change if only\n   for this reason.  The question of simplifying table look-ups is a\n   little more complex.  It is easy to use the link directly as an index\n   into tables in the receive portion of the NCP since the receiver\n   picks the link.  But a hash table or linear search or something is\n   still necessary in the send portion of the NCP.  This too can be\n   fixed with the following changes.  Add to STR a _pseudo link_  chosen\n   by the sender. This link is sent in all non-control messages in the 8\n   --------------------------------------\n   *A destination number is 9 bits.\n\n\n\nWalden                                                          [Page 1]\n\f\nRFC 65               Comments on Host-Host Protocol          August 1970\n\n\n   bits to the right of the link in the leader.  The IMP must preserve\n   these bits and return them with RFNMs and the receiver must use the\n   pseudo link instead of the link in RET and INR.  The extra memory\n   necessary to store the pseudo link in the NCP receive tables (which\n   are indexed by link) and the link in the NCP send tables (which are\n   indexed by pseudo link) is certainly less than the overhead necessary\n   to maintain associative tables.\n\n   Page 8.   The allocate mechanism seems very inconvenient for the\n   receive portion of the NCP to use.  The receiver wants the allocation\n   to be used up in units of the receiver's buffer size not in units of\n   sender messages which may be variable length.  Otherwise the receiver\n   has a memory compaction problem.\n\n   Page 9.   The new irregular message to make the \"cease\" mechanism\n   work are unnecessary, I think.  The sender can keep track (probably\n   with a one bit counter) of ALLs and GVBs and ignore GVB 0s for which\n   resume ALLs have already arrived.   This the receiver need not know\n   whether the cease has been sent or not.\n\n   Page 15.  If I implemented an NCP, all ERRs would be treated like\n   NOP.  As an error control mechanism ERR is complicated and\n   insufficient.  Who wants to debug a complicated mechanism which only\n   catches bugs due to the primary mechanism being undebugged.  The one\n   error control mechanism I would provide is a receive process to send\n   process acknowledgment on every message.  If this is not received for\n   too long, the send process can send the message again if it has been\n   saving it.  This acknowledgment catches errors causing message loss\n   at the process/NCP, NCP/NCP, Host/IMP, IMP/IMP, etc.  levels.\n   Currently the Host/IMP interface is particularly lacking in useful\n   error controls.  I wouldn't worry about kinds of errors check-sums\n   are designed to pick up.  If dropped and picked up bits ever become a\n   problem either add hardware to more interfaces or let the receive\n   process not send the process to process acknowledgment if a software\n   checksum does not check.\n\n   The page 3 and page 6 comments involve a change to the IMP program.\n   I feel a tiny bit guilty suggesting changes I don't have to implement\n   any more.  However, I trust Crowther and Cosell will, as always,\n   resist bad changes while making sensible ones.  The page 9 comment is\n   aimed at avoiding a change in the IMP program.\n\n\n         [ This RFC was put into machine readable form for entry ]\n           [ into the online RFC archives by Luke Hollins 8/99]\n\n\n\n\n\n\nWalden                                                          [Page 2]\n\f\n"
}