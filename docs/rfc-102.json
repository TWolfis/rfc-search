{
  "series": "Request for Comments",
  "number": "102",
  "howpublished": "RFC 102",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0102",
  "url": "https://www.rfc-editor.org/info/rfc102",
  "title": "Output of the Host-Host Protocol glitch cleaning committee",
  "pagetotal": "4",
  "year": "1971",
  "month": "feb",
  "body": "\n\n\n\n\n\nNetwork Working Group                            Steve Crocker, Chairman\nRequest for Comments: 102                              at BBN, Cambridge\nNIC#5763                                            22, 23 February 1971\n\n\n                    OUTPUT OF THE HOST/HOST PROTOCOL\n                       GLITCH CLEANING COMMITTEE\n\n   At the NWG meeting in Urbana on 17-19 February 1971, a\n   committee was established to look at the Host/Host protocol\n   and see what changes were immediately desirable or necessary.\n\n   The committee is chaired by Steve Crocker, and has eight\n   other members:\n\n             Ray Tomlinson                 BBN (Tenex)\n\n             Jim White                     UCSB\n\n             Gary Grossman                 Illinois\n\n             Tom Barkalow                  Lincoln (TX2)\n\n             Will Crowther                 BBN (IMPs)\n\n             Bob Bressler                  MIT (Dynamic Modeling\n\n             Doug McKay                    IBM (Yorktown)\n\n             Dan Murphy                    BBN (Tenex)\n\n\n   A number of topics were discussed.  On some of these topics, a\n   consensus was reached on whether or not to recommend a change, and if\n   so, what the change should be.  On the remaining topics, specific\n   alternatives were proposed but no consensus was reached.\n\n   The committee will immediately canvas the network community and\n   gather reaction to its recommendations and the proposed alternatives.\n   The committee will then reconvene at UCLA on 8 March 1971 and decide\n   on final recommendations.  Steve Crocker will then write Document #2.\n   This sequence is in lieu of the change procedure outlined in NWG/RFC\n   53.\n\n\n\n\n\n\n\n\nCrocker                                                         [Page 1]\n\f\nRFC 102       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971\n\n\n   Specific Recommendations\n\n   1. The ECO and ERP command should each be 8 bits long.\n\n   2. The ERR command should be 96 bits long.\n\n   3. Message Data Types should be eliminated.  Third-level protocol\n      people may reinstate such a mechanism.\n\n   4. The Cease mechanism should be discontinued.\n\n   5. A new pair of one byte commands RST (reset) and RRP (reset reply)\n      should be added.  The RST should be interpreted as a signal to\n      purge the NCP tables of any existing entries which arose from the\n      sending Host.  The RRP command should be returned to acknowledge\n      receipt of the RST.  The Host sending the RST may proceed after\n      receiving either a RST or a RRP in return.  A RST may be returned\n      if the second Host comes up after the first Host.\n\n   6. Although it was suggested at the Urbana meeting that connections\n      should be full-duplex, the committee recommends against this\n      change.\n\n   7. Messages should be an integral number of bytes, and the number of\n      bytes and the byte size should be specified in each message.  The\n      marking convention should be abandoned and the padding ignored.\n\n      The number of bytes in the message should be a 16-bit number\n      following the leader.  The byte size should be in the next 8-bit\n      field.  Two suggestions were generated for the starting point of\n      the text, and these are explained in the next session.\n\n      For flow control purposes, the number of bits in a message is the\n      product of the number of bytes and the byte size.  The leader and\n      other fixed format fields are not counted.\n\n   8. The problem of synchronizing the interrupt signal in a console\n      input stream was considered.  We consider the console input\n      scanner as a process and note two reasonable implementations: it\n      may either read characters as fast as it can, looking for the\n      interrupt character and throwing away characters if there is no\n      room in the user process' input queue; it may read characters only\n      as fast as the user process can receive them, (or at least has\n      room for them).\n\n   The first implementation guarantees that the interrupt character\n   (e.g., control - C on the PDP-10 10/50) will always be acted on, but\n   requires that the using process interpret the output stream to detect\n\n\n\nCrocker                                                         [Page 2]\n\f\nRFC 102       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971\n\n\n   when it is sending too fast.  The second implementation avoids\n   overrun but may not allow for sending an interrupt code.  Note that\n   in the first case, allocation is alway renewed as soon as possible by\n   the console input interpreter; whereas in the second case, allocation\n   is renewed only as the result of acceptance of data by the user\n   process.\n\n   We decided that this is really a third-level protocol matter, viz,\n   use the INS to mean that a special code has been inserted into the\n   input stream.  In conjunction with this, create the special code to\n   be put into the input sequence.\n\n   This special code would be network-wide and independent of the\n   particular interrupt character peculiar to the serving system.  The\n   scheme for interrupting a serving process is that the using process\n   inserts the serving Host's interrupt sequence, followed by the\n   network special code, and also issue the INS.\n\nUNRESOLVED ALTERNATIVES\n\n   1. Length of Control Messages\n\n   In accordance with other specifications, control messages should be\n   an integral number of 8-bit bytes, the length should be specified in\n   the byte count field, and control commands should not be split across\n   messages.\n\n   Unresolved was whether to specially limit the length of control\n   messages.  The two choices are.\n\n      a) no special limit ( ~ 1000 bytes)\n\n      b) 120 bytes\n\n   2. Message Format\n\n   It was agreed to abandon marking and include the text length in the\n   form of a byte count and byte size.  Unresolved was where to begin\n   the first byte of data.  The two choices are:\n\n      a) have the first data byte begin after 72 bits of leader, byte\n      count, byte size and spacing.  The message format would then be as\n      in the diagram:\n\n\n\n\n\n\n\n\nCrocker                                                         [Page 3]\n\f\nRFC 102       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971\n\n\n                 \u003c------------16------------\u003e\n                  __________________________\n                 |                          |\n                 |_ _ _ _  LEADER   _ _ _ _ |\n                 |                          |\n                 |__________________________|\n                 |                          |\n                 |        BYTE COUNT        |\n                 |__________________________|\n                 |            |             |\n   BYTE SIZE-----|----\u003e       |             |\n                 |____________|_____________|\n                 |            |             |\n                 |            |\u003c------------|--Beginning of first\n                 |____________|_____________|       data byte\n                 |                          |\n                 |                          |\n\n      b) use the double physical transmission scheme presented in\n      NWG/RFC 67.  When sending a regular message, the Host would send a\n      leader, byte count and byte size and terminate transmission.  The\n      second transmission would be the data.\n\n      At the receiving end, the IMP would transmit 64 bits of leader,\n      byte count, byte size and spacing, and stop transmission.  The\n      next transmission would be only the data.\n\n3. Allocation\n\n   With respect to the allocation mechanism embodied in the ALL, GVB and\n   RET commands, two alternatives were proposed:\n\n      a) make no change.\n\n      b) The flow control algorithm should be changed to keep track of\n      two quantities: messages and bits.  The ALL, GVB, and RET commands\n      each have two data fields.  The ALL command allocates a message\n      limit and a bit limit.  The GVB command contains two fractions,\n      and the RET command returns both messages and bits.  When sending\n      a message, the sending NCP decrements its message counter by 1 and\n      its bit counter by the text length of the message.  The sending\n      NCP may not cause either of its counters to go negative.  The\n      message counter would be 16 bits long.\n\n\n         [ This RFC was put into machine readable form for entry ]\n         [ into the online RFC archives by Gottfried Janik 02/98 ]\n\n\n\n\nCrocker                                                         [Page 4]\n\f\n"
}