{
  "series": "Request for Comments",
  "number": "54",
  "howpublished": "RFC 54",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0054",
  "url": "https://www.rfc-editor.org/info/rfc54",
  "title": "Official Protocol Proffering",
  "pagetotal": "9",
  "year": "1970",
  "month": "jun",
  "body": "\n\n\n\n\n\nNetwork Working Group                               Steve Crocker (UCLA)\nRequest for Comments # 54                              Jon Postel (UCLA)\nJune 18, 1970                                     John Newkirk (Harvard)\n                                                   Mike Kraley (Harvard)\n\n                    An Official Protocol Proffering\n\nI. INTRODUCTION\n\n   As advertised in NEW/RFC #53, we are submitting the protocol herein\n   for criticism, comments, etc.  We intend for this protocol to become\n   the initial official protocol, and will, therefore, be happiest if no\n   serious objections are raised.  Nevertheless, we will entertain all\n   manner of criticism until July 13, 1970, and such criticism should be\n   published as a NWG/RFC or directed to the first author.\n\n   After July 13, a decision will be made whether to adopt this protocol\n   (or slight variation) or whether to redesign it and resubmit it for\n   criticism.\n\nOnly the Protocol\n\n   In preceding discussions of protocol, no clear distinction has been\n   made between the network-wide specifications and local strategies.\n   We state here that the only network-wide issues are message formats\n   and restrictions on message content.  Implementation of a Network\n   Control Program (NCP) and choice of system calls are strictly local\n   issues.\n\n   This document is constrained to cover only network-wide issues and\n   thus will not treat system calls or NCP tables; nevertheless, a\n   protocol is useless without an NCP and a set of system calls, so we\n   have expended a great deal of effort in deriving a protypical NCP.\n   This effort is reported in NWG/RFC #55, and the reader should\n   correlate the protocol presented here with the suggestions for using\n   it presented there.  It is important to remember, however, that the\n   content of NWG/RFC #55 is only suggestive and that competitive\n   proposals should be examined before choosing an implementation.\n\nFlow Control\n\n   In the course of designing this current protocol, we have come to\n   understand that flow control is more complex than we imagined.  We\n   now believe that flow control techniques will be one of the active\n   areas of concern as the network traffic increases.  We have,\n   therefore, benefitted from some ideas stimulated by Richard Kaline\n   and Anatol Holt and have modified the flow control procedure.\n   (Defects in our scheme are, of course, only our fault).  This new\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 1]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   procedure has demonstrable limitations, but has the advantages that\n   it is more cleanly implementable and will support initial network\n   use.  This is the only substantive change from the protocol already\n   agreed upon.\n\n   The new flow control mechanism requires the receiving host to\n   allocate buffer space for each connection and to notify the sending\n   host of how much space in bits is available.  The sending host keeps\n   track of how much room is available and never sends more text than it\n   believes the receiving host can accept.\n\n   To implement this mechanism, the sending host keeps a counter\n   associated with each connection.  The counter is initialized to zero,\n   increased by control commands sent from the receiving host, and\n   decremented by the text length of any message sent over the\n   connection.  The sending host is prohibited from sending text longer\n   than the value of the counter, so the counter never goes below zero.\n\n   Ideally, the receiving host will allocate some buffer space as soon\n   as the connection is established.  The amount allocated must never\n   exceed what the receiver can guarantee to accept.  As text arrives,\n   it occupies the allocated buffer space.  When the receiving process\n   absorbs the waiting text from the buffer, the NCP fires back a new\n   allocation of space for that connection.  The NCP may allocate space\n   even if the receiving process has not absorbed waiting text if it\n   believes that extra buffer space is appropriate.  Similarly, the NCP\n   may decide not to reallocate buffer space after the receiving process\n   makes it available.\n\n   The control command which allocates space is\n\n                   ALL     \u003clink\u003e  \u003cspace\u003e\n\n   This command is sent only from the receiving host to the sending\n   host.\n\n   This formulation of flow control obviates the RSM and SPD commands in\n   NWG/RFC #36, and the Host-to-Imp message type 10 and Imp-to-Host\n   message types 10 and 11 in the current revision of BBN Report 1822.\n\n   The obvious limitation in this scheme is that the receiving host is\n   not permitted to depend upon average buffer usage -- worse case is\n   always assumed.  If only a few connections are open, it is unlikely\n   that there would be much savings.  However, for more than a few\n   connections, average buffer usage will be much less than allocated\n   buffer space.  We have looked at extensions of this protocol which\n   would include adaptive allocation, and we believe this to be\n   feasible.  For the present this limited scheme seems best, and we\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 2]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   look forward to discussing more sophisticated schemes later.  The old\n   scheme of special RFNM's, etc. also remains under discussion.\n\n   In order to answer questions and discuss details, we will hold a pair\n   of network meetings.  The first will be on June 29 at Harvard and the\n   second on July 1 at UCLA.  We request that no more than on programmer\n   per host attend a meeting and that hosts be represented at only one\n   of these meetings.  Two of us (J.N. and S.C.) will be at both\n   meetings.\n\n   To make reservations to attend the Harvard meeting, contact\n\n   Mrs. Margi Robison\n   (617) 495-3989\n      or 495-3991\n\n   To make reservations to attend the UCLA meeting, contact Mrs. Benita\n   Kirstel (213) 825-2368.\n\nII. THE PROTOCOL\n\n   The notion of a connection as explained in NWG/RFC #33 pervades the\n   protocol.  A connection is a simplex communication path, intended to\n   be between two processes.\n\n   The primary function of the protocol is to provide for\n       (1)  establishment of connections,\n       (2)  regulation of flow over connections, and\n       (3)  termination of connections.\n\n   In addition, the protocol provides some ancillary functions such as\n   sending simulated interrupt pulses and echoing test messages.\n\n   To provide a path for exchanging information about connections, we\n   designate specific links, i.e. link one between each pair of hosts to\n   be control links.  Traffic on control links consists only of control\n   commands, defined below.\n\n   Connections are named by a pair of sockets.  Sockets are 40 bit names\n   which are known throughout the network.  Each host is assigned a\n   private subset of these names, and a command which requests a\n   connection names one socket which is local to the requesting host and\n   one local to the receiver of the request.\n\n   Sockets are polarized; even numbered sockets are receive sockets; odd\n   numbered ones are send sockets.  One of each is required to make a\n   connection.\n\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 3]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   To facilitate transmission of information over a connection, a unique\n   link is assigned to each connection.  One of the steps in\n   establishing a connection, therefore, is the assignment of a link.\n   Of the non-control links, zero is reserved for intra-network use, and\n   links 32 to 255 are reserved for experiment and expansion.  Thus only\n   links 2 through 31 are available for regular use.  Link assignment\n   must either always be done by the receiver or always by the sender.\n   We have (almost) arbitrarily chosen this to be the receiver's\n   responsibility.\n\n   All regular messages consist of a 32 bit leader, marking, text, and\n   padding.  Marking is a (possibly null) sequence of zeroes followed by\n   a 1; padding is a 1 followed by a (possibly null) sequence of zeroes.\n\n   A regular message sent over the control link (link 1) is called a\n   control message.  Its text is an integral (possibly zero) number of\n   control commands in the form described below, and this text must end\n   on a command boundary.\n\n   The commands used to establish a connection are STR and RTS.  The STR\n   command is sent from a prospective sender to a prospective receiver.\n   Its \u003cmy socket\u003e field contains a send socket local to the prospective\n   sender; its \u003cyour socket\u003e field contains a receive socket local to\n   the prospective receiver.  The RTS command is the dual, but is also\n   contains a \u003clink\u003e field for link assignment.  These two commands are\n   referred to as requests-for-connection (RFC).  A STR and an RTS match\n   if the \u003cmy socket\u003e field of one is identical to the \u003cyour socket\u003e\n   field of the other and vice versa.  A connection is established where\n   a matching pair of RFC's have been exchanged.\n\n   Hosts are prohibited from establishing more than one connection to\n   any local socket.  Therefore, a host may not use a socket for the \u003cmy\n   socket\u003e  field of an RFC if that socket is mentioned in a previous\n   RFC and the connection is not yet terminated.\n\n   The command used to terminate a connection is CLS.  Each side must\n   send and receive a CLS command before a connection is completely\n   terminated and the sockets are free to participate in other\n   connections.  It is not necessary that both RFC's be exchanged before\n   a connection is terminated.  More details on termination are given\n   below.\n\n   After a connection is established, the receiving host sends a ALL\n   command which allocates space for the connection.  The sender keeps\n   track of how much space is available in the receiving host and does\n   not transmit more text than the receiving host can accept, as\n   explained above.  A sender is also constrained by the local IMP from\n   sending a message over a connection until  the RFNM from the previous\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 4]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   message is received.\n\n   After a connection is established, CLS commands sent by the receiver\n   and sender have slightly different effects.  CLS command sent by the\n   sender indicate that no more messages will be sent over the\n   connection.  This command must not be sent if there is a message in\n   transit over the connection.\n\n   CLS commands sent by the receiver act as demands on the sender to\n   terminate transmission.  However, since there is a delay in getting\n   the CLS command to the sender, the receiver must expect its buffers\n   to fill to the limit provided in ALL commands.\n\n   While a connection is established, either side may send INR or INS\n   commands.  The interpretation of these commands is a local matter,\n   but in general they will provide and escape function.\n\n   Note that the ALL, INR and INS commands may be sent only after the\n   connection is established and before a CLS command is sent.\n\n   A very simple test facility is provided by the ECO and ERP commands.\n   Upon receiving a ECO command, a host must change the first eight bits\n   to ERP and return it.  These commands have no relationship to\n   connections.\n\n   A NOP command is included for convenience.  It is coded as zero to\n   facilitate command message construction.\n\n   Finally, an ERR command is included for notifying a foreign host it\n   has (apparently) made an error.  At present, no specific list of\n   errors is defined, and no action is defined for the receipt of ERR\n   commands.  Hosts should log ERR commands upon receipt so that system\n   programmers can diagnose the trouble.  A host may generate an ERR\n   command at any time and for any reason, but it is advised that each\n   host publish an exhaustive list of the ERR commands it may sent and\n   their interpretations.\n\nNETWORK CONTROL COMMANDS\n\n   The following is a detailed description of the structure and format\n   of each of the control commands.\n\n\n   To facilitate and clarify socket descriptions, the following\n   conventions have been adopted:\n\n   \u003cmy socket\u003e and \u003cyour socket\u003e are used in the command descriptions.\n\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 5]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   \u003cmy socket\u003e is local to the originator of the command.\n\n   \u003cyour socket\u003e is local to the receiver of the command.\n\nCONTROL COMMAND FORMATS\n\n\n   No Operation\n                      _______\n                     |       |\n                     |  NOP  |\n                     |_______|\n\n   Request Connection, Receiver to Sender\n                      ______________________________________________\n                     |       |             |               |        |\n                     |  RTS  |  my socket  |  your socket  |  link  |\n                     |_______|_____________|_______________|________|\n\n   Request Connection, Sender to Receiver\n                      _____________________________________\n                     |       |             |               |\n                     |  STR  |  my socket  |  your socket  |\n                     |_______|_____________|_______________|\n\n   Close\n                      _____________________________________\n                     |       |             |               |\n                     |  CLS  |  my socket  |  your socket  |\n                     |_______|_____________|_______________|\n\n   Allocate\n                      __________________________\n                     |       |        |         |\n                     |  ALL  |  link  |  space  |\n                     |_______|________|_________|\n\n   Interrupt Sent by Receiving Process\n                      _______________\n                     |      |        |\n                     | INR  |  link  |\n                     |______|________|\n\n\n\n\n\n\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 6]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n   Interrupt Sent by Sending Process\n                     _______________\n                    |      |        |\n                    | INS  |  link  |\n                    |______|________|\n\n   Echo Request\n                     ____________________________   _________\n                    |       |                    \\  \\        |\n                    |  ECO  |  length            /  /  text  |\n                    |_______|____________________\\  \\________|\n\n   Echo Reply\n                     ____________________________   _________\n                    |       |                    \\  \\        |\n                    |  ERP  |  length            /  /  text  |\n                    |_______|____________________\\  \\________|\n\n   Error Detected\n                     ____________________________   _________\n                    |       |                    \\  \\        |\n                    |  ERR  |  length            /  /  text  |\n                    |_______|____________________\\  \\________|\n\n\n\n\n   The host is specified in the leader.\n\n   \u003clink\u003e is 8 bits\n\n   \u003cspace\u003e is 32 bits long and is an unsigned integer.\n\n   \u003clength\u003e is an unsigned 16 bit integer.\n\n   \u003ctext\u003e is as long as the length.  The command is therefore 24 bits\n   longer that the length.  Maximum length is one message, to facilitate\n   command decoding and manipulation.\n\n\n   All control command codes are 8 bit long:\n\n             NOP = 0\n             RTS = 1\n             STR = 2\n             CLS = 3\n             ALL = 4\n             INR = 5\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 7]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\n             INS = 6\n             ECO = 7\n             ERP = 8\n             ERR = 9\n\n   \u003cmy socket\u003e and \u003cyour socket\u003e are 32 bits long,\n                     _______________________\n                    |               |       |\n                    |  User number  |  AEN  |\n                    |_______________|_______|\n\n   24 bits for user number and 8 bits for AEN.\n\nIII.  Conclusion\n\n   Extensions to the Protocol\n\n   Some issues have not been adequately treated in the current protocol.\n   We have in mind the following topics to consider more thoroughly and\n   perhaps experiment with.\n\n   1. More Sophisticated Flow Control.\n\n   As mentioned above, other schemes for flow control are still being\n   considered.  Other than the necessity of providing some form of it,\n   we are completely unsure of the nature of the problem.  It may turn\n   out that the present scheme is completely adequate; it may also turn\n   out that we will need a much more complex scheme.\n\n   2. Error Detection and Recovery\n\n   As we gain some experience with the network, we will develop a better\n   understanding of what errors can occur and, perhaps more importantly,\n   what to do about these errors.  We expect the protocol to change as\n   we understand error control.\n\n   3. Start Up and Shut Down Procedures\n\n   We have not done enough thinking about the problem of the host which\n   participates part-time in the network, which ceases normal network\n   operation but remains on the network for special purposes, or which\n   recovers from a system failure.  These issues are critical to robust\n   network operation and are possibly our highest priority.  4. Query\n   and Response\n\n   A host-to-host status test would be a valuable tool, but it is not\n   yet clear what is appropriate to provide.\n\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 8]\n\f\nRFC 54              An Official Protocol Proffering        18 June 1970\n\n\nComing onto the Network\n\n   We suggest that hosts come onto the network gingerly.  First, each\n   host should thoroughly exercise connections to itself.  Then it\n   should arrange experiments with some other host who is already\n   functioning.  Finally, it may begin to exercise the facilities of\n   other hosts.  It is not clear at this time which host will be in the\n   best position to help other hosts first, but UCLA will attempt to\n   serve this function.\n\nPrivate Networking\n\n   A common ploy is to use the IMP to connect several local computers,\n   one or more of which is not available to the whole network.  For\n   example, Harvard is connecting its PDP-1 to its PDP-10 via an IMP;\n   Lincoln Laboratories is connecting its TSP to the 360/67 and the TX2\n   via an IMP; and UCLA is similarly connecting a XDS 920 to its Sigma-\n   7.  In each of these cases, the small machine will not initially\n   provide services to the network.\n\n   Although there should be no unwanted traffic to any of these extra\n   hosts, it is desirable that they conform minimally to the network\n   protocol.  Provided that they never initiate a connection or send out\n   spurious control commands, it is sufficient for a host to respond to\n   CLS commands with acknowledging CLS commands, and to respond to ECO\n   commands with ERP commands.\n\nAcknowledgments\n\n   The work presented above is only a small portion of the concurrent\n   effort.  Most of the related effort will be reported in immediately\n   forthcoming RFC's.  A number of people provided extremely valuable\n   aid during the last two weeks.  We are particularly grateful to\n   Professor George Mealy of Harvard for supporting four of his students\n   to come westward to work on the network, to Robert Uzgalis for\n   facilitating access to CCN at UCLA, and to the secretarial staff of\n   the Computer Science Division of the University of Utah, and\n   especially Peggy Tueller and Marcella Sanchez, for excellent help in\n   preparing these documents.\n\n\n       [ This RFC was put into machine readable form for entry ]\n      [ into the online RFC archives by Eitetsu Baumgardner 3/97 ]\n\n\n\n\n\n\n\n\n\nCrocker, Postel, Newkirk \u0026 Kraley                              [Page 9]\n\f\n"
}