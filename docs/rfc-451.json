{
  "series": "Request for Comments",
  "number": "451",
  "howpublished": "RFC 451",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0451",
  "url": "https://www.rfc-editor.org/info/rfc451",
  "title": "Tentative proposal for a Unified User Level Protocol",
  "pagetotal": "3",
  "year": "1973",
  "month": "feb",
  "body": "\n\n\n\n\n\nNetwork Working Group                                  M.A. Padlipsky\nRequest for Comments # 451                             MIT-Multics\nNIC # 14135                                            February 22, 1973\n\n\n          Tentative Proposal for a Unified User Level Protocol\n\n\nNow that proposals for expansions to the Telnet Protocol are in vogue\nagain (RFC's 426 and 435, for example), I'd like to promote some\ndiscussion of a particular favorite of my own.  Please note that this is\npresented as a tentative proposal: it's an attempt to consider the\ndesirability of a new approach, not a rigorous specification.  To begin\nsomewhat obliquely, for some time I've felt that we (the NWG) have\nfallen into a trap in regard to the Initial Connection Protocol.  The\npoint is that even though the ICP gives us the ability to define a\n\"family\" of ICPlets by varying the contact socket, there's no compelling\nreason why we should do so.  That we have done so in the FTP and RJEP I\nview as unfortunate--but also undesirable and unnecessary.\n\nTo take the \"undesirable\" aspects first, consider the following: If we\ncontinue to define a new contact socket for every new \"user level\"\nprotocol we come up with, we'll continue to need another new mechanism\n(process, procedure, or patch) to respond to requests for connection for\neach new protocol.  By Occam's Razor (or the principle of economy of\nmechanism, if you prefer), this is a bad thing.  Irrespective of the\nrelative difficulty of implementing such mechanisms on the various\nHosts, to implement them at all leads to a kind of conceptual clutter.\nFurther, a different kind of confusion is introduced by the notion which\nsome of our number seem to be entertaining, that the \"later\" user level\nprotocols such as FTP are somehow still another level of abstraction up\nfrom Telnet.  So it seems to me that we could spare ourselves a lot of\nbother, both practical and theoretical, if we could avoid spawning\ncontact sockets needlessly.\n\nTurning to the \"unnecessary\" aspects, I think that even if the case\nagainst the current approach isn't completely convincing the case for a\nparticular alternative might be.  So to show that the multiple contact\nsocket ICP is unnecessary, I'll try to show that what I call the\n\"unified user level protocol\" (UULP) is better.  The first thing to\nnotice is that all the \"later\" protocols \"speak Telnet\".  This is\nsensible: Telnet works, by and large.  Why not make use of it?  Right.\nBut why not make even more use of it?  In view of the fact that FTP,\nRJEP, and even the initiating part of the Network Graphics Protocol, are\nreally just ways of letting a user say to a Server \"I don't know what\nyou call it on your system, but please perform the whatever function\n(push or pull a file, start or stop a batch job, funnel some of my\noutput through the Network Virtual Graphics Terminal module) for me now,\n\n\n\nPadlipsky                                                       [Page 1]\n\f\nRFC 451           Unified User Level Protocol Proposal     February 1973\n\n\nwhy not simply put hooks in Telnet to indicate that a Network Generic\nFunction is wanted instead of a Host-specific one at a given point in\ntime?  Then everybody can come in through Telnet in ways that are\nalready known (and usually debugged and optimized) and fan out to other\nservices through a single mechanism, where that single mechanism can be\nwhatever is most appropriate to a particular Host.  This view has the\nadditional virtue of keeping the Host \"Answering Service\"-equivalent\nprocesses out of the act when new protocols come along -- where by\nAnswering Service, I mean that process which manages logins in general\nfor a given Host.  This process is, of course, a particularly sensitive\none on those systems which worry about accounting and security.\n\nThat's all probably a bit vague.  Perhaps some idea of how I think the\nUULP would work will cast some light on what I think it is.  What's\nneeded is a way of letting the Server know that it's being given a\ngeneric command (I decline to call it a Network Virtual command, but I'm\nafraid that might be what I mean) like \"STOR\" or \"RETR\" rather than a\nlocal command like \"who\" or \"sys\".  What could be simpler than defining\na Telnet Control Code (TCC) for \"Network Generic Function Follows\"?  So\nif the Server Telnet receives a command line beginning with the NGF TCC\n(say, 277 octal), it just feeds the line to the appropriate process or\nprocedure (depending on the structure of its operating system).  This\napproach also offers a handy way of communicating back the fact that a\nparticular protocol or piece thereof isn't available: define a TCC for\n\"Unimplemented Generic Function\".  This feels a lot cleaner than having\na close on socket 3 mean anything from \"no FTP Server exists here\" to\n\"the FTP Server happens to be busy.\"\n\nNotice that the UULP automatically provides the answer to such\nobjections as the one Braden raises in RFC 430, that \"there is no\nmechanism within the FTP for _changing_ a password.  A user shouldn't\nhave to use a different protocol ... to merely change his password\".\nWith the UULP, any system which has a password changing ability would\nhave it available for all user level protocols because all of its\nabilities are made available by the generic login.  This seems clearly\nsuperior to having to retrofit afterthought after afterthought to the\nvarious user level protocols as we come to realize that life is more\nconvenient when we get away from the view that each protocol lives in\nits own island universe.  I understand that one of the main motivations\nfor going the multiple contact socket route was to avoid syntactic (and\nsemantic) conflicts between the protocol and the particular Host's\n\"normal\" command processor; however, locking ourselves in to special\ncommand processors exclusively is awfully procrustean.  So instead of\ncutting off the limbs to fit the bed, why not use the UULP to expand the\nbed.\n\n\n\n\n\n\nPadlipsky                                                       [Page 2]\n\f\nRFC 451           Unified User Level Protocol Proposal     February 1973\n\n\nAlthough this is a tentative proposal and not meant to be a detailed\ndesign spec, one elaboration suggests itself which might make the\ngeneral idea more attractive: For ease of implementation on some\nsystems, it would probably be a good idea to define additional TCC's for\n\"Begin User Protocol\".  That is, the user side starts the FTP by sending\nthe \"Begin FTP\" Telnet Control Code, waits for the Server to send either\nthe same code or the one for \"Unimplemented Generic Function\", and then\nproceeds (or not) to send STOR's and RETR's and the like.  (It could\nalso follow the \"I will\"/\"I won't\" style discipline of RFC 435 if we\nlike.) Probably each line is preceded by the Network Generic Function\nTCC so that systems which don't pass input off to some other process can\nstill distinguish between input to the system command processor and\ninput to the procedure(s) which perform(s) the protocol in question,\nalthough perhaps it would be preferable to have an \"End Protocol\" TCC.\n\nNow, I'm the first to admit that what makes sense to me, on my system,\nmay not make sense on somebody else's.  But it does seem plausible to me\nthat the unified user level protocol I've sketched here ought to be no\nharder to implement than the multiple contact socket (MCS) ICP is.  And\nthe advantages of the UULP over the MCS ICP in terms of ease of\nextension and (at least in my mind, if not in this paper) clarity make\nit seem worthwhile to consider further.  So rather than try to refine it\nhere, let me simply ask for comments both on the general notion and on\nthe necessary iteration of the design from sketch to spec.  (The Multics\nscenario in ICCC booklet shows how to get \"mail\" to me, for those who\ndon't feel like RFCing or phoning.)\n\n\n\n\n\n\n\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n       [ into the online RFC archives by Alex McKenzie with    ]\n       [ support from GTE, formerly BBN Corp.             9/99 ]\n\n\n\n\n\n\n\n\n\n\n\n\nPadlipsky                                                       [Page 3]\n\f\n"
}