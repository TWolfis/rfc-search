{
  "series": "Request for Comments",
  "number": "105",
  "howpublished": "RFC 105",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0105",
  "url": "https://www.rfc-editor.org/info/rfc105",
  "title": "Network Specifications for Remote Job Entry and Remote Job Output Retrieval at UCSB",
  "pagetotal": "9",
  "year": "1971",
  "month": "mar",
  "body": "\n\n\n\n\n\nNetwork Working Group                                     James E. White\nRequest for Comments: 105                         Computer Research Lab.\nCategory: Informational                         University of California\n                                               Santa Barbara, California\n                                                              March 1971\n\n                       Network Specifications for\n                            Remote Job Entry\n                                  and\n                      Remote Job Output Retrieval\n                                at UCSB\n\n\n     In the discussions that follow, 'byte' means 8 bits, with those\neight bits numbered 0-7 from left to right.\n\nI - Remote Job Entry (RJE)\n\n     UCSB will accept input of pseudo card files for batch processing\nat socket number x'200', site 3.  Network users should obtain an\naccount number from the UCSB Computer Center; account #1025,\nprogrammer names 'UCLA', 'SRI', 'UTAH', etc. may be used during\ncheckout.  The 360/75 runs under OS MVT and HASP.  Users submit jobs\nto HASP for scheduling and subsequent execution by OS through an\nintermediary process hereafter called RJE which is addressed as socket\nnumber x'200' and can be invoked through the Logger.  This section is\nintended to provide programmers with the information necessary to\ncommunicate with RJE; the is assumed familiar with the batch services\noffered by the Computer Center, and with its job control language\n(JCL) requirements.\n\n     RJE conducts all Network transactions through the NCP, which\noperates under the Host-Host protocol of 3 August 1970.  It expects\nthe first message it receives to be Type 0, discards the first eight\nbits (the message type) assuming them to be zeros, and thereafter for\nthe life of the connection takes no notice of IMP-message boundaries.\n\nI.A - Logging into RJE\n\n     To submit one or more jobs for batch processing, the Network user\nmust establish a simplex connection with RJE.  RJE is core resident\nonly while such a simplex connection is established (i.e., while a\nuser is transmitting a file).  At all other times, it resides on\ndirect-access storage and must be invoked through the Logger.  A login\nsequence can always be initiated by requesting connection to socket\nx'200'.  RJE does not serve multiple users simultaneously.  This if a\nconnection request is made to that socket while RJE is in use, the NCP\nwill queue the request.  When the current file transmission is\n\n\n\nWhite                                                           [Page 1]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\ncomplete, RJE will listen for and accept the next request (if any) in\nits queue; if no requests are queued for it, it will terminate\nexecution, releasing the main storage it occupied.  At times when RJE\nis not in core, the Logger listens on socket x'200', and will reject\nthe first call it receives, read RJE into core, and dispatch it.  RJE\nwill then list on that socket.  Thus to initiate a login sequence, the\nuser requests connection to socket x'200'.  If accepted, he is in\ncontact with RJE.  If rejected, he should reissue the connection\nrequest; when accepted, he will be connected to RJE.  A second\nrejection would indicate that the NCP's resources were exhausted.\nOnce the connection has been established, RJE will consider the user\nlogged in.\n\n     To prevent RJE from being monopolized by a single user, provision\nis made within the software for terminating a connection if RJE is\never required to wait more than a certain amount of time for a\ntransmission from the connected user.  For now, this time limit has\nbeen set at one minute per record, but it may be shortened or\nlengthened as required in the future.  Barring such termination, RJE\nwill maintain its connection to the user indefinitely.  Card images\nwill be accepted over the connection, and each one will be passed to\nHASP as it is received.  The user is expected to close the connection\nonce his file has been transmitted.  RJE will interpret that action as\nan end-of-file indication, and the user will be considered logged off.\n\nI.B - The RJE Connection\n\n     RJE expects the first byte of data it receives over the\nconnection established with it to be zeros, indicating message Type 0;\nit discards this byte unexamined, and thereafter, attaches no\nsignificance to IMP-message boundaries.  The second byte of data\nreceived is interpreted as flags specifying the format of the data\n(file) to follow.  The byte is interpreted as follows:\n\n     Bits 0-1 = 00:  file follows as Class A (stream-oriented)\n                     input.\n              = 01:  not defined, should not occur.\n              = 10:  file follows as Class B (variable-length\n                     record) input.\n              = 11:  file follows as Class C (fixed-length record)\n                     input.\n     Bits 2-7     :  not examined, should be zeros.\n\nOnce made, this declaration prevails for the life of the connection.\n\n     Regardless of the input class specified, the user transmits his\nfile as card images, each of which will be padded on the right with\nblanks or truncated on the right to 80 bytes if necessary.  The file\n\n\n\nWhite                                                           [Page 2]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\ntransmitted must be structured exactly as if it were being placed on\nthe card reader at the Computer Center.  A job card and all the other,\nusual JCL must be present for each job in the file (batching of jobs\nis permissible and is transparent to RJE).  For any job which requires\nthat special (non-resident) disk(s) and/or tape(s) to be mounted, a\nspecial JCL card must be inserted immediately after the job card for\nthat job, and it must have the format:\n\n        /*SETUP        vol-ser , vol-ser ,...\n                              1         2\n\nwhere 'vol-ser ' is the volume serial number of a volume requiring\n              i\nmounting.  '/*SETUP' begins in column 1; 'vol-ser ' must begin in\n                                                 1\ncolumn 16.  The job will then enter the System in a HASP hold status\nuntil the required volume(s) can be mounted by the operator.  If the\nuser neglects to declare all such required volumes, his job is subject\nto immediate cancellation.  All cards of the file which are not\ncontained in a SYSIN data set must consist of valid, EBCDIC\ncharacters.\n\nI.B.1 - Class A (Stream-Oriented) Input\n\n    If input to RJE has been declared as Class A, the third byte of data\nreceived over the connection by RJE is interpreted as a break character\ndeclaration.  Each byte received thereafter is compared to that\ncharacter.  Any other character is taken to be the next byte of the\ncurrent card image.  Whenever the break character is encountered, the\nprevious byte is taken to be the last byte of the current card image,\nwhich is then padded or truncated as required and passed to HASP.  Zero\nor more non-break characters may occur between occurrences of the break\ncharacter.  Thus when Class A input is specified, data transmitted to\nRJE shall have the following form:\n\n    1       1       1            variable         1\n+-------+-------+-------+  / +------//--------+-------+ \\\n|       |       | BREAK | /  |                | BREAK |  \\\n| x'00' | x'00' | CHAR. | \\  |  CARD  IMAGE   | CHAR. |  / ...\n+-------+-------+-------+  \\ +------//--------+-------+ /\n\nwhere the length of each field has been specified in bytes.  Zero or\nmore occurrences of the quantity in parentheses [angle brackets] may be\ntransmitted before the connection is closed by the user.\n\nI.B.2 - Class B (Variable-Length Record) Input\n\n     If input to RJE has been declared as Class B, then all input after\n\n\n\nWhite                                                           [Page 3]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\nthe initial two bytes is expected to consist of a contiguous string of\nvariable length records, each consisting of a one-byte op code (the op\ncode should be x'01'), a two-byte length field which specifies the\nunsigned length in bits of the variable-length text field which follows.\nThe text field may be zero or more bytes in length; the length field\nmust contain an integer which is a multiple of 8.  The text field\nrepresents one card image, which is padded or truncated by RJE as\nrequired and passed to HASP.  Thus when Class B input is specified, data\ntransmitted to RJE shall have the form:\n\n    1       1            1       2      L bits\n+-------+-------+  / +-------+-------+-----//-----+ \\\n|       |       | /  |       |       |    TEXT    |  \\\n| x'00' | x'80' | \\  | x'01' |   L   | card image |  / ...\n+-------+-------+  \\ +-------+-------+-----//-----+ /\n\nwhere the length of each field has been specified in bytes, except where\nstated to the contrary.  Zero or more occurrences of the quantity in\nparentheses [angle brackets] may be transmitted before the connection is\nclosed.\n\nI.B.3 - Class C (Fixed-Length Record) Input\n\n     If input to RJE has been declared as Class C, then all input after\nthe initial two bytes is expected to consist of a contiguous string of\nfixed-length, 80-byte card images.  Thus, when Class C input is\nspecified, data transmitted to RJE shall have the form:\n\n    1       1                  80\n+-------+-------+  / +--------------------+ \\\n|       |       | /  |                    |  \\\n| x'00' | x'C0' | \\  |     card image     |  / ...\n+-------+-------+  \\ +--------------------+ /\n\nwhere the length of each field has been specified in bytes.  Zero or\nmore occurrences of the quantity in parentheses [angle brackets] may be\ntransmitted before the connection is closed.\n\nII - Remote Job Output Retrieval (RJOR)\n\n     Class A SYSOUT output from jobs submitted through RJE for batch\nprocessing at UCSB may be obtained by contacting socket x'300', site 3,\nprovided that when the job was submitted, the character 'T' appeared as\nthe eighth positional accounting parameter on the job card.  Output is\nretrieved upon request and relayed to the Network user by a process\nhereafter called RJOR which is addressed as socket x'300'.  RJOR can be\ninvoked through the Logger.  This section is intended to provide\nprogrammers with the information necessary to communicate with RJOR.\n\n\n\nWhite                                                           [Page 4]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\n     RJOR conducts all Network transactions through the NCP, which\noperates under the Host-Host protocol of 3 August 1970.  RJOR expects\nthe first message it receives to be Type 0, discards the first byte,\nassuming it to be zeros, and thereafter for the life of the connection\ntakes no notice of IMP-message boundaries.  Similarly, the first message\nsent by RJOR is of Type 0: the first byte consists of zeros, and\nthereafter for the life of the connection, IMP-message boundaries are\nnot significant.\n\nII.A - Logging into RJOR\n\n     To obtain output from a batch-mode job, the Network user must\nestablish a full duplex connection with RJOR.  RJOR is core resident\nonly while in use (i.e., while control information or a file is being\ntransmitted to or from a user, or while RJOR is waiting for a previously\nrequested output file (or files)).  At all other times, it resides on\ndirect-access storage and must be invoked through the Logger.  A login\nsequence can always be initiated by requesting connection to socket\nx'300'.  If a connection request is made to that socket while another\nuser is being logged in, the NCP will queue the request.  After the\ncurrent connection is terminated, RJOR will listen for and accept the\nnext request (in any) in its queue; if no requests are queued for it and\nif it has fulfilled all of its output file requests, it will terminate\nexecution, releasing the main storage it occupied.  At times when RJOR\nis not in core, the Logger listens on socket x'300', and will reject the\nfirst call it receives, read RJOR into core, and dispatch it.  RJOR will\nthen listen on that socket.  Thus to initiate a login sequence, the user\nrequests connection to socket x'300'.  If accepted, he is in contact\nwith RJOR.  If rejected, he should reissue the connection request; when\naccepted, he will be connected to RJOR.  A second rejection would\nindicate that the NCP's resources were exhausted.  Once this first half\nof the required duplex connection has been established, RJOR will\nconsider the user logged in.\n\n     Over this first connection (hereafter called the Input Connection),\nthe user transmits flags designating the function(s) to be performed by\nRJOR, and the name of the job to which the function(s) is(are) to be\napplied.  RJOR then closes this connection.  RJOR transmits control\ninformation specifying the disposition of the user's request and the\noutput file (if requested) over a secondary connection involving RJOR's\nsocket number x'301', site 3, and the socket at the user's site whose\nsocket number is one less than that on which RJOR was contacted by the\nuser.  The user's request may or may not be immediately executable.  If\nthe former is the case, RJOR issues a connection request to the\ndesignated user receive socket, and when the connection is established\ntransmits whatever control information is appropriate along with the\nuser's output (if required); RJOR then closes the connection and the\nuser is considered logged out.  If the user's request cannot be\n\n\n\nWhite                                                           [Page 5]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\nimmediately satisfied (e.g., the job whose output is sought hasn't been\nsubmitted yet or hasn't finished execution), the second connection is\nopened by RJOR just long enough to inform the user of the delay, and\nthen closed.  Then when the request can be serviced, the connection is\nreopened, the required data transmitted, and the connection closed; the\nuser is then considered logged out.\n\n     To prevent RJOR from being monopolized by a single user, provision\nis made within the software for terminating a connection if RJOR is ever\nrequired to wait more than a certain amount of time for completion of a\ntransmission to or from the connected user.  For now, this time limit\nhas been set at one minute per record, but it may be shortened or\nlengthened as required in the future.\n\nII.B - The Input Connection\n\n     RJOR expects the first byte of data it receives over the Input\nConnection to be zeros, indicating message Type 0; it discards this byte\nunexamined, and thereafter, attaches no significance to IMP-message\nboundaries.  The second byte of data received is interpreted as flags\nspecifying the function(s) to be performed.  Following the flag byte,\nRJOR expects an eight-byte, EBCDIC job name, padded on the right with\nblanks if necessary.  The flag byte is interpreted as follows:\n\n     Bit 0 = 1:  transmit the output generated by the specified job.\n     Bit 1 = 1:  purge the output file created by the specified job.\n     Bit 2 = 1:  wait as long as is required to execute the\n                 function(s) specified by Bits 0-1.\n           = 0:  if the function(s) specified by Bits 0-1 cannot be\n                 executed immediately, simply return an indication of\n                 that fact.\n     Bit 3 = 1:  an earlier request pertaining to the specified job\n                 which exercised the wait-for-output (Bit 2) option\n                 is to be canceled.\n     Bits  4-7:  not examined, should be zeros.\n\nAny combination of Bits 0-2 is permissible.  If Bit 3 = 1, no other bits\nare examined.  If Bit 0 = 1 and Bit 1 = 1, the output file is\ntransmitted before it is purged.  If two jobs with the same name are\nexecuted in succession, output from the second job will overlay that\nproduced by the first.  In such cases, the user should purge the output\nfrom the first job after it has been transmitted to him so that a\nrequest for output from the second job will not simply return a second\ncopy of the first job's output.\n\nII.C - The Output Connection\n\n     RJOR may open the output connection either one or two times as the\n\n\n\nWhite                                                           [Page 6]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\nresult of a single transmission on the Input Connection.  In each case,\nthe first byte transmitted will consist of zeros indicating message Type\n0, and thereafter for the life of the connection, IMP-message boundaries\nare not significant.  Following the first byte, RJOR will transmit the\nname of the job to which the response applies.  The job name will be\ncontained in an 8-byte field identical to that supplied by the user over\nthe Input Connection.  Following the job name, RJOR will transmit zero\nor more variable length logical records.  Each will consist of a one-\nbyte op code, a two-byte length field which specifies the unsigned\nlength in bits of the variable length text field which follows.  The\ntext field may be zero or more bytes in length; the length field will\ncontain an integer which is a multiple of eight.\n\n     The op codes presently defined are listed in Figure 1.  An op code\nof x'01' indicates that the text field contains one record of one of the\nSYSOUT data sets created by the job whose output was requested.  The\nlength fields of all logical records with an op code of x'01' will be\nidentical.  For data sets with record lengths other than this value,\nrecords are padded on the right side with blanks or truncated on the\nright to this standard record length.  Carriage control characters which\nwould ordinarily appear in column 1 for printer-destined output have\nbeen discarded and do not appear.* The records are transmitted to the\nuser in the same sequence as they would be printed on the printer, and\ncollectively include everything that would appear in printed output with\nthe exception of HASP separator sheets.\n\n     In all logical records but those with an op code of x'01', the\nlength field contains the value zero, and the op code conveys the entire\nmeaning of the logical record.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n________________________________________________________________________\n*This restriction is temporary; a fix is in the works and will be\nannounced.\n\n\n\nWhite                                                           [Page 7]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\nFigure 1.  Output Connection Op Codes\n---------  --------------------------\n\nOp Code\n (Hex)    Name                   Explanation\n-------   ----                   -----------\n\n  00      End-of-File.           All output from the job has been\n                                 transmitted (follows last op-code-x'01'\n                                 logical record).\n  01      Output.                The text field contains one record of\n                                 one SYSOUT data set generated by the\n                                 job.\n  02      Output file purged.    Output from the job has been purged as\n                                 requested.\n  03      No core for buffer.    Insufficient main storage is available\n                                 for transmitting output from the job.\n                                 The transmission request has been\n                                 aborted and the purge request (if any)\n                                 has been suppressed.\n  04      I/O Error reading      An irrecoverable I/O error was\n          file.                  encountered reading the output file.\n                                 The transmission request has been\n                                 aborted and the purge request (if any)\n                                 suppressed.\n  05      I/O Error purging      An irrecoverable I/O error was\n          file.                  encountered purging the output file.\n                                 The purge request was aborted.\n  06      No queue space for     Output from the job was not available\n          request.               and the wait-for-output option was\n                                 specified, but RJOR's resources were\n                                 insufficient to queue the request,\n                                 which was suppressed.\n  07      Waiting for output.    Output from the job is not available\n                                 and the wait-for-output option was\n                                 specified.  RJOR is waiting for the\n                                 job's output.\n  08      Canceled request not   The user requested that a previously\n          found.                 made request specifying the\n                                 wait-for-output option be canceled.  No\n                                 such request was found by RJOR.\n  09      Request canceled.      At the user's request, a previously\n                                 made request specifying the\n                                 wait-for-output option has been\n                                 canceled.\n  0A      I/O Error seeking      An irrecoverable I/O error was\n          file.                  encountered attempting to locate output\n                                 from the job.  The user's request was\n\n\n\nWhite                                                           [Page 8]\n\f\nRFC 105                       RJE at UCSB                     March 1971\n\n\n                                 aborted.\n  0B      Output not found.      Output from the job was not found.  The\n                                 wait-for-output option was not\n                                 specified by the user.\n\n       [ This RFC was put into machine readable form for entry ]\n         [ into the online RFC archives by Randy Dunlap 4/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhite                                                           [Page 9]\n\f\n"
}