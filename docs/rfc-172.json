{
  "series": "Request for Comments",
  "number": "172",
  "howpublished": "RFC 172",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0172",
  "url": "https://www.rfc-editor.org/info/rfc172",
  "title": "The File Transfer Protocol",
  "pagetotal": "12",
  "year": "1971",
  "month": "jun",
  "body": "\n\n\n\n\n\nNetwork Working Group                           23 June 1971\nRequest for Comments #172                       Abhay Bhushan, MIT\nNIC 6794                                        Bob Braden, UCLA\nCategories: D.4, D.5, and D.7                   Will Crowther, BBN\nUpdates: 114                                    Eric Harslem, Rand\nObsolete: None                                  John Heafner, Rand\n                                                Alex McKenzie, BBN\n                                                John Melvin, SRI\n                                                Bob Sundberg, Harvard\n                                                Dick Watson, SRI\n                                                Jim White, UCSB\n\n\n\n\n\n\n\n\n\n\n\n\n                    THE FILE TRANSFER PROTOCOL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nNWG/RFC 172\n\n\nI. INTRODUCTION\n\n      The file transfer protocol (FTP) is a user-level protocol for file\ntransfer between host computers (including terminal IMP's), on the ARPA\ncomputer network. The primary function of FTP is to facilitate transfer\nof files between hosts, and to allow convenient use of storage and file\nhandling capabilities of other hosts. FTP uses the data transfer\nprotocol described in RFC 171 to achieve transfer of data. This paper\nassumes knowledge of RFC 171.\n\n      The objectives of FTP are to promote sharing of files (computer\nprograms and/or data), encourage indirect use (without login or\nimplicit) of computers, and shield the user from variations in file and\nstorage systems of different hosts, to the extent it is practical.\nThese objectives are achieved by specifying a standard file transfer\nsocket and initial connection protocol for indirect use, and using\nstandard conventions for file transfer and related operations.\n\nII. DISCUSSION\n\n      A file is considered here to be an ordered set of arbitrary\nlength, consisting of computer (including instructions) data. Files are\nuniquely identified in a system by their pathnames. A pathname is\n(loosely) defined to be the data string which must be input to the file\nsystem by a network user in order to identify a file. Pathname usually\ncontains device and/or directory names, and file names in case of named\nfiles. FTP specifications provide standard file system commands, but do\nnot provide standard naming convention at this time.  Each user must\nfollow the naming convention of the file system he wishes to use. FTP\nmay be extended later to include standard conventions for pathname\nstructures.[1]\n\n      A file may or may not have access controls associated with it.\nThe access controls designate the users' access privilege. In the\nabsence of access controls, the files cannot be protected from\naccidental or unauthorized usage. It is the prerogative of a resident\nfile system to provide protection, and selective access. FTP only\nprovides identifier and password mechanisms for exchange of access\ncontrol information. It should however be noted, that for file sharing,\nit is necessary that a user be allowed (subject to access controls) to\naccess files not created by him.\n\n      FTP does not restrict the nature of information in the file. For\nexample, a file could contain ASCII text, binary data computer program,\nor any other information. A provision for indicating data structure\n(type and byte size) exists in FTP to aid in parsing, interpretation,\nreconfiguration, and storage of data. To facilitate indirect usage, the\ncooperating file transfer processes may be disowned \"daemon\" processes\n\n\n\n                                                                [Page 2]\n\f\nNWG/RFC 172\n\n\nwhich \"listen\" to agreed-upon sockets, and follow the standard initial\nconnection protocol for establishing a full-duplex connection. It should\nbe noted that FTP could also used directly by logging into a remote\nhost, and arranging for file transfer over specific sockets.\n\n      FTP is readily extensible, in that additional commands and data\ntypes may be defined by those agreeing to implement them.\nImplementation of a subset of commands is specifically permitted, and an\ninitial subset for implementation is recommended.[2] The protocol may\nalso be extended to enable remote execution of programs, but no standard\nprocedure is suggested.\n\n      For transferring data, FTP uses the data transfer protocol\nspecified in RFC 171. As the data transfer protocol does not specify the\nmanner in which it is to be used by FTP, implementation may vary at\ndifferent host sites. Hosts not wishing to separate the data transfer\nand file transfer functions, should take particular care in conforming\nto the data transfer protocol specifications of RFC 171.\n\n      It should be noted, that FTP specifications do not require\nknowledge of transfer modes used by data transfer protocol. However, as\nfile transfer protocol requires the transfer of more than a single\ncontrol transaction over the same connection, it is essential that hosts\nbe able to send control transactions in either 'transparent block' (type\nB9) of 'descriptor and counts' (type BA) modes. (Type BB, the indefinite\nbit stream mode is not suitable as it limits transfer to singles\ntransactions.).\n\n      The use of data transfer aborts (type B6) is neither required, nor\ndefined in FTP. FTP has its own error terminate which may be used to\nabort a file transfer request. FTP also does not define the structure of\nfiles, and there are no conventions on the use of group, record and unit\nseparators.[3] A file separator is, however, used to indicate the end of\nfile. It is strongly recommended that default options be provided in\nimplementation to facilitate use of file transfer service. For example,\nthe main file directory on disk, a pool directory, user directory or\ndirectory last accessed could serve as standard pathname defaults.\nDefault mechanisms are convenient, as the user doesn't have to specify\nthe complete pathname each time he wishes to use the file transfer\nservice.\n\nIII. SPECIFICATIONS\n\n1.  Data Transfer\n\n   FTP uses the data transfer protocol described in RFC 171, for\n   transferring data and/or control transaction. Both data and control\n   transactions are communicated over the same connection.\n\n\n\n                                                                [Page 3]\n\f\nNWG/RFC 172\n\n\n2.  Data Transactions\n\n   Data transactions represent the data contained in a file. There is no\n   data type or byte size information contained in data transactions.\n   The structure of data is instead communicated via control\n   transactions. A file may be transferred as one or more data\n   transactions. The protocol neither specifies nor imposes any\n   limitations on the structure (record, group, etc) or length of file.\n   Such limitations may however be imposed by a serving host. The end of\n   a file may be indicated either by a file separator (as defined in\n   data transfer protocol), or by closing connection (in type B0). In\n   particular a serving or using host should not send the ETX, or other\n   end of file character, unless such a character is part of the data in\n   file (i.e., not provided by system).\n\n3.  Control Transactions\n\n   The control transactions may be typified as requests, identifiers,\n   and terminates.  A request fulfillment sequence begins with a request\n   and ends with receipt of data (followed by End-of-File) or a\n   terminate.\n\n3A. Op Codes\n\n   Control transactions are distinguished by their first byte referred\n   as op code. A standard set of opcodes is defined below.\n   Implementation of a workable[4] subset of opcodes is specifically\n   permitted. Additional standard opcodes may be assigned later. Opcodes\n   hex 5A (octal 100) through hex FF (octal 377) are for experimental\n   use.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\nNWG/RFC 172\n\n\n       Op Code                   Operation\n     Hex    Octal\n\n      00     000         Change data type identifier\n\n      01     001         Retrieve Request\n\n      02     002         Store request (replaced if file already\n                         exists)\n\n      03     003         Delete request\n\n      04     004         Rename_from request\n\n      05     005         Rename_to request\n\n      06     006         List_file_directory request\n\n      07     007         Username identifier\n\n      08     010         Password identifier\n\n      09     011         Error or unsuccessful terminate\n\n      04     012         Acknowledge or successful terminate\n\n      0B     013         Append request (add to existing file)\n\n\n      0C     014\n\n   through through       Reserved for standard assignment\n\n      4F     077\n\n\n      5A     100\n\n   through through       Reserved for experimental use\n\n      FF     377\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 5]\n\f\nNWG/RFC 172\n\n\n3B. Syntax and Semantics\n\n3B.1 Data Types\n\n   The 'change data type' control transactions identifies the structure\n   of data (data type and byte size) in succeeding data transactions.\n   This transaction shall contain two more bytes in addition to the\n   opcode byte. The first of these bytes shall convey a data type or\n   code information and the second byte may convey the data byte size,\n   where applicable. This information may be used to define the manner\n   in which data is to be parsed, interpreted, reconfigured or stored.\n   Change data type need be sent only when structure of data is changed\n   from the preceding.\n\n   Although, a number of data types are defined, specific\n   implementations may handle only limited data types or completely\n   ignore the data type and byte size descriptors. Even if a host\n   process does not \"recognize\" a data type, it must accept data (i.e.,\n   there is no such thing as a data type error.) These descriptors are\n   provided only for convenience, and it is not essential that they be\n   used. The standard default is to assume nothing about the information\n   and treat it as a bit stream (binary data, byte size 1)[5] whose\n   interpretation is left to a higher level process, or the user.\n\n   _________________________\n   * It is, however, possible that this bit stream is treated like\n   ASCII characters in specific instances such as transmitting a file\n   to a line printer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 6]\n\f\nNWG/RFC 172\n\n\n   The following data type codes are currently assigned. Where a\n   byte size is not implicit in data type, it may be provided by the\n   second byte.\n\n     Hex    Octal\n\n      00     000         1               Bit stream (standard default)\n\n      01     001       none              Binary data bytes\n\n      02     002         8               Network ASCII characters\n\n      03     003         8               EBCDIC characters\n\n      04     004        36               DEC-packed ASCII (five 7-bit\n                                         characters, 36th bit 1 or 0)\n\n      05     005         8               Decimal numbers, net. ASCII\n\n      06     006         8               Octal numbers, net. ASCII\n\n      07     007         8               Hexadecimal numbers, net. ASCII\n\n      08     010\n\n   through through                       Reserved for standard assignment\n\n      4F     077\n\n      5A     100\n\n   through through                       Reserved for experimental use\n\n      FF     377\n\n3B.2 Requests and Identifiers\n\n   Retrieve, delete, name_from, rename_t, and append requests contain a\n   pathname, following the op code, in the information field. A pathname\n   may also follow the opcode in list_file_directory request.\n\n   A pathname must uniquely identify a file in the serving host. The\n   syntax of pathnames and identifying information shall conform to\n   serving host conventions, except that standard network ASCII (as\n   defined in the TELNET protocol) shall be used.\n\n\n\n\n\n\n                                                                [Page 7]\n\f\nNWG/RFC 172\n\n\n   The store request has a 4-byte (32 bits) 'allocate size' field\n   followed by pathname. 'Allocate size' indicates the number of bits of\n   storage to be allocated to the file. A size of zero indicates that\n   server should use his default.\n\n   Retrieve request achieves the transfer of a copy of file specified in\n   pathname, from serving to using host. The status and contents of file\n   in serving host should be unaffected.\n\n   Store request achieves the transfer of a copy of file specified in\n   pathname, from using to serving host. If file specified in pathname\n   exists on serving hosts, then its contents shall be replaced by the\n   contents of the file being transferred. A new file is created at the\n   serving host, if the file specified in pathname does not exist.\n\n   Append request achieves the transfer of data from using to serving\n   host. The transferred data is appended to file specified in pathname,\n   at serving host.\n\n   Rename-from and rename-to requests cause the name of the file\n   specified in pathname of rename_from to be changed to the name\n   specified in pathname of rename_to. A rename_from must always be\n   followed by a rename_to request.\n\n   Delete request causes file specified in pathname to be deleted from\n   the serving host. If an extra level of protection is desired such as\n   the query \"Do you really wish to delete this file?\", it is to be a\n   local implementation in the using system. Such queries should not be\n   transmitted over network connections.\n\n   Username and password identifiers contain the respective identifying\n   information. Normally, the information will be supplied by the user\n   of the file transfer service. These identifiers are normally sent at\n   the start of connection.\n\n3B.3 Error and Acknowledge Terminates\n\n   The error transactions may have an error code indicated by the second\n   descriptor byte. Transmission of an error message in text is also\n   permitted. The following error codes are defined.\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 8]\n\f\nNWG/RFC 172\n\n\n     Error Code (2nd descriptor byte)           Meaning\n    Hex    Octal\n\n     00     000                 Error condition indicated by computer\n                                system (external to protocol)\n\n     01     001                 Name syntax error\n\n     02     003                 Access control violation\n\n     03     003                 Abort\n\n     04     004                 Allocate size too big\n\n     05     005                 Allocate size overflow\n\n     06     006                 Improper order for transactions\n\n     07     007                 Opcode not implemented\n\n     08     010                 File search failed\n\n     09     011                 Error described in text message\n                                (ASCII characters follow code)\n\nAt present, no completion codes are defined for acknowledge. It is\nassumed that acknowledge refers to the current request being\nfulfilled.\n\n4. Order of Transactions\n\n4A. A certain order of transactions must be maintained in fulfilling\n    file transfer requests. The exact sequence in which transactions\n    occur depends on the type of request, as described in section\n    4B. The fulfilling of a request may be aborted anytime by either\n    host, as explained in section 4C.\n\n4B. Identifier transactions (change data type, username, and password)\n    may be sent by user at any time. The usual order would be a\n    username transaction followed by a password transaction at the\n    start of the connection. No acknowledge is required, or\n    permitted. The identifiers are to be used for default handling,\n    and access control.\n\n\n\n\n\n\n\n\n                                                                [Page 9]\n\f\nNWG/RFC 172\n\n\n    Retrieve and list_file_directory requests cause the transfer of\n    file from server to user. After a complete file has been\n    transferred, the server should indicate end-of-file (by sending\n    CLS or file separator) to complete the request fulfillment\n    sequence, as shown below.\n\n          Read / List_file_directory request\n         -------------------------------------\u003e\n    User            \u003cFile -- data\u003e              Server\n         \u003c-------------------------------------\n                End of file indication\n         \u003c-------------------------------------\n\n    Store and append requests cause the transfer of file from user to\n    server. After a complete file has been transferred, the user\n    should send an end-of-file indication. The receipt of the file\n    must be acknowledged by the server, as shown below.\n\n    User          Store / Append request        Server\n         -------------------------------------\u003e\n                  \u003cFile -- data\u003e\n         -------------------------------------\u003e\n                  End of file indication\n         -------------------------------------\u003e\n                  Acknowledge\n         \u003c-------------------------------------\n\n    Rename_from request must be followed by a rename_to request. The\n    request must be acknowledged as shown below.\n\n    User          Rename_from request           Server\n         -------------------------------------\u003e\n                  Rename_to request\n         -------------------------------------\u003e\n                  Acknowledge\n         \u003c-------------------------------------\n\n    The delete request requires the server to acknowledge it, as shown\n    below.\n\n    User              Delete                    Server\n         -------------------------------------\u003e\n                    Acknowledge\n         \u003c-------------------------------------\n\n    Error transactions may be sent by either host at any time, and\n    these terminate the current request fulfillment sequence.\n\n\n\n\n                                                               [Page 10]\n\f\nNWG/RFC 172\n\n\n4C. Aborts. Either host may abort a request fulfillment sequence at\n    any time by sending an error terminate, or by closing the\n    connection (NCP to transmit a CLS for the connection). CLS is a\n    more drastic type of abort and shall be used when there is a\n    catastrophic failure, or when abort is desired in the middle of a\n    long transaction. The abort indicates to the receiving host that\n    sender of abort wishes to terminate request fulfillment and is now\n    ready to initiate or fulfill new requests. When CLS is used to\n    abort, the using host will be responsible for reopening\n    connection. The file transfer abort described here is different\n    from the data transfer abort which is sent only by the sender of\n    data. The use of the data transfer abort is not defined in this\n    protocol.\n\n6.  Initial Connection, CLS, and Access Control\n\n6A. There will be a preassigned permanent socket number[6] for the\n    cooperating file transfer process at the serving host. The\n    connection establishment will be in accordance with the standard\n    initial connection protocol[7], establishing a full-duplex\n    connection.\n\n6B. The connection will be broken by trading a CLS between the NCP's\n    for each of the two connections. Normally, the user will initiate\n    CLS.\n\n    CLS may also be used by either user or server, to abort a\n    transaction in the middle. If CLS is received in the middle of\n    transaction, the current request fulfillment sequence will be\n    aborted. The using host will then reopen connection.\n\n6C. It is recommended that identifier (user name and password)\n    transactions be sent by user to server , at the start, as this\n    would facilitate default handling and access control for the\n    entire duration of connection. The identifier transactions do not\n    require or permit and acknowledge, and the user can proceed\n    directly with requests. If the identifier information is incorrect\n    or not received, the server may send an error transaction\n    indicating access control, violation, upon subsequent requests.\n\nNOTES\n\n[1] Alex McKenzie, BBN, is conducting a survey of network file systems\nto determine the practicality of standard pathname conventions, and to\ndisseminate information to network users on host file systems.\n\n\n\n\n\n\n                                                               [Page 11]\n\f\nNWG/RFC 172\n\n\n[2] This initial subset represents control functions necessary for basic\nfile transfer operations, and some elementary file manipulation\noperations. There is no attempt to provide a data management or complete\nfile management capability.\n\n[3] It is possible that we may, at a later date, assign meaning to these\ninformation separators within FTP.\n\n[4] A workable subset is any request, plus terminates. Identifiers may\nbe required in addition when using protected file systems.\n\n[5] It is, however, possible that this bit stream is treated like ASCII\ncharacters in specific instances such as transmitting a file to a line\nprinter.\n\n[6] It seems that socket 1 has been assigned to logger. Socket 3 seems a\nreasonable choice for File Transfer.\n\n[7] RFC 165, or any subsequent standard applicable in initial connection\nto loggers.\n\n\n       [ This RFC was put into machine readable form for entry ]\n [ into the online RFC archives by Glenn Forbes Fleming Larratt 5/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                               [Page 12]\n\f\n"
}