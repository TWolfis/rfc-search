{
  "series": "Request for Comments",
  "number": "151",
  "howpublished": "RFC 151",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0151",
  "url": "https://www.rfc-editor.org/info/rfc151",
  "title": "Comments on a proffered official ICP: RFCs 123, 127",
  "pagetotal": "2",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\nNWG/RFC # 151                                                 A. Shoshani\n                                                              SDC\nNIC #6755                                                     May 10, 1971\n\n\n\n\n                   COMMENTS ON A PROFERRED OFFICIAL ICP\n                             (RFCs 123, 127)\n\n\n\n\n\nBob Long at SDC noticed that the order in which messages go out to the\nnetwork depend on the local NCP. In particular commands may be given\npriority over data and therefore in the sequence specified for server in\nRFC 123 (top of Page 3), the last two INIT commands may go out before the\ndata = S on socket = L is sent.  (This is the case in the current\nimplementation of SDC's NCP.) The implication is that the user's NCP should\nbe prepared to keep the INIT's it received from the server until the user\nprocess gets the data = S and issues two INITs in response.\n\nThis case is brought up now so that people will think about it before the\nAtlantic City meeting and comment whether their NCP can tolerate it. It may\nbe necessary to make it explicit in the ICP that the two INITs sent by the\nserver should go out only after the data = S is sent, or even after the\nuser process acknowledges its receipt.\n\nI have a more general remark about the ICP. This is a third level protocol\nand therefore should not alter or ignore procedures of the second level\nprotocol (Host-Host protocol). In particular three remarks seem\nappropriate:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKreznar                                                         [Page 1]\n\f\nRFC 19                                                      October 1969\n\n\n1. In RFC 123 (bottom of Page 2) it is suggested that the byte size for the\n   connection to the server socket L is 32. However, in the modifications\n   to second level protocol (RDC 107) it is specified that it is up to the\n   sending process to chose the byte size. According to the Host-Host\n   protocol, NCPs should be prepared to accept messages in any byte size\n   (1\u003c= size \u003c=255);  therefore there is no need to impose a size of 32 in\n   this case.  Furthermore, since it is up to the sender to choose the byte\n   size, some Hosts may choose a particular byte size (for simplicity and\n   convenience) and their NCP may not be geared to transmit in an imposed\n   byte size.\n\n2. In RFCs 66 and 80, an ALL is expected on the connection to the server\n   socket before data can be sent. In RFCs 123 and 127 the ALL requirement\n   disappeared.  But the ALL is a Host-Host protocol requirement and not\n   requiring it creates special case. A particular NCP implementation may\n   cause the ALL to be sent internally when a connection is created,\n   without the user process having control of it. Relaxing this requirement\n   will create a special case for the receiving NCP not to send the ALL and\n   for the sending NCP to send the data = S without first receiving an ALL.\n\n3. In RFC 127, I disagree with the comment \"send 32 bits of data in one\n   message\" because it is a second level protocol decision that a message\n   can be sent in any size pieces and the size is to be specified through\n   the ALL mechanism. In particular, there may be hosts which are not\n   prepared to accept more than few bytes at a time (TIPs).\n\nIn general we should not make second level decisions in a third level\nprotocol.\n\n\n\n\n\n\n        [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by BBN Corp. under the   ]\n        [ direction of Alex McKenzie.                   12/96   ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKreznar                                                         [Page 2]\n\f\n"
}