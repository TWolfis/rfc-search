{
  "series": "Request for Comments",
  "number": "304",
  "howpublished": "RFC 304",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0304",
  "url": "https://www.rfc-editor.org/info/rfc304",
  "title": "Data Management System Proposal for the ARPA Network",
  "pagetotal": "8",
  "year": "1972",
  "month": "feb",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        D. B. McKay\nRequest for Comments: 304                                            IBM\nNIC: 9077                                              February 17, 1972\nCategories: D3, D4, D7\nObsoletes: none\nUpdates:   none\n\n\n                   A Data Management System Proposal\n                          for the ARPA Network\n\nIntroduction\n\n   This proposal is being written to facilitate discussions on a design\n   for a network Data Management System.  It is not intended to be a\n   complete and exhaustive design for the ultimate protocol allowing\n   users to share data easily, but a frame work that will allow us to\n   recognize and develop the necessary tools in a unified manner\n   enabling the network to manage its resources to the best advantage to\n   the user.\n\n   The fundamental intent here is not to try and solve an impossible\n   problem, but to bring a necessary service capability to the user that\n   will enable him to carry out applications that hitherto he has not\n   been able to do.  The intent is to be consistent with every other\n   major function that has been developed in the network, i.e., NCP -\n   2nd level protocol, Telnet, and the Form Machine.  The Data\n   Management Service or Data Control Facility (DCF) will do the same\n   thing only on a high level of application building on those tools\n   that have already been developed in the network.\n\n   Data that is referred to and transmitted in this System will be\n   considered a special class of data that is called network data.  That\n   is, it is named and characterized through a network datalanguage and\n   all pertinent information as to where it can be located and what its\n   structure is kept in a network catalog.  Access to the data for its\n   actual transmission will be done through NCP socket addressable\n   routines in a manner similar to the way in which the SMFS at Santa\n   Barbara works.  It is feasible that the SMFS will become an active\n   resource utilized by the DCF.\n\nSystem Overview\n\n   There are six functionally and logically distinct areas that are\n   identifiable in the Network Data Service (Figure 1), with\n   subfunctions that can be categorized and discussed.\n\n\n\n\n\nMcKay                                                           [Page 1]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n      1. The user interface to the DCF.  In an interactive environment\n         such as the ARPA network, this interface would be serviced by\n         Telnet supporting the local user at his terminal directing the\n         request to the DCF.  The DCF in this case would be a\n         specialized server task.\n      2. The DCF or that functional unit responsible for coordinating\n         all the activity of the Network Data Service.  It also houses\n         the interfaces to all other functions.\n      3. The Network Catalog or Directory which contains all information\n         about network data.\n      4. The Data Reconfiguration Service or Form Machine that would be\n         called on when data translation or reconfiguration is needed.\n         This would be invoked automatically, when possible, by the DCF\n         and would remove this responsibility from the user.  For more\n         specialize translation, however, the user will still be able to\n         write programs for, and execute them on, the Form Machine.\n      5. The remote DCF or DCF' would contain enough function to\n         recognize the request being made of it by the DCF It would be a\n         server task to the DCF.\n      6. File xfer protocol would be a function that the DCF and the\n         DCF' would initiate as the means to control data transfer in\n         the network.\n\n   A more detailed discussion of each of these areas appears in the\n   following sections.\n\nUser Interface\n\n   It was stated in RFC146 that the DCF should handle all network\n   resources as a single resource and utilize it as best it can.  This\n   statement was also meant to incorporate the Data Computer and Unicon\n   storage as part of this resource.  The extent to which this can be\n   done is an open question but the use of the Data Language developed\n   by CCA would provide a consistent interface to the user utilizing\n   these network services and possibly facilitate the use of the Data\n   Compiler by the DCF.\n\n   It should be pointed out at this time that the DCF is a logical\n   function that can reside anywhere including on the Data Computer.\n\n   The user should be allowed to enter all command and updates\n   interactively to the DCF.  The DCF will be a serving user process\n   that will interface to the Telnet Server routine.  The actual data of\n   the terminal transmissions will be the commands and data the user\n   will be transmitting to the DCF.  By adopting the Telnet protocol as\n   the initial user interface, the DCF can be accessed by all the users\n   with Telnet.\n\n\n\n\nMcKay                                                           [Page 2]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n   The actual user commands and data itself is an area that requires\n   more investigation.  The following comments offer suggestions as to\n   what a final data language and manipulation language should do.\n\n   There are at least two logically distinct functions that must be\n   performed.  The actual defining and redefining of the data, and the\n   request for service such as catalog entry and request for\n   information.  This proposal is not intended to provide access to\n   every data base in the network; instead it is aimed at those files\n   that are catalogued and known to the DCF in the manner analogous to\n   the Data Computer's knowledge of its Data Base.\n\n   The following Data Description Concepts described in detail in CCA's\n   Data-language are also useful in the DCF.  First of all, the Data\n   Containers are groups of nested boxes.  The box represents the data\n   or other data containers that are kept in the box.  It represents a\n   named set of locations in some storage medium.  There are also\n   several types of data container such as STRING, INT, REAL, PTR,\n   ARRAY, LIST, STRUCT, and MIX.  Finally, each of these containers can\n   be named.  The name can also qualify the item of interest by a\n   concatenation of names to reflect the logical nesting of the\n   containers.\n\n   Although storage and retrieval mechanisms should be the same as those\n   proposed in the DL, initially it should not be necessary to implement\n   all the functions that filter and manipulate the data.  For example,\n   in an initial implementation of a DCF it would not be necessary to\n   provide the user with relational, boolean and computational\n   operators.  Users specifically interested in this type of service\n   could be directed to use the Data Computer under his own initiative,\n   or as a service of the DCF.\n\n   Several of the operators specified in the language are important and\n   must be considered in the DCF.\n\n   The following list represents key operators for a DCF with a brief\n   description of what each function is.  For a more detailed discussion\n   of each statement the reader should read the Datalanguage report by\n   CCA.\n\n   The assign operation places value into the containers with the\n   containers being single items or referencing other containers.\n\n   Subscripting allows selection by element number.  It is a powerful\n   tool for specifying, in large containers of data, the reference and\n   transmissions of only the necessary parts.  Files can be subsetted by\n\n\n\n\n\nMcKay                                                           [Page 3]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n   containerization referencing fields and records which can be further\n   classified by subscripting.  This subscripting function can be\n   further extended to include the DL's virtual list concept.\n\n   Maintenance of the files must be provided with the delete and add\n   function applied to the container referenced data.\n\n\n   A second consideration in a catalog is the question of how feasible\n   it would be to keep back-up or duplicate copies of network files.\n   This of course raises the question of a multiple copy update\n   protocol.  I feel the discussion and development of this protocol,\n   although important, can be postponed in lieu of keeping multiple\n   copies of files that are primarily read-only files.\n\n   For experimental reasons the DCF should have at least one data base\n   that is kept at different locations - possibly NIC, with the\n   capability of access anyone of them in the event of system failure at\n   other locations.  This is an important point, it exploits one of the\n   major advantages of a computer network namely more reliable data\n   accessibility.\n\n   Finally, the actual location of the network directory is an\n   interesting question.  In the interest of reliability it should be\n   kept at multiple locations.  The network directory can be logically\n   separated into two segments.  The local directory and distributed\n   directory.  Both parts refer to network data.  The local segment is\n   kept up-to-date relative to the network data that resides on that\n   system.  The network segment records the location of files that are\n   duplicated on other file systems and system pointers to references\n   made of remote single system files.\n\n   Updates can be made to the network segment on a periodic basis.\n   These updates will reflect changes in the local segments.  If we\n   consider \"read-only\" files distributed initially and local segments\n   reflecting the changes in local files, the need for simultaneous\n   update of multiple copies and network segments of the catalog becomes\n   much less critical.  Based on the two segment approach to the network\n   directory it seems most convenient to keep copies on all systems that\n   have localized network data.  This would include a catalog on the\n   Data Computer.\n\nData Conversion (Form Machine)\n\n   The Form machine represents an essential network function that can be\n   invoked by the DCF when necessary.  The Form Machine would be used in\n   the same manner it was intended to be used only now the DCF would\n   intervene in place of the user.  This would represent a common\n\n\n\nMcKay                                                           [Page 4]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n   interface to the network for the user.  Having the user use the\n   Datalanguage for file transfer and conversions would mean the DCF's\n   management of his Form machine Services.\n\n   The motivation behind the Form machine is consistent with a service\n   that should be provided in a network data sharing facility, namely,\n   application programs require different formats from program to\n   program and the network should adapt to the individual program\n   requirements.  This is also true of console configurations and\n   machine dependent data.\n\n   The modus operandi of the service is descriptions of data are\n   supplied by the application programmer in forms that the service\n   stores by name.  In the case discussed here the DCF would invoke the\n   data transformation on the network data stream by calling the forms\n   by name.  These would be a standard set of forms for machine\n   dependent data that would be written as part of a general\n   implementation of the DCF and would be invoked when necessary by the\n   DCF.\n\n   There are three conceptual connections to the Data Reconfiguration\n   Service (DRS).\n\n      1.   The critical connection between the originating user an the\n           DRS.  In this case it would be the DCF.  This raises the\n           question of how the user would communicate with the Form\n           Machine.  He could use normal procedures and the directory\n           to the DRS by Telnet or he could allow the DCF establish a\n           connection for him with his defined forms cataloged in the\n           network catalog automatically.\n   2.-3.   The other two connections are between the user process and\n           the serving process which are made by the DRS through the\n           NCP.\n\n   Since the Form Machine represents an invaluable service to the\n   network it is imperative that it reside in several locations with\n   user named forms available at each DRS location.  This will ensure\n   available service when needed.  However, having the DRS invoked by\n   the DCF raises two interesting areas of investigation.\n\n   The first is the question of the common interface that the network\n   presents to the user.  If the Datalanguage is to be the common\n   interface, then is it practical and feasible for a mapping service to\n   be performed by the DCF that will convert Datalanguage statement into\n   the proper parameters and statements necessary to the form machine?\n   This is an area that has to be discussed and further investigated.  I\n   would encourage anyone to submit an RFC on this subject.\n\n\n\n\nMcKay                                                           [Page 5]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n   The second question is a simple one and has to do with the question\n   of the file transfer protocol and whether or not it is sufficient to\n   handle the requirements for the form machine connections from a\n   remote location.\n\nFile Transfer Protocol (FTP)\n\n   The objectives of the FTP are to promote sharing of files, encourage\n   implicit (without explicit login) use of computers, and to shield the\n   user from variations in file and storage systems of various hosts.\n   The use of these related operation in the FTP by the DCF allows us to\n   extend these ideas to the restructuring and subfile level that was\n   discussed in the user interface section.\n\n   In addition, request can be made to any DCF on any system to retrieve\n   a file and transfer it to any other system.  This means not only that\n   implicit use of systems be encouraged but the user will be removed\n   from the burden of explicitly having his system linked to the system\n   transferring the file.  For example, if someone is running an\n   analysis program at BBN which may also have a DCF.  A request for a\n   file to be shipped to BBN from the Santa Barbara 75 could be made to\n   the DCF at BBN without the user having to communicate with the 75\n   directly.\n\n   The sending and receive connection would be initiated by the DCF with\n   the logical link between the two systems obeying the FTP.  The only\n   modification I can see in the FTP that would be necessary is an\n   acknowledgement to the commands sent to the sending and receiving\n   sites by the DCF.  In addition, an acknowledgement to the end of file\n   indication would be sent to the sending system and to the DCF.  The\n   rename from, rename to, delete and list request would be transmitted\n   by the DCF directly with all acknowledgments being returned to it.\n\n   The remote DCF and DCF' mentioned earlier would recognize and handle\n   all the FTP messages.  In addition, it would recognize requests being\n   made for a particular container or subset of the data.  It should be\n   able to recognize the information given to it, access the data\n   requested and be able to strip off the necessary information\n   requested and transmit it.\n\n   The complexity of the DCF' would depend on the amount of functional\n   capability that was incorporated into the network portion of the\n   Data-language.\n\n\n\n\n\n\n\n\nMcKay                                                           [Page 6]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\nConclusion\n\n   This paper is intended to promote ideas and discussion in all of the\n   areas mentioned.  The principle outcome is to start a coordinated\n   specification and implementation effort to provide data sharing in\n   the network.\n\n                                                   ,---------------.\n                                                   |               |\n                                                   |      DCF'     |\n                                         Sending   |               |\n                                           Host    `---------------'\n                                            \\              ^           /\n                                             \\_____________|__________/\n                                                           |\n                                            /              |    ^\n                                      File /               |    |\n                                     Xfer /                |\n                                Protocol /             DRS |    |\n                                        /         Protocol |\n                                       /                   |    |\n                                      /                    |\n,----------.        /\\    ,---------./       /\\    ,------------|--.\n|          |       /  \\   |         |       /  \\   |               |\n| TELNET   |---\\  /    ---|  DCF    |---\\  /    ---|      DRS   |  |\n|          |    \\/        |         |    \\/        |               |\n`----------'              |         |\\             `------------|--'\n   ^                      `---------' \\File                |\n   |                         ^  |      \\Xfer           DRS |    |File\n   |                         |  |       \\Protocol Protocol |     Xfer\n   v                         |  v        \\                 |    |Proto-\n,----------.              ,---------.     \\                |     col\n| USER     |              |         |      \\               |    |\n| TERMINAL |              | CATALOG |       \\              |    v\n|          |              |         |        \\ _______________________\n`----------'              `---------'         /            |          \\\n                                             /             v           \\\n                                        Receiving  ,---------------.\n                                          Host     |               |\n                                                   |      DCF'     |\n                                                   |               |\n                                                   `---------------'\n\n                          Network Data Service\n                             System Overview\n\n                                Figure 1\n\n\n\n\nMcKay                                                           [Page 7]\n\f\nRFC 304        A Data Management System Proposal for ARPA  February 1972\n\n\n   The keyword statements of the language are important for data\n   manipulation and transfer.  These keywords will initiate entry of\n   information into the net catalog and access the physical data located\n   at the various systems.  Most of these keyword commands would be\n   directed to the remote systems as part of the file transfer protocol.\n\n   Some examples of the keywords incorporated by the DL are, CREATE,\n   DELETE, OPEN, TRANS, CLOSE, and DEFINE.\n\nNetwork Catalog and Directory\n\n   The actual structure of the network catalog should be fairly\n   straight-forward.  It will contain all the information necessary to\n   retrieve data files and designated subsets of those files.  Initially\n   the catalog need not contain all the information one would hope to\n   have such as authorization for use, access, or update, therefore it\n   is imperative that the catalog be an open ended structure that can be\n   easily added to.\n\n   The primary purpose of the network catalog will be to store all\n   network data file structure information that the user has entered via\n   the Data-language.  It must also contain an indication of how the\n   users logical description of his file is associated with the actual\n   physical file and location.  This physical information must contain\n   the proper pointers and addresses to actually retrieve the data.\n   Since the class of files we will be dealing with are network files\n   that will be accessible by the network user function such as SMFS,\n   the addressing information can be pathnames as suggested in the\n   Rename Convention in the file transfer protocol.\n\n\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n       [ into the online RFC archives by Mirsad Todorovac 11/98]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMcKay                                                           [Page 8]\n\f\n"
}