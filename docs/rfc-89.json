{
  "series": "Request for Comments",
  "number": "89",
  "howpublished": "RFC 89",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0089",
  "url": "https://www.rfc-editor.org/info/rfc89",
  "title": "Some historic moments in networking",
  "pagetotal": "7",
  "year": "1971",
  "month": "jan",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        B. Metcalff\nRequest for Comments: 89                                           MITDG\nNIC: 5697                                                19 January 1971\n\n\n                  SOME HISTORIC MOMENTS IN NETWORKING\n\n   While awaiting the completion of an interim network control program\n   (INCP) for the MIT MAC Dynamic Modeling/Computer Graphics PDP-6/10\n   System (MITDG), we were able to achieve a number of 'historic moments\n   in networking' worthy of some comment.  First, we were able to\n   connect an MITDG terminal to a Multics process making it a Multics\n   terminal.  Second, we successfully attached an MITDG terminal to the\n   Harvard PDP-10 System thereby enabling automatic remote use of the\n   Harvard System for MIT.  Third, we developed primitive mechanisms\n   through which remotely generated programs and data could be\n   transmitted to our system, executed, and returned.  Using these\n   mechanisms in close cooperation with Harvard, we received graphics\n   programs and 3D data from Harvard's PDP-10, processed them repeatedly\n   using our Evans \u0026 Sutherland Line Drawing System (the E\u0026S), and\n   transmitted 2D scope data to Harvard's PDP-1 for display.\n\nThe IINCP\n\n   Our experiments were run on the MITDG PDP-6/10 using what we have\n   affectionately called our 'interim interim NCP' (IINCP).  Under the\n   IINCP the IMP Interface is treated as a single-user I/O device which\n   deals in raw network messages.  The software supporting necessary\n   system calls includes little more than the basic interrupt-handling\n   and buffering schemes to be used later by the NCP.  In short, the\n   user-level programs which brought us to our historic moments were\n   written close to the hardware with full knowledge of IMP-HOST\n   Protocol (BBN 1822).  When the INCP and NCP are completed, these\n   programs can be pruned considerably (80%).  The exercise of writing\n   programs which conform to IMP-HOST Protocol was not at all wasted.\n   Only now can those of us who are not writing the NCP begin to grasp\n   the full meaning of RFNM's and their use in flow control.  The\n   penalties for ignoring an impatient IMP, for failing to send NOOPS\n   (NO-OPS) when starting up, and for blasting data onto the Network\n   without regard for RFNM's are now well understood.\n\nThe Multics Connection\n\n   Our quest for historic moments began with the need to demonstrate\n   that the complex hardware-software system separating MITDG and\n   Multics was operative and understood.  A task force (Messrs. Bingham,\n\n\n\n\n\nMetcalff                                                        [Page 1]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\n   Brodie, Knight, Metcalfe, Meyer, Padlipsky and Skinner) was\n   commissioned to establish a 'polite conversation' between a Multics\n   terminal and an MITDG terminal.\n\n   It was agreed that messages would be what we call 'network ASCII\n   messages': 7-bit ASCII characters right-adjusted in 8-bit fields\n   having the most significant bit set, marking, and padding.  In that\n   Multics is presently predisposed toward line-oriented half-duplex\n   terminals, it was decided that all transmissions would end with the\n   Multics EOL character (ASCII \u003cLINE FEED\u003e).  To avoid duplicating much\n   of the INCP in our experiment, the PDP-10 side of the connection was\n   freed by convention from arbitrary bit-stream concatenation\n   requirements and was permitted to associate logical message\n   boundaries with network message boundaries (sic).  The 'polite\n   conversation' was thus established and successful.\n\n   Multics, then, connected the conversation to its command processor\n   and the PDP-10 terminal suddenly became a Multics terminal.  But, not\n   quite:\n\n   First, in the resulting MITDG-Multics connection there was no\n   provision for a remote QUIT, which in Multics is not an ASCII\n   character.  This is a problem for Multics.  It would seem that an\n   ASCII character or the network's own interrupt control message could\n   be given QUIT significance.\n\n   Second, our initial driver program did not provide for RUBOUT.\n   Because the Multics network input stream bypassed the typewriter\n   device interface module (TTYDIM), line canonicalization was not\n   performed.  In a more elegant implementation, line canonicalization\n   could be done at Multics, providing the type-in editing conventions\n   familiar to Multics users.  We fixed this problem hastily by having\n   our driver program do local RUBOUT editing during line assembly, thus\n   providing type-in editing conventions familiar to MITDG users.  It is\n   clearly possible to do both local type-in editing and distant-host\n   type-in editing.\n\n   Third, we found that because of the manner in which our type-in\n   entered the Multics system under the current network interface (i.e.\n   not through TTYDIM), our remotely controlled processes were\n   classified 'non-interactive' and thus fell to the bottom of Multics\n   queues giving us slow response.  This problem can be easily fixed.\n\nThe Harvard Connection\n\n   Connecting MITDG terminals to Multics proved to be easy in that the\n   character-oriented MITDG system easily assembled lines for the\n   Multics line-oriented system.  We (Messrs. Barker, Metcalfe) decided,\n\n\n\nMetcalff                                                        [Page 2]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\n   therefore, that it would be worthwhile to connect the MITDG system to\n   another character-oriented system, namely Harvard's PDP-10.  This\n   move was also motivated by MITDG's desire to learn more about\n   Harvard's new language system via MITDG's own consoles.\n\n   It was found that Harvard had already provided an ASCII network\n   interface to their system which accepted IMP-Teletype style messages\n   as standard.  We quickly rigged up an IMP-Teletype message handler at\n   MITDG and were immediately compatible and connected.  But not quite:\n\n   First, Harvard runs the Digital Equipment Corporation (DEC) time-\n   sharing system on their PDP-10 which has \u003ccontrol-C\u003e as a QUIT\n   character and \u003ccontrol-Z\u003e as an end-of-file (EOF).  MITDG runs the\n   MAC Incompatible Time-sharing System (ITS) which has \u003ccontrol-Z\u003e as a\n   QUIT character and \u003ccontrol-C\u003e as an EOF.  This control character\n   mismatch is convenient in the sense that typing \u003ccontrol-C\u003e while\n   connected to Harvard system through MITDG causes the right thing to\n   happen - causes the execution of programs at Harvard to QUIT, as\n   opposed to causing the driver program at MITDG to QUIT.  If, however,\n   a Harvard program were to require that an EOF be typed, typing\n   \u003ccontrol-Z\u003e would cause ITS to stop the driver program in its tracks,\n   leaving the Harvard EOF wait unsatisfied and the MITDG-Harvard\n   connection severed.\n\n   Second, the Harvard system has temporarily implemented this remote\n   network console interface feature using a DEC style pseudo-teletype\n   (PTY).  This device vis-a-vis the DEC system behaves as a half-duplex\n   terminal which wakes up on a set of 'break characters' (e.g., return,\n   altmode) affording us an opportunity for an interesting experiment.\n   The use of DDT (Dynamic Debugging Tool) is thereby restricted (though\n   not prevented) in that break characters must be scattered throughout\n   a DDT interaction to bring the PTY to life to cause DDT to do the\n   right thing.  For example, to examine the contents of a core location\n   one needs to type 'addr\u003caltmode\u003e' (address slash altmode) the altmode\n   being only a call-to-action to the PTY.  To alter the contents of the\n   opened location, one must then type '\u003crub-out\u003econtents\u003creturn\u003e'; the\n   \u003crub-out\u003e character deletes the previous action \u003calt-mode\u003e, the\n   contents are stashed in the open address, and the \u003creturn\u003e signals\n   the close of the address and PTY wake-up.  It would seem that DDT is\n   a program that will separate the men form the boys in networking.\n\n   Third, it was found that the response from the Harvard system at\n   MITDG was seemingly as fast as could be expected from one of their\n   own consoles.  This fact is particularly exciting to those who don't\n   have a feel for network transit times when it is pointed out that\n   such response was generated through two time-sharing systems, three\n   user level processes, and three IMPs, all connected in series.\n\n\n\n\nMetcalff                                                        [Page 3]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\nThe Harvard-MIT Graphics Experiment\n\n   At Harvard are a PDP-10 Time-sharing System and a graphics oriented\n   PDP-1, both connected to Harvard's IMP.  At MITDG are a PDP-6/10\n   Time-sharing System and an E\u0026S Line Drawing System.  It was felt\n   (Messre. Barker, Cohen, McQuillan, Metcalfe, and Taft) that the time\n   had come to demonstrate that the network could make remote resource\n   available - to give Harvard access to the E\u0026S at MITDG via the\n   network.  The protocol for such use of the network was as follows:\n   (1)  MITDG starts its network monitor program listening.  (2)\n   Harvard starts its PDP-10 transmitting a core image containing an\n   arbitrary PDP-10 program (with an embedded E\u0026S program in this case).\n   (3)  MITDG receives the core image from Harvard and places it in its\n   memory at the starting address specified, collecting messages and\n   concatenating them appropriately.  (There was no word-length mismatch\n   problem.)  (4) Upon collecting a complete image (word count sent\n   first along with starting address), MITDG stashes its own return\n   address in a specified location of the transmitted program's image\n   and transfers control to another image location.  (5)  Upon getting\n   control at MITDG, the transmitted program executes (in this case sets\n   up and runs an E\u0026S program) and before returning to the MITDG network\n   monitor stashes in specified locations of its image the beginning and\n   ending addresses of its result.  (6)  With control returned, the\n   MITDG monitor program then transmits the results to a listening host\n   which makes good use of them (in this case a PDP-1 which displays\n   them).  (7)  Then the MITDG program either terminates, returns\n   control back to the image (as in this case), or waits for more data\n   and/or program.  The protocol was implemented in the hosts and used\n   to run a Harvard-assembled version of the E\u0026S Aircraft Carrier\n   Program (written originally by Harvard's Prof. Cohen) at MITDG and to\n   display the resulting dynamic display on Harvard's PDP-1 driven DEC\n   scopes.  The Carrier Program was 'flown' from MITDG and the changing\n   views thus generated appeared both at MITDG and Harvard.  The picture\n   was observed to change (being transmission limited) on the order of\n   twice each second (perhaps less often).  But all was not rosey:\n\n   First, it was observed that during the experiment prompting messages\n   to the IMP-Teletypes were often garbled.  Most of the garbling can be\n   attributed to the ASR-33 itself, some cannot.  There were no errors\n   detected during data transmissions not involving the IMP-Teletypes.\n\n   Second, during attempts to fly the Carrier from Harvard, we stumbled\n   across a yet undiagnosed intermittent malfunction of (presumably) the\n   MITDG hardware and/or software which caused our network connection to\n   be totally shut down by the system during bi-directional\n   transmission.  This problem is currently under investigation.\n\n\n\n\n\nMetcalff                                                        [Page 4]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\n   Third, the response of the total system was slow compared to that\n   required to do real-time dynamic graphics.  One would expect that if\n   this limitation is to be overcome, higher bandwidth transmission\n   lines, faster host response to network messages, and/or perhaps a\n   message priority system will be required.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMetcalff                                                        [Page 5]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\n36-Bit Words Transmitted\nFrom Harvard's PDP-10 to\nMITDG's PDP-10\n                     +---------------+---------------+ Image control\n                     |     -count    |    origin-1   | word.\n                     +---------------+---------------|-\n        Image:       |    start address of results   | | Filled in by\n                     +-------------------------------+  -Harvard's\n        Image+1:     |     end address of results    | | program during\n                     +-------------------------------+-  its execution.\n        Image+2:     |   ---------unused-----------  |  +--        -+\n                     +-------------------------------+  |Filled in  |\n        Image+3:     |      program stop address     |\u003c-|by MITDG   |\n                     +-------------------------------+  |for return |\n        Image+4:     |     program start address     |  |of control.|\n                     +-------------------------------+  +--       --+\n        Image+5:     |                               |\n                     +-------------------------------+\nImage control word   |                               |\nand image arrive in  |                               |\nnetwork size buffers |                               |\nwhich are stripped of|                               |\nmarking and padding  |                               |\nand concatenated.    |                               |\n                     +-------------------------------+\n\n\n36-Bit Words Transmitted\nFrom MITDG's PDP-10 to\nHarvard's PDP-1\n                      +---------------+---------------+\n                      |               |    count      |\n                      +---------------+---------------+\nFirst word of results |                               |\nSpecified in Image+0. |                               |\n                      |      results                  |\n                      |                               |\n                      |                               |\n                      |                               |\n                      |                               |\n                      |                               |\n                      |                               |\nLast word of results  |                               |\nspecified in Image+1. |                               |\n                      +-------------------------------+\n\n\n\n\n\n\nMetcalff                                                        [Page 6]\n\f\nRFC 89            SOME HISTORIC MOMENTS IN NETWORKING    19 January 1971\n\n\nGeneral Comments\n\n   In producing 'network ASCII messages' we were required to bend over\n   backwards to insert marking so that our last data bit could fall on a\n   word boundary.  Surely there must be a better way.  The double\n   padding scheme and its variants with or without marking should be\n   considered.  Given the current hardware, it would seem that double\n   padding with marking would be an improvement.  A simple(?) fix to\n   host IMP interfaces enabling them to send only good data from a\n   partially filled last word would permit a further improvement:\n   marking and host-supplied single padding.\n\n   In these initial experiments Harvard used the IMP-Teletype message\n   convention or what are call 'IMP ASCII messages' (without marking)\n   because it would allow them to use IMP-Teletypes for logging in and\n   testing.  Multics, on the other hand, used the standard network\n   message format (with marking) to have Host-Host compatibility as per\n   accepted protocols.  Both approaches have merit.  The IMP-Teletype\n   message format should be changed to conform with the network standard\n   - it should have marking.\n\n   Finally, we would like to announce our readiness to participate in\n   experiments which will further extend our confidence and competence\n   in networking, especially experiments which, like the preceding, will\n   have very large returns with relatively small investment.\n\nRoster of those participating\n\n   Ben Barker              Harvard, BBN\n   Grenville Bingham       MITDG\n   Howard Brodie           MITDG\n   Dan Cohen               Harvard\n   Tim Knight              MITDG, MIT/AI\n   John McQuillan          Harvard\n   Bob Metcalfe            MITDG, Harvard\n   Ed Meyer                Multics\n   Mike Padlipsky          Multics\n   Tom Skinner             Multics\n   Ed Taft                 Harvard\n\n\n          [This RFC was put into machine readable form for entry]\n          [into the online RFC archives by Lorrie Shiota, 10/01]\n\n\n\n\n\n\n\n\nMetcalff                                                        [Page 7]\n\f\n"
}