{
  "series": "Request for Comments",
  "number": "97",
  "howpublished": "RFC 97",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0097",
  "url": "https://www.rfc-editor.org/info/rfc97",
  "title": "First Cut at a Proposed Telnet Protocol",
  "pagetotal": "11",
  "year": "1971",
  "month": "feb",
  "body": "\n\n\n\n\n\nNETWORK WORKING GROUP                                           NIC 5740\nRequest for Comments #97                                  John T. Melvin\n                                                       Richard W. Watson\n                                                                 SRI-ARC\n                                                        15 February 1971\n\n\n               A FIRST CUT AT A PROPOSED TELNET PROTOCOL\n\n1    Introduction\n\n       This paper describes a first cut at a proposed Telnet protocol.\n   _Telnet_ is a process which runs at a _user's_ _site_ and allows him\n   to utilize a typewriter-like terminal to gain interactive service\n   from a remote _server_ _site over the ARPA Network.  This paper was\n   motivated by our need to set specifications for a protocol which\n   would allow online access to the Network Information Center (NIC).\n   The Online System running at the Network Information Center we will\n   refer to as NLS(NIC).  On thinking about the problem of setting\n   specifications for access to the NIC, we have tried to generalize our\n   ideas so that they would apply to other systems with characteristics\n   similar to ours.  We realize that there are other terminal hardware-\n   software disciplines which might find it difficult to conform to all\n   the requirements stated here and, therefore, the final Telnet\n   protocol will differ from the one stated in this NWG/RFC.  One\n   conclusion that we may all have to come to is that connection with\n   the network may force us toward a more standard way of handling\n   terminals and their character streams in our monitors and terminal\n   control hardware.  In the meantime, we hope that this paper and\n   others on the same subject that may be in process, coupled with a\n   survey of hardware-software requirements at each site by a NWG\n   subgroup, can result in an initial standard network Telnet protocol\n   being agreed upon quickly, as it is important to get users onto the\n   network as soon as possible so that interactive network usage can\n   indicate further directions for network protocol evolution.  Next we\n   outline some design problems, then propose some conventions to solve\n   these problems for access to systems such as the NLS(NIC) and\n   indicate some problems needing further study.  The proposed\n   conventions for access to the NLS(NIC) are summarized in Appendix A.\n\n2    Some Design Problems\n\n   2A.  Basic Assumption\n\n        The function of the Telnet process is to make a terminal at a\n   user site appear over the network as logically equivalent to a\n   terminal \"directly\" connected to the server site.  There are a number\n   of implications of this basic function.\n\n\n\nMelvin \u0026 Watson                                                 [Page 1]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n      i) The user should be able to cause generation of all codes which\n      a server system terminal can generate.  With respect to the\n      Network Information Center and some other sites it would seem a\n      reasonable requirement to have keying conventions so that the user\n      can generate all 128 ASCII character codes as input to the\n      network.  Other sites with different character codes may require a\n      Telnet process to provide those codes to the network.\n\n      ii) The user should be able to escape back to his local system or\n      escape from the server process to the server system.\n\n      iii) The Telnets  of line-at-a-time systems should be able to work\n      with character-at-a-time systems and line-at-a-time systems and\n      Telnets  of character-at-a-time systems should be able to work\n      with line-at-a-time and character-at-a-time systems.\n\n   2B   Echo Control\n\n        We use the term echo control rather than the terms half duplex\n   or full duplex because the Telnet connection is in reality full\n   duplex with respect to network transmissions.  Three terminal cases\n   need to be considered.\n\n      Case 1 - Character-at-a-time serving site echoed\n\n      Case 2 - Character-at-a-time user site echoed\n\n      Case 3 - Line-at-a-time user site echoed\n\n   Some serving sites may be able to operate with all three cases and\n   some convention is required to set the mode.  Strictly speaking, what\n   characters are echoed for what keys struck is of no concern to the\n   serving site, although one would like to try to minimize differences\n   in typescript as it appears to the user.\n\n   2C   Format Control Characters\n\n        The format control characters of horizontal tab (HT), vertical\n   tab (VT), form feed (FF), line feed (LF), and carriage return (CR),\n   need to be handled in a consistent way for Cases 2 and 3 above.  With\n   Case 1 above, the situation is simplified.\n\n   2D   Network Message Boundaries\n\n        The NCP to NCP protocol was specified with the goal of having\n   the network message boundaries being invisible to the user processes.\n   It would be good if this goal could be maintained, but it may be\n   difficult with some line-at-a-time systems.\n\n\n\nMelvin \u0026 Watson                                                 [Page 2]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n   2E   An Implementation Convention\n\n        ConVentions to solve the above problems are most simply\n   established if we assume that the character stream received from a\n   Telnet process by the server site is entered into that point in the\n   server monitor where character input from \"direct1y\" connected\n   terminals is entered and output from the server process is entered\n   into the monitor point where normal character output is entered.  The\n   server NCP receives its input at the point where normal monitor\n   character output is obtained.  In other words, the server process\n   would obtain its input from the server monitor character buffers and\n   send its output to these buffers rather than obtainIng input directly\n   from NCP buffers or outputting to NCP buffers.\n\n        The Telnet process, on the other hand, would obtain and send\n   character streams directly from or to its local NCP.\n\n        Other situations exist where the user processes at both ends\n   communicate directly with the NCP.  Therefore, we would recommend\n   that both modes of connection (user process-monitor-NCP, or user\n   process-NCP) be available for communication between the NCP and a\n   user process.  These modes would be set under program control by the\n   user process.  The initial network convention during the login\n   procedure and until changed by the server process would be to obtain\n   characters from and send characters to the monitor.  The server NCP\n   communicates with the monitor also.  The scheme is illustrated in\n   Figure 1.\n\n        The motivation for such flexibility may be clearer from the\n   discussion below.\n\n3    Proposed Telnet Conventions\n\n   3A   The server site is to assume initially that echoing is performed\n   by a user site process until explict1y commanded otherwise.  If the\n   user site can send character-at-a-time, then after connection and\n   login have been established, tne user could switch Lo server-site-\n   echo by command to the server site and then command (invisible to the\n   server site) his local Telnet to change its echo mode also.\n\n   3B   The server process is to assume it will receive the same\n   character set which terminals \"directly\" connected to it can\n   generate.  (We recommend at least 128 character ASCII.)  The user's\n   Telnet may have to recognize two-character sequences to enable\n   generation of both upper and lower-case codes and the control codes.\n   We recommend that the user be able to set either upper or lower case\n   as the default case for single case terminals and be able to specify\n   a case shift character.  The user should also be able to specify a\n\n\n\nMelvin \u0026 Watson                                                 [Page 3]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n   character to indicate that the next character struck is to be\n   converted to the appropriate control character code.  This latter\n   convention enables control codes directly generated at the terminal\n   to be recognized by the user's system thus enabling escape to the\n   user system.  Creating a convention allowing all control codes to\n   enter the network and allowing output of the network to feed into the\n   server monitor before entering the server process, gives a simple\n   mechanism for generating an escape to     many existing systems.\n   (The problem is more complicated than this for some systems and we\n   discuss it further below.)\n\n   3C   We recommend that network standards be established for the\n   meaning of local echoes of HT, VT, and FF or a convention to be\n   established for sending the meaning of these characters to the server\n   process.  The NLS(NIC), for example, needs to keep track of the\n   position of the print head and in the absence of such conventions\n   will convert these character codes to spaces and line feeds.  This\n   means that the appearance of the page on output may differ from the\n   appearance on input.  It would be helpful to the user if his page on\n   output could be formatted as it appeared on input.\n\n   3D   LF characters would be handled as if they were generated by\n   hitting the line feed key on a terminal \"directly\" connected to the\n   server system.\n\n   3E   The carriage return (CR) character can be the source of\n   considerable difficulty.  For example, on input, different systems\n   and the same system at different times, can echo and transmit\n   different codes to the terminal and the user process.  Some monitor\n   systems echo nothing, just a CR, or a CRLF.  Some systems transmit a\n   CR, CRLF, or end of line code (EOL) to the user process.  The user\n   process may control the echo or add to it.  Given the combinations\n   which can exist at each end of the network connection and with\n   respect to each other, confusion can exist unless we assume the\n   definition of 2A and the implementation convention of 2E.  These\n   assumptions imply that when a CR is struck, a CR gets sent over the\n   network.  If the user monitor system or terminal control hardware\n   converts a CR to a CRLF or EOL, then the Telnet program must convert\n   it back to a CR.  When the CR reaches the server monitor it will\n   handle it properly for the server process.\n\n        When echoing is handled by the server system, the proper code or\n   codes will be echoed.  The user Telnet on receiving a CRLF can pad it\n   with the proper nulls to handle carriage movement timing for a\n   particular terminal.\n\n        When echoing is handled by the user system it would be ideal if\n   the user's Telnet or system used the same echo convention as the\n\n\n\nMelvin \u0026 Watson                                                 [Page 4]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n   server system would.  This means that either the Telnet must have a\n   table of echo conventions for the various systems to which it can\n   connect, or that it can obtain this information from the server\n   system or process, or vice versa.\n\n        For an initial Telnet protocol this is probably not necessary.\n   The user system can default and echo a CRLF on each CR received.\n   This default should be satisfactory for all the situations we are\n   familiar with and for the NIC.\n\n   3F   For communication from character- and line-at-a-time systems,\n   the Telnet process may need to recognize a character (user\n   assignable) which we call end of stream (EOS).  This character is to\n   have the function defined in the following discussion.  The important\n   point is to distinguish end-of-stream as a network function and end-\n   of-line as a user or server system function.  Consider line-at-a-time\n   systems first.  We have not had much experience with line-at-a-time\n   systems, so what follows will need further study and clarification.\n   As we understand it, line-at-a-time systems recognize a character\n   such as CR or a break signal as the code to wake up the user process\n   and cause transmission to it of the line of text.  From the point of\n   view of NLS(NIC) it is important that the user be able to enter lines\n   of text each terminated by a CR where appropriate and at other times\n   to be able to enter text not terminated with a CR.  (A statement for\n   NLS(NIC) is a string of text of \"arbitrary\" length and need not have\n   CRs in it; on output the line is folded for the user at his (user\n   definable) page boundary.)\n\n        As an example of what is required, consider the case where the\n   user's system recognizes CR as end-of-line.  In this case the Telnet\n   would be awakened when a CR is received.  We would recommend that in\n   this case the CR code be literally entered into the Telnet output\n   buffer.  If a CR is preceded by an EOS character, then the CR should\n   not be placed in the Telnet output buffer.  Transmission through the\n   network can take place either when an EOS is received or\n   automatically when the Telnet output buffer fills.  Transmission to\n   character-at-a-time systems from line-at-a-time systems could require\n   the awkward striking of three keys to get one character through the\n   network.\n\n        Now consider transmission for a character-at-a-time system to a\n   server line-at-a-time system.  A similar problem to the one to be\n   described also exists between line-at-a-time systems.  Given the\n   definition of an EOS character different from CR, a line can be\n   buffered up until the EOS is received and then sent without the EOS.\n   How is the serving system to know that a line has been sent?  One way\n   would be for the serving NCP to recognize message boundaries.  This\n   convention would violate a design goal.  Another way would be for the\n\n\n\nMelvin \u0026 Watson                                                 [Page 5]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n   user Telnet to request its NCI to send an INS command.  The sending\n   of INS type of control commands might introduce race conditions in\n   the network and should be investigated before their use with a Telnet\n   process is established.  Since some of the line-at-a-time systems we\n   know have special hardware that recognizes the end-of-line signal, we\n   need some way to be compatible with this hardware using software\n   control signals.  We leave this problem for further NWG subgroup\n   study.\n\n   3G   We now come back to the problem of interrupting or escaping in\n   the remote server system.  In systems which do not lock out the input\n   keyboard when output is going on, the mechanisms and conventions\n   outlined above would seem adequate unless a special break signal is\n   the escape signal.  This latter case requires more study.  In systems\n   which allow no input while output is occurring, one may have to live\n   with the consequences of such a terminal discipline and be prepared\n   to wait until output stops before an escape code can be sent.  If the\n   keyboard is locked and an escape break signal can be sent to the\n   user's system, it can prevent output from going to the terminal, but\n   must be prepared to continue receiving it from the server site until\n   the user can inform his Telnet process to send an interrupt or escape\n   signal to the server site.  Again this is a problem for further\n   study.\n\n        The Online System of the Network Information Center operates on\n   a character-at-a-time monitor system and the conventions established\n   in this paper are adequate for access to it.  These conventions are\n   summarized in Appendix A.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMelvin \u0026 Watson                                                 [Page 6]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\nAPPENDIX A\n\n   NETWORK CONNECTION PROTOCOL TO SRI-NETWORK INFORMATION CENTER\n\n   1    Initial Connection Protocol\n\n       Connection establishment to NIC is identical to that presented in\n   Section II of NWG/RFC 80 NIC (5608,); it is reproduced here:\n\n   Telnet contacts NIC\n\n   NIC \u003c- user site\n\n        RTS \u003cus\u003e \u003cl\u003e \u003cp\u003e\n\n             NIC logger is socket 1\n\n   user site \u003c- NIC\n\n        STR \u003cl\u003e \u003cus\u003e CLS \u003cl\u003e \u003cus\u003e\n\n             if accepted\n\n        CLS \u003cl\u003e \u003cus\u003e\n\n             if rejected\n\n   assuming NIC accepts\n\n   user site \u003c- NIC\n\n        STR \u003css+l\u003e \u003cus\u003e\n\n        RTS \u003css\u003e \u003cus+l\u003e \u003cq\u003e\n\n             NIC receives text thru local socket ss from remote\n             socket us+l via link q\n\n   assuming user site accepts\n\n        NIC \u003c- user site\n\n             STR \u003cus\u003e \u003css+l\u003e\n\n             RTS \u003cus+l\u003e \u003css\u003e \u003cr\u003e\n\n                  NIC sends text to remote socket us thru local socket\n                  ss+l via link r\n\n\n\nMelvin \u0026 Watson                                                 [Page 7]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n                    .\n                    .\n                    .\n\n        user site \u003c- NIC\n\n             ALL \u003cq\u003e \u003cspace\u003e\n\n                    .\n                    .\n                    .\n\n        NIC \u003c- user site\n\n             ALL \u003cr\u003e \u003cspace\u003e\n\n   2    Connection Breaking Protocol\n\n        A CLS trade is made between the NCPs for each of the two\n   connections as per Document #1 NIC (5143,).\n\n           We may decide to put a time-out into the NIC connections such\n      that no interaction for some (as yet unspecified) \"reasonable\"\n      length of time will result in a CLS-out of the connections being\n      initiated by NIC.\n\n   3    Third Level Protocol\n\n        The first 8 bits received by NIC thru socket ss should be the\n   message data type designating that an 8-bit ASCII stream follows, as\n   per NWG/RFC #63, NIC (4963,).\n\n         I.e., the first 8 bits are 00000001\n\n        The first 8 bits received by Telnet thru socket us will also\n   indicate a message data type of l.  Each network message should have\n   an integral multiple of 8 bits.  If a network standard is established\n   different from the suggestion of NWG/RFC #63, NIC (4963,), then we\n   would change this protocol to conform.\n\n         NIC will have NCP-generated interrupts disabled, i.e.,\n\n            INR will be ignored\n\n            INS will not be sent to the remote host\n\n\n\n\n\n\nMelvin \u0026 Watson                                                 [Page 8]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n   4    NLS(NIC) Character Conventions of Interest to Telnet\n\n        Echoing can either be under control of NIS(NIC) or under control\n   of the user site.  When we refer to echoing below, we mean under\n   control of NLS(NIC).  When echoing is handled by the user site we\n   would expect the user to set the NLS(NIC) output conventions to\n   conform to the echoing conventions at his site.  NLS(NIC) assumes\n   echoing is handled by the user site unless explicitly commanded\n   otherwise.\n\n      Format affecting control characters\n\n         horizontal tab\n\n                 spaces to next (user definable) stop on both echoing\n            and output.\n\n                 if during literal input, enters file as ASCII '11.\n\n         form feed\n\n                 carriage return and (user definable) appropriate number\n            of line feeds on echo and output.\n\n                 If during literal input, enters file as ASCII '14\n\n         vertical tab\n\n                 carriage return and (user definable) appropriate number\n            of line feeds on echo and output\n\n                 if during literal input, enters file as ASCII '13\n\n         carriage return\n\n                 carriage return followed by line feed on echo and\n            output\n\n                 if during literal input, enters file as EOL (see below)\n\n         line feed\n\n                 line feed on echo and output\n\n                 enters file as ASCII '12 on literal input\n\n         EOL (end of line)\n\n\n\n\nMelvin \u0026 Watson                                                 [Page 9]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n                 presently ASCII code '37\n\n                 carriage return followed by line feed on echo and\n            output\n\n                 if during literal input, enters file as ASCII '37\n\n                 If the user's system automatically appends a LF to a CR\n            before sending it to Telnet or converts CR to some EOL code\n            not ASCII '37, we would expect Telnet to send NLS(NIC) just\n            a CR or ASCII '37.  If we receive CRLF, then on output we\n            will send CRLFLF.\n\n   5 NLS(NIC) Interrupt Attention Convention\n\n       A (user definable) ASCII code in the text input stream is used to\n   abort the executing process and return control to the main NLS(NIC)\n   command processor.\n\n         This code is presently DEL (ASCII '177).\n\n           Escape to the NIC monitor:  No escape is required as all\n      operations needed for use of the NIC can be performed within\n      NLS(NIC).\n\n           Character Set:  We strongly recommend that the Telnet process\n      be able to generate by some set of keying conventions all 128\n      ASCII codes.  Use of NLS(NIC) will probably feel most comfortable\n      from a device with upper and lower case graphics, although we can\n      provide service to single case devices.  We can provide a useful\n      service if the full ASCII set cannot be sent, but would like to\n      minimize the special cases we have to handle.  Sites which cannot\n      provide the full ASCII set should contact us.\n\n         +----+                      |\n         |    |        Server        |\n         |    |        Program       |\n         |    |                      |\n         +----+                      |\n          ^ |                        |\n          | v                        |\n         +----+        Terminal      |\n         |    |        control       |\n         |    |        software      |    SERVER\n         |    |        and           |     SITE\n         +----+        possibly      |\n          ^ |          hardware      |\n          | v                        |\n\n\n\nMelvin \u0026 Watson                                                [Page 10]\n\f\nRFC 97                  Proposed Telnet Protocol           February 1971\n\n\n         +----+                      |\n         |    |                      |\n         |    |        NCP           |\n         |    |                      |\n         +----+                      |\n          ^ |                        |\n          | v                        |\n\n          . .\n          . .                                            Figure 1 -\n          . .\n          . .                                        Telnet Connection\n\n          ^ |\n          | v\n         +----+                      |\n         |    |                      |\n         |    |        NCP           |\n         |    |                      |\n         +----+                      |\n          ^ |                        |\n          | v                        |\n         +----+                      |\n         |    |                      |\n         |    |        Telnet        |\n         |    |                      |\n         +----+                      |\n          ^ |                        |    USER\n          | v                        |    SITE\n         +----+        Terminal      |\n         |    |        control       |\n         |    |        hardware-     |\n         |    |        software      |\n         +----+                      |\n          ^ |                        |\n          | v                        |\n         +----+                      |\n         |    |        User          |\n          \\   |        terminal      |\n           \\--+                      |\n\n\n       [ This RFC was put into machine readable form for entry ]\n       [   into the online RFC archives by Tony Hansen 08/08   ]\n\n\n\n\n\n\n\nMelvin \u0026 Watson                                                [Page 11]\n\f\n"
}