{
  "series": "Request for Comments",
  "number": "1",
  "howpublished": "RFC 1",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0001",
  "url": "https://www.rfc-editor.org/info/rfc1",
  "title": "Host Software",
  "pagetotal": "11",
  "year": "1969",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                   Steve Crocker\nRequest for Comments: 1                                          UCLA\n                                                         7 April 1969\n\n\n                         Title:   Host Software\n                        Author:   Steve Crocker\n                          Installation:   UCLA\n                          Date:   7 April 1969\n             Network Working Group Request for Comment:   1\n\n\nCONTENTS\n\nINTRODUCTION\n\n  I. A Summary of the IMP Software\n\n     Messages\n\n     Links\n\n     IMP Transmission and Error Checking\n\n     Open Questions on the IMP Software\n\n II. Some Requirements Upon the Host-to-Host Software\n\n     Simple Use\n\n     Deep Use\n\n     Error Checking\n\nIII. The Host Software\n\n     Establishment of a Connection\n\n     High Volume Transmission\n\n     A Summary of Primitives\n\n     Error Checking\n\n     Closer Interaction\n\n     Open Questions\n\n\n\n\nCrocker                                                        [Page 1]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n IV. Initial Experiments\n\n     Experiment One\n\n     Experiment Two\n\nIntroduction\n\n   The software for the ARPA Network exists partly in the IMPs and\n   partly in the respective HOSTs.  BB\u0026N has specified the software of\n   the IMPs and it is the responsibility of the HOST groups to agree on\n   HOST software.\n\n   During the summer of 1968, representatives from the initial four\n   sites met several times to discuss the HOST software and initial\n   experiments on the network.  There emerged from these meetings a\n   working group of three, Steve Carr from Utah, Jeff Rulifson from SRI,\n   and Steve Crocker of UCLA, who met during the fall and winter.  The\n   most recent meeting was in the last week of March in Utah.  Also\n   present was Bill Duvall of SRI who has recently started working with\n   Jeff Rulifson.\n\n   Somewhat independently, Gerard DeLoche of UCLA has been working on\n   the HOST-IMP interface.\n\n   I present here some of the tentative agreements reached and some of\n   the open questions encountered.  Very little of what is here is firm\n   and reactions are expected.\n\nI.   A Summary of the IMP Software\n\nMessages\n\n   Information is transmitted from HOST to HOST in bundles called\n   messages.  A message is any stream of not more than 8080 bits,\n   together with its header.  The header is 16 bits and contains the\n   following information:\n\n           Destination     5 bits\n           Link            8 bits\n           Trace           1 bit\n           Spare           2 bits\n\n   The destination is the numerical code for the HOST to which the\n   message should be sent.  The trace bit signals the IMPs to record\n   status information about the message and send the information back to\n   the NMC (Network Measurement Center, i.e., UCLA).  The spare bits are\n   unused.\n\n\n\nCrocker                                                        [Page 2]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\nLinks\n\n   The link field is a special device used by the IMPs to limit certain\n   kinds of congestion.  They function as follows.  Between every pair of\n   HOSTs there are 32 logical full-duplex connections over which messages\n   may be passed in either direction.  The IMPs place the restriction on\n   these links that no HOST can send two successive messages over the\n   same link before the IMP at the destination has sent back a special\n   message called an RFNM (Request for Next Message).  This arrangement\n   limits the congestion one HOST can cause another if the sending HOST\n   is attempting to send too much over one link.  We note, however, that\n   since the IMP at the destination does not have enough capacity to\n   handle all 32 links simultaneously, the links serve their purpose only\n   if the overload is coming from one or two links.  It is necessary for\n   the HOSTs to cooperate in this respect.\n\n   The links have the following primitive characteristics.  They are\n   always functioning and there are always 32 of them.\n\n   By \"always functioning,\" we mean that the IMPs are always prepared to\n   transmit another message over them.  No notion of beginning or ending\n   a conversation is contained in the IMP software.  It is thus not\n   possible to query an IMP about the state of a link (although it might\n   be possible to query an IMP about the recent history of a link --\n   quite a different matter!).\n\n   The other primitive characteristic of the links is that there are\n   always 32 of them, whether they are in use or not.  This means that\n   each IMP must maintain 18 tables, each with 32 entries, regardless of\n   the actual traffic.\n\n   The objections to the link structure notwithstanding, the links are\n   easily programmed within the IMPs and are probably a better\n   alternative to more complex arrangements just because of their\n   simplicity.\n\nIMP Transmission and Error Checking\n\n   After receiving a message from a HOST, an IMP partitions the message\n   into one or more packets.  Packets are not more than 1010 bits long\n   and are the unit of data transmission from IMP to IMP.  A 24 bit\n   cyclic checksum is computed by the transmission hardware and is\n   appended to an outgoing packet.  The checksum is recomputed by the\n   receiving hardware and is checked against the transmitted checksum.\n   Packets are reassembled into messages at the destination IMP.\n\nOpen Questions on the IMP Software\n\n\n\n\nCrocker                                                        [Page 3]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n   1.  An 8 bit field is provided for link specification, but only 32\n   links are provided, why?\n\n   2.  The HOST is supposed to be able to send messages to its IMP.  How\n   does it do this?\n\n   3.  Can a HOST, as opposed to its IMP, control RFNMs?\n\n   4.  Will the IMPs perform code conversion?  How is it to be\n   controlled?\n\nII. Some Requirements Upon the Host-to-Host Software\n\nSimple Use\n\n   As with any new facility, there will be a period of very light usage\n   until the community of users experiments with the network and begins\n   to depend upon it.  One of our goals must be to stimulate the\n   immediate and easy use by a wide class of users.  With this goal, it\n   seems natural to provide the ability to use any remote HOST as if it\n   had been dialed up from a TTY (teletype) terminal.  Additionally, we\n   would like some ability to transmit a file in a somewhat different\n   manner perhaps than simulating a teletype.\n\nDeep Use\n\n   One of the inherent problems in the network is the fact that all responses\n   from a remote HOST will require on the order of a half-second or so,\n   no matter how simple.  For teletype use, we could shift to a\n   half-duplex local-echo arrangement, but this would destroy some of the\n   usefulness of the network.  The 940 Systems, for example, have a very\n   specialized echo.\n\n   When we consider using graphics stations or other sophisticated\n   terminals under the control of a remote HOST, the problem becomes more\n   severe. We must look for some method which allows us to use our most\n   sophisticated equipment as much as possible as if we were connected\n   directly to the remote computer.\n\nError Checking\n\n   The point is made by Jeff Rulifson at SRI that error checking at major\n   software interfaces is always a good thing. He points to some\n   experience at SRI where it has saved much dispute and wasted effort.\n   On these grounds, we would like to see some HOST to HOST checking.\n   Besides checking the software interface, it would also check the\n   HOST-IMP transmission hardware.  (BB\u0026N claims the HOST-IMP hardware\n   will be as reliable as the internal registers of the HOST.  We believe\n\n\n\nCrocker                                                        [Page 4]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n   them, but we still want the error checking.)\n\nIII.  The Host Software\n\nEstablishment of a Connection\n\n   The simplest connection we can imagine is where the local HOST acts as\n   if it is a TTY and has dialed up the remote HOST.  After some\n   consideration of the problems of initiating and terminating such a\n   connection , it has been decided to reserve link 0 for communication\n   between HOST operating systems.  The remaining 31 links are thus to be\n   used as dial-up lines.\n\n   Each HOST operating system must provide to its user level programs a\n   primitive to establish a connection with a remote HOST and a primitive\n   to break the connection.  When these primitives are invoked, the\n   operating system must select a free link and send a message over link\n   0 to the remote HOST requesting a connection on the selected link.\n   The operating system in the remote HOST must agree and send back an\n   accepting message over link 0.  In the event both HOSTs select the same\n   link to initiate a connection and both send request messages at\n   essentially the same time, a simple priority scheme will be invoked in\n   which the HOST of lower priority gives way and selects another free\n   link.  One usable priority scheme is simply the ranking of HOSTS\n   by their identification numbers.  Note that both HOSTs are aware that\n   simultaneous requests have been made, but they take complementary\n   actions: The higher priority HOST disregards the request while the\n   lower priority HOST sends both an acceptance and another request.\n\n   The connection so established is a TTY-like connection in the\n   pre-log-in state.  This means the remote HOST operating system will\n   initially treat the link as if a TTY had just called up.  The remote\n   HOST will generate the same echos, expect the same log-in sequence and\n   look for the same interrupt characters.\n\nHigh Volume Transmission\n\n   Teletypes acting as terminals have two special drawbacks when we\n   consider the transmission of a large file.  The first is that some\n   characters are special interrupt characters.  The second is that\n   special buffering techniques are often employed, and these are\n   appropriate only for low-speed character at time transmission.\n\n   We therefore define another class of connection to be used for the\n   transmission of files or other large volumes of data.  To initiate\n   this class of link, user level programs at both ends of an established\n   TTY-like link must request the establishment of a file-like connection\n   parallel to the TTY-like link.  Again the priority scheme comes into\n\n\n\nCrocker                                                        [Page 5]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n   play, for the higher priority HOST sends a message over link 0 while\n   the lower priority HOST waits for it.  The user level programs are, of\n   course, not concerned with this.  Selection of the free link is done\n   by the higher priority HOST.\n\n   File-like links are distinguished by the fact that no searching for\n   interrupt characters takes place and buffering techniques appropriate\n   for the higher data rates takes place.\n\nA Summary of Primitives\n\n   Each HOST operating systems must provide at least the following\n   primitives to its users.  This list knows not to be necessary but not\n   sufficient.\n\n   a)  Initiate TTY-like connection with HOST x.\n\n   b)  Terminate connection.\n\n   c)  Send/Receive character(s) over TTY-like connection.\n\n   d)  Initiate file-like connection parallel to TTY-like connection.\n\n   e)  Terminate file-like connection.\n\n   f)  Send/Receive over file-like connection.\n\nError Checking\n\n   We propose that each message carry a message number, bit count, and a\n   checksum in its body, that is transparent to the IMP.  For a checksum\n   we suggest a 16-bit end-around-carry sum computed on 1152 bits and\n   then circularly shifted right one bit.  The right circular shift every\n   1152 bits is designed to catch errors in message reassembly by the IMPs.\n\nCloser Interaction\n\n   The above described primitives suggest how a user can make simple use\n   of a remote facility.  They shed no light on how much more intricate\n   use of the network is to be carried out.  Specifically, we are\n   concerned with the fact that as some sites a great deal of work has\n   gone into making the computer highly responsive to a sophisticated\n   console.  Culler's consoles at UCSB and Englebart's at SRI are at\n   least two examples.  It is clear that delays of a half-second or so\n   for trivial echo-like responses degrade the interaction to the point\n   of making the sophistication of the console irrelevant.\n\n   We believe that most console interaction can be divided into two\n\n\n\nCrocker                                                        [Page 6]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n   parts, an essentially local, immediate and trivial part and a remote,\n   more lengthy and significant part.  As a simple example, consider a\n   user at a console consisting of a keyboard and refreshing display\n   screen.  The program the user is talking typing into accumulates a\n   string of characters until a carriage return is encountered and then\n   it processes the string.  While characters are being typed, it\n   displays the characters on the screen.  When a rubout character is\n   typed, it deletes the previous non-rubout character.  If the user\n   types H E L L O \u003c- \u003c- P \u003cCR\u003e where \u003c- is rubout and \u003cCR\u003e is\n   carriage-return, he has made nine keystrokes.  If each of these\n   keystrokes causes a message to be sent which in return invokes\n   instructions to our display station we will quickly become bored.\n\n   A better solution would be to have the front-end of the remote program\n   -- that is the part scanning for \u003c- and \u003cCR\u003e -- be resident in our\n   computer.  In that case, only one five character message would be\n   sent, i.e., H E L P \u003cCR\u003e, and the screen would be managed locally.\n\n   We propose to implement this solution by creating a language for\n   console control.  This language, current named DEL, would be used by\n   subsystem designers to specify what components are needed in a\n   terminal and how the terminal is to respond to inputs from its\n   keyboard, Lincoln Wand, etc.  Then, as a part of the initial protocol,\n   the remote HOST would send to the local HOST, the source language text\n   of the program which controls the console.  This program would have\n   been by the subsystem designer in DEL, but will be compiled locally.\n\n   The specifications of DEL are under discussion.  The following\n   diagrams show the sequence of actions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrocker                                                        [Page 7]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\nA.  Before Link Establishment\n\n\n         /                                                      \\\n        |     +-----------+                    +-----------+    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     | terminal  |                    | terminal  |    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     +-----+-----+                    +-----+-----+    |\n        |           |                                |          |\n        |           |                                |          |\n        |           |                                |          |\n        |     +-----+-----+                    +-----------+    |\n        |     |     |     | Request connection |     |     |    |\n   UCLA {     |     |     | -\u003e over link 25    |     |     |    } SRI\n        |     |   +-+-+   |  +-+          +-+  |   +-+-+   |    |\n        |     |   | OS|---+-=|I|----------|I|=-+---| OS|   |    |\n        |     |   +-+-+   |  +-+          +-+  |   +---+   |    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     +-----------+                    +-----------+    |\n        |      HOST: UCLA                        HOST: SRI      |\n         \\                                                     /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrocker                                                        [Page 8]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\nb.  After Link Establishment and Log-in\n\n\n         /                                                      \\\n        |     +-----------+                    +-----------+    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     | terminal  |                    | terminal  |    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     +-----+-----+                    +-----+-----+    |\n        |           |                                |          |\n        |           |                                |          |\n        |           |                                |          |\n        |     +-----+-----+ \"Please send front\"+-----------+    |\n        |     |     |     | end control\"       |     |     |    |\n   UCLA {     |     |     |        -\u003e          |     |     |    } SRI ___\n        |     |   +-+-+   |  +-+          +-+  |  +--+---+ |    |    /   |\n        |     |   | OS|---+-=|I|----------|I|=-+--|OS|NLS| +----+---|    |\n        |     |   +-+-+   |  +-+          +-+  |  +------+ |    |   |___/\n        |     |           |       DEL prog.    |           |    |   |    |\n        |     |           |        \u003c-          |           |    |   |____|\n        |     +-----------+                    +-----------+    |\n        |      HOST: UCLA                        HOST:SRI       |\n         \\                                                     /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrocker                                                        [Page 9]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\nc.  After Receipt and Compilation of the DEL program\n\n\n         /                                                     \\\n        |     +-----------+                    +-----------+    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     | terminal  |                    | terminal  |    |\n        |     |           |                    |           |    |\n        |     |           |                    |           |    |\n        |     +-----+-----+                    +-----+-----+    |\n        |           |Trivial                         |          |\n        |           |Responses                       |          |\n        |           |                                |          |\n        |     +-----+------+                    +-----------+   |\n        |     |     |      |                    |     |     |   |\n   UCLA {     |     |      |  Major Responses   |     |     |   } SRI ___\n        |     |  +--+--+   |  +-+          +-+  |  +--+---+ |   |    /   |\n        |     |  |DEL  |---+-=|I|----------|I|=-+--|OS|NLS| +---+---|    |\n        |     |  |front|   |  +-+          +-+  |  +------+ |   |   |___/\n        |     |  | end |   |                    |           |   |   |    |\n        |     |  |prog.|   |                    |           |   |   |____|\n        |     |  +-----+   |                    |           |   |\n        |     |  | OS  |   |                    |           |   |\n        |     |  +-----+   |                    |           |   |\n        |     |            |                    |           |   |\n        |     +------------+                    +-----------+   |\n        |      HOST: UCLA                         HOST: SRI     |\n         \\                                                     /\n\nOpen Questions\n\n   1.  If the IMPs do code conversion, the checksum will not be correct.\n\n   2.  The procedure for requesting the DEL front end is not yet\n   specified.\n\nIV.  Initial Experiments\n\nExperiment One\n\n   SRI is currently modifying their on-line retrieval system which will\n   be the major software component on the Network Documentation Center so\n   that it can be operated with model 35 teletypes.  The control of the\n   teletypes will be written in DEL.  All sites will write DEL compilers\n   and use NLS through the DEL program.\n\nExperiment Two\n\n\n\nCrocker                                                       [Page 10]\n\f\nRFC 1                        Host Software                 7 April 1969\n\n\n   SRI will write a DEL front end for full NLS, graphics included.  UCLA\n   and UTAH will use NLS with graphics.\n\n\n         [ This RFC was put into machine readable form for entry ]\n         [ into the online RFC archives by Celeste Anderson 3/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrocker                                                       [Page 11]\n\f\n"
}