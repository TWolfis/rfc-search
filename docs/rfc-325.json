{
  "series": "Request for Comments",
  "number": "325",
  "howpublished": "RFC 325",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0325",
  "url": "https://www.rfc-editor.org/info/rfc325",
  "title": "Network Remote Job Entry program - NETRJS",
  "pagetotal": "9",
  "year": "1972",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                           G. HICKS\nRequest for Comments: 325                                           UTAH\nN.I.C. # 9632                                              APRIL 6, 1972\n\n\n               Network Remote Job Entry Program - NETRJS\n\n   Since October 1971 we, at the University of Utah, have had very large\n   compute bound jobs running continuously.  These jobs did reduce\n   response time on our PDP-10 for the other Tenex users.\n\n   Since February we have been submitting jobs to the UCLA 360/91.  Our\n   normal mode of operation is diagrammed below.\n\n                 +---------------+                +---------------+\n     ______      |      UTAH     |    NETWORK     |      UCLA     |\n    /      \\     |  +---------+  |                |  +---------+  |\n   +        +    |  |         |  |        / /     |  |         |  |\n   |\\______/|    |  |         |\u003e-|-------/ /------|-\u003e|         |  |\n   |        |----+--| NETRJS  |  | :    / /       |: |   RJS   |  |\n   | FILE   |    |  |         |\u003c-|-----/ /--------|-\u003c|         |  |\n   | SYSTEM |    |  |         |  |    / /         |  |         |  |\n   \\        /    |  +---------+  |                |  +---------+  |\n    \\______/     |       |       |                |               |\n                 +-------|-------+                +---------------+\n\n                        USER\n   To use NETRJS the user creates a job file under the Tenex system.  He\n   then requests NETRJS to send that file to the UCLA RJS (Remote Job\n   Service System).  Using NETRJS, the user is able to monitor the\n   progress of his job.  When RJS notifies the user that his job output\n   is ready to be picked up, the user can request NETRJS to retrieve his\n   output (\"printed\" or \"punched\") to a local file.\n\nWHERE TO GET THE SOURCE PROGRAM\n\n   A copy of the source program is available by contacting:\n\n          Gregory P. Hicks\n          Computer Science Department\n          Merrill Engineering Building 3160\n          University of Utah\n          Salt Lake City, Utah 84112\n          (801) 531-8224\n\n\n\n\n\n\n\nHicks                                                           [Page 1]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\nUCLA REMOTE JOB SERVICE\n\n   To use the UCLA 360/91 via RJS it is necessary to:\n\n             1) Have a valid account at UCLA\n             2) Have an assigned RJS terminal id.\n\n   These can both be obtained from:\n\n          Bob Braden\n          UCLA\n          Math Sciences Building\n          3531 Boelter Hall\n          Los Angeles, Calif. 90024\n          (213) 825-7518\n\n   The remainder of this paper describes the program in greater detail\n   and the steps necessary to run a users program at UCLA.\n\nDESCRIPTION OF THE PROBLEM\n\n   There are some jobs that are compute bound for such a long time that\n   they seriously affect response time for interactive users.  These are\n   jobs that run from ten hours upward.  Another computer was needed to\n   handle these jobs.  The UCLA-CCN 360/91 was suggested.  The 360/91 is\n   primarily a batch processing type of system where, as a matter of\n   course, it is tuned to jobs that typically run for hours.  UCLA does\n   have software to allow jobs to be submitted via remote terminals,\n   either through direct communication lines or through the ARPANET.\n\nHOW AND WHY THE PROGRAM WAS WRITTEN\n\n   UCLA's software allowed the remote terminals to have unlimited\n   connect time (i.e. The time the terminal was actually connected to\n   the 360/91) at no charge to the  user.  The software at UCLA required\n   that each terminal be allotted 2k (2048 S/360 bytes) core for each\n   connection that is open at any one time.  Now, since each terminal\n   could have a virtual card reader, virtual line printer and a virtual\n   card punch, this means that one terminal could occupy 10k of core at\n   UCLA.  This - according to the UCLA systems people  - would put a\n   heavy load on the system if all the ports were occupied at once.  So\n   to alleviate this situation - as a matter of design decision - it was\n   decided to have the operator request to have the various connections\n   opened.  The operator could not have more than three connections at\n   any one time.  He could have the two operator connections and one of\n   the following open at once:\n\n\n\n\n\nHicks                                                           [Page 2]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n     A) Virtual line printer\n     B) Virtual card reader\n     C) Virtual card punch\n\n   This would cause the operator to be more active than an operator that\n   had a program that waited for his output to be sent to him\n   automatically.  However because of the reduced load on the remote\n   (UCLA) system, the turn around time was probably faster than if all\n   remote RJS users had all the connections open.\n\nDATA TABLES NEEDED BY NETRJS\n\n   The NETRJS has no information \"built into\" it about who has a valid\n   terminal id at UCLA.  This information is contained on the disk in a\n   file called PWD.SAV.  There is  a program that creates and updates\n   this  information for NETRJS.  NETRJS is therefore site independent.\n   It will work from any TENEX system that is able to use the ARPANET.\n\nTHE COMMAND INTERPRETER\n\n   NETRJS borrowed R. S. Tomlinson's TELNET command interpreter and\n   replaced his commands with those needed to run a program at UCLA.  As\n   in TELNET, the command interpreter does recognize commands partially\n   typed in.  If it does not have enough of the command to recognize it\n   will let the operator know about it.\n\nOPERATION COMMANDS TO NETRJS\n\n   The commands available are:\n\n     1) SEND.FILE.NAMED\n     2) RETRIEVE.OUTPUT.FROM\n           Options available here are:\n            a) PRINTER\n            b) PUNCH\n               Under punch the options are:\n                 i) Retrieving an object deck or\n                 ii) Retrieving an ascii file\n     3) TIME.NOW.IS\n     4) LOGOUT\n     5) RESTART\n     6) DISCONNECT\n     7) QUIT\n     8) SYSTAT\n     9) JOBSTAT\n    10) ?\n    11) ^Q\n\n\n\n\nHicks                                                           [Page 3]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n           Now to explain what the various commands do.\n\n   SEND.FILE.NAMED - asks the operator for the name of his program on\n        the disk, converts it to card images and sends the file to the\n        Remote Job Service at UCLA.  When the file  has  been accepted\n        by UCLA the operator will get a confirming message telling him\n        how many cards were read and the name of his job.  At this point\n        the operator may signoff from RJS and return at a later time to\n        get his output.\n\n   RETRIEVE.OUTPUT.FROM - asks the operator for the name of the virtual\n        device the output is available on.  The operator may specify\n        either the printer or the punch.\n\n   TIME.NOW.IS - outputs the time for the users information.\n\n   RESTART - will produce a very virgin NETRJS.  This should be used\n        only as a last resort since it does \"reset-the-world\".\n\n   LOGOUT - will do just that.  It will log the user out from his local\n        and his remote job.  It  does require a confirming carriage\n        return or it will do nothing.\n\n   DISCONNECT - will log the user out from the remote job and will\n        disconnect (break all connections between) him and the remote\n        computer.\n\n   QUIT - this is the only recommended way that the NETRJS program be\n        terminated.  The program may be continued with no harm done.\n\n   JOBSTAT - will cause RJS to show the status of any jobs that are\n        still active, and that have been submitted by the remote\n        terminal.\n\n   SYSTAT - will cause RJS to tell the operator what remote terminals\n        are using the RJS system at the present time.\n\n   ? - will do several things.  When in the command level, it caused\n        NETRJS to tell the operator what it expects next.  When nothing\n        has been typed it will respond with all the top level commands.\n        When something is entered, it will respond with all the commands\n        that begin with those particular letters.  As in TELNET, it will\n        see nothing that is illegal.  When sending or receiving a file\n        the ? will tell NETRJS to type out it's progress so far.  This\n        message is typed at the end of the transaction that it is\n        currently processing.  For that reason, it may be a few minutes\n        before the message is typed out.\n\n\n\n\nHicks                                                           [Page 4]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n   ^Q - this command is a very useful abort facility when used in the\n        following  fashion: ^Q ^C will terminate NETRJS.  This command\n        is not interpreted by the command interpreter.  It is looked for\n        by the sending (console) portion of the program.  In any case\n        the program may not be  continued.  How  it  works...  This\n        command simply re-enables the ^C in the exec and stops the\n        console  from doing anything (eg:  sending messages to UCLA,\n        finding out the  system  status  at  UCLA, etc...)  The\n        recommended sequence  for this command (IF IT MUST BE USED) is:\n        ^Q^C.  For this reason: The program is still processing but the\n        operator cannot communicate with it.\n\nHANDY COMMANDS TO THE RJS AT UCLA\n\n   Some of the more useful commands available to the RJS user are:\n\n   SIGNOFF - this will inform RJS that the user wants to terminate the\n        session.  If there are no output streams active the signoff will\n        be accepted.  If there are output streams active the RJS will\n        wait until such time as they have completed.\n\n   RESTART  -  (may  be  abbreviated  RST) will restart  the specified\n        device/job.  Devices available are (at this time): PRINTER1 AND\n        PUNCH1.  The user may specify  his jobname.  This will restart\n        his job (for output) from the beginning.  The format of the\n        restart command is:\n\n                  RESTART (device or jobname[,JOB])\n\n        There will be a confirming message that specifies the action\n        taken.\n\n   STATUS SYSTEM - this will tell the operator what remote terminals are\n        using the RJS System now.  In addition, status system includes\n        the status of all jobs currently in the system that have been\n        submitted from the user's terminal.  The only abbreviation\n        allowed is for system (SYS).\n\n   STATUS JOB - will tell the operator what output if any is waiting to\n        be returned to his terminal.  It will also tell him if there are\n        any jobs being  executed.  This command should be done each time\n        the user signs onto RJS.  Abbreviation allowed: J for JOB.\n\nTHE NETRJS CONTROL CHARACTERS\n\n   The escape character for NETRJS is the control character ^S.   This\n   was specified so that remote sites (and users!) could use the program\n   and still retain their sanity  and  that of telnet.  This will always\n\n\n\nHicks                                                           [Page 5]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n   return you to the command level of NETRJS.  This is good if you think\n   that you've made a mistake (eg...  when writing the program, etc...)\n   and you want to abort a send.  In other words, do not do ^S and think\n   that you can continue where you left off in a send or retrieval.  It\n   won't work at this time.  In a later implementation, it may, with the\n   provision of stopping (and then continuing, if you wish) the printer,\n   punch, or reader.\n\n\nEVERYTHING UNDERLINED SHOULD BE TYPED IN BY USER\n\n   SAMPLE SESSION USING NETRJS\n\n   UTAH TENEX 1.28.03, JANUARY 31, 1972 EXPC 1.33.3\n   [1] (USER) HICKS\n              -----\n   (PASSWORD)\n              -----\n   (ACCOUNT #) 500\n               ---\n    JOB 6 ON TTY21 1-APR-72 10:12\n    RUN NETRJS\n    ----------\n\n   \u003c\u003cUCLA91 IS UP.\u003e\u003e\n   NRJ8761 NETWORK REMOTE JOB SERVICE READY\n   RJS7501 TERMINAL NETUTAH1 HAS SIGNED ONTO RJS\n   RJS6601 NO ALERTS OUTSTANDING\n   (^S)\n   ----\n   \u003c\u003c?\n     -\n   RETRIEVE.OUTPUT.FROM\n   SEND.FILE.NAMED\n   DISCONNECT\n\n   QUIT\n   RESTART\n   TIME.NOW.IS\n   LOGOUT\n   DDT\n   UCLA91\n   SYSTAT\n     SEND.FILE.NAMED TEST.F4;1\n     ---             ---------\n   ?\n   -\n   5 RECORDS TRANSFERRED.\n\n\n\nHicks                                                           [Page 6]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n   FILE TEST.F4;1 HAS BEEN SENT.\n   12 RECORDS TRANSFERRED.\n   MORE FILES TO BE SENT? (Y OR N) Y\n                                   -\n   INPUT FILE: TEST.DAT;1\n   ?\n   -\n   40 RECORDS TRANSFERRED.\n\n   FILE TEST.DAT;1 HAS BEEN SENT.\n   100 RECORDS TRANSFERRED.\n   MORE FILES TO BE SENT? (Y OR N) N\n                                   -\n   \u003c\u003c \u003e\u003e\n     -\n   RJS534I JOB NETUTAH1 ACCEPTED BY RJS - 0000112 CARDS READ\n   \u003c\u003cSYSTAT \u003e\u003e\n     --\n   RJS802I TERMINAL NETUTAH1 HAS 1 SPL JOB(S)\n   RJS800I TERMINAL GSM ACTIVE AN LINE1\n   RJS909I PUNCH REROUTE = ENGR\n   RJS800I TERMINAL NETILL ACTIVE ON LINE8\n   RJS800I TERMINAL NETUTAH1 ACTIVE ON LINE11\n\n   STATUS JOB\n   ----------\n   RJS810I TERMINAL NETUTAH1 HAS THE FOLLOWING JOBS ON RJS\n   RJS812I NETUTAH1 SPL(A) 001\n   RJS481I PRINT OUTPUT FOR JOB NETUTAH1 NOW AVAILABLE, PRTY=030, IMMED\n   RJS481I PUNCH OUTPUT FOR JOB NETUTAH1 NOW AVAILABLE, PRTY=060, IMMED\n\n   \u003c\u003cRETRIEVE.OUTPUT.FROM PRINTER\n     ---                  -------\n   GOING TO FILE NAMED TEST.PRT [NEW FILE]\n                       --------           -\n   RJS783I TERMINAL STATUS CHANGED\n   ?\n   -\n   99 RECORDS TRANSFERRED.\n   STATUS JOB\n   ------ ---\n   RJS809I TERMINAL NETUTAH1 HAS THE FOLLOWING JOBS IN RJS\n   RJS800I NETUTAH1 PRT(A)   060\n   ?\n   -\n   169 RECORDS TRANSFERRED.\n\n   YOUR OUTPUT IS HERE.\n\n\n\nHicks                                                           [Page 7]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n   217 RECORDS AND 16119 BYTES TRANSFERRED.\u003e\u003e\n\n   \u003c\u003cRETRIEVE.OUTPUT.FROM PUNCH\n     ---                  -----\n   WILL THIS BE AN OBJECT DECK (O)\n   OR AN ASCII FILE (A)?? ASCII\n                          -\n   GOING TO FILE NAMED TEST.PUJ [NEW FILE]\n                       --------           -\n   RJS783I TERMINAL STATUS CHANGED\n\n\n   YOUR OUTPUT IS HERE.\n   17 RECORDS AND 1222 BYTES TRANSFERRED.\u003e\u003e\n   SIGNOFF\n   -------\n   RJS751I TERMINAL NETUTAH1 HAS REQUESTED SIGNOFF FROM RJS\n   NRJ898I SIGNOFF ACCEPTED\n   @\n\n\nWHEN THE OPERATOR'S CONSOLE IS ACTIVE\n\n   The NETRJS prompt character is the  \"\u003c\u003c\".  This indicates  that  the\n   program is  ready to accept commands.  When the \"\u003e\u003e\" is printed the\n   console is in the remote  mode.  Anything that is typed at this point\n   goes directly to RJS.  When sending or retrieving files the operator\n   may communicate with RJS if he wishes even though the \"\u003e\u003e\" has not\n   yet been output.  The operator's console is in the remote mode at all\n   times except when NETRJS is at the command level.\n\nEDITING ON THE NETWORK\n\n   There are two control characters that allow you to make mistakes and\n   then to correct them.  One is control-x.  This has the action of\n   notifying RJS to ignore your last line.  This is echoed by \"___\".\n   The other is control-h.  This will cause UCLA to ignore the character\n   immediately preceding it.  This is echoed by \"_\" and there will be no\n   echo of the deleted character.\n\nTABS AND OTHER NEAT GOODIES\n\n   Most people writing programs under TENEX like to use the tab stops\n   provided on the teletype.  So we needed a nice number to set them to.\n   When running NETRJS the user should be aware that the tab stops are\n   set every 8 columns.  In other words, a line that starts with a tab\n   will find the first character in (card) column 8.  The program\n   accepts almost any type of \u003ceol\u003e indicator eg: TENEX eol and cr lf.\n\n\n\nHicks                                                           [Page 8]\n\f\nRFC 325             Network Remote Job Entry Program          April 1972\n\n\n   (This last in any order, by the way.)  It also deletes blank lines\n   and since the user may wish to use a program written in a language\n   such as Fortran to generate data, the program also ignores null (00)\n   characters.  When retrieving a file of data, for an \u003ceol\u003e the program\n   uses \u003ccr\u003e and \u003clf\u003e.  This is to keep the output compatible with\n   text-editors such as QED, DED, SOS and etc.\n\nFILE FORMAT\n\n   When sending a file to UCLA there is a line limit of 80 characters.\n   This is a design restriction in that jobs going to the OS/360 be no\n   longer than 80 characters/line.  (Remember, IBM is still card\n   oriented...) The operator will get a nasty (well...  semi-nasty\n   anyway) message if NETRJS finds a line that is longer than that.  For\n   an output file, there is no limit to the length of a line other than\n   that imposed by the programming language used up to 255 characters.\n   When the user retrieves a punch file he may find that there are a few\n   extra lines thrown in...  This is done by UCLA to allow the user to\n   identify his deck when it is punched on the card punch.\n\n\n         [ This RFC was put into machine readable form for entry ]\n             [ into the online RFC archives by Elias Lofgren ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHicks                                                           [Page 9]\n\f\n"
}