{
  "series": "Request for Comments",
  "number": "210",
  "howpublished": "RFC 210",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0210",
  "url": "https://www.rfc-editor.org/info/rfc210",
  "title": "Improvement of Flow Control",
  "pagetotal": "2",
  "year": "1971",
  "month": "aug",
  "body": "\n\n\n\n\n\nRequest for Comments # 210                                     W. Conrad\nCategories  C.4                                                  Harvard\nNIC 7189                                                    16 August 71\n\n                      Improvement of Flow Control\n\nThe current \"give back\" - \"return\" scheme seems to put the cart before\nthe horse in that the \"return\" command indicates the amount of space\nthe sending host is returning rather than the amount of space it has\nleft after decrementing by the amount specified in the \"give back\"\ncommand.  Considering the fact that allocation counters at sending and\nreceiving hosts may get out of synchronization and the fact that the\nreceiving host has a preemptive priority in the allocation of its\nresources, it is only logical that the receiving host be able to find\nout exactly how much of its buffer space a sending host thinks it can\nclaim.\n\nIf the \"return\" command is to accurately reflect a sending host's\ncurrent allocation, and if successive \"give backs\" are to produce\n\"return\" commands which can be properly interpreted, certain race\nconditions must be avoided. A \"give back\" must be answered by a\n\"return\" and no more \"give backs\" can be issued until that \"return\" is\nreceived.  In some sense, a \"return\" command as here proposed is\nreally a give back reply, and, perhaps, should implemented under that\nname. On the sending side, the \"return\" command must not be issued as\nlong as a data RFNM is awaited on the link to which the \"return\"\nrefers. As soon as the net is clear of data messages, the \"return\" may\nbe sent and data transmission may continue when the RFNM for this\nmessage containing the \"return\" command is received.\n\nThe current \"give back\" command uses fractions and has a format\ndifferent from the \"allocate\" and \"return\" commands making processing\nunnecessarily complicated. By adopting the convention that allocations\ncan not be decremented below zero, one can safely specify absolute\ndecrements in a format like that of the \"allocate\" command. If the\nreceiving host's estimate of a suitable decrement is inaccurate, no\nharm is done and the \"return\" command in response to the \"give back\"\nprovides immediate corrective information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nSUMMARY\n\n          Proposal                       Advantage\n\n1    \"Return\" specifies amount       Provides more pertinent\n     of space left after             information and a means\n     decrementing.                   of resynchronization other\n                                     than closing connection.\n\n2    \"Give Back\" must get            Provide more accurate\n     \"return\" in reply and           allocation information\n     \"return\" must not be            by eliminating race\n     sent with data on the           conditions.\n     link.\n\n3    Eliminate fractions             Eliminate messy math\n     from \"give back\".               and provide symmetry\n                                     to allocation commands\n                                     making processing easier.\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by Gunnar Reichert 6/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 2]\n\f\n"
}