{
  "series": "Request for Comments",
  "number": "44",
  "howpublished": "RFC 44",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0044",
  "url": "https://www.rfc-editor.org/info/rfc44",
  "title": "Comments on NWG/RFC 33 and 36",
  "pagetotal": "3",
  "year": "1970",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                        A. Shoshani\nRequest for Comments: 44                                         R. Long\n                                                            A. Landsberg\n                                          System Development Corporation\n                                                           10 April 1970\n\n\n                     Comments on NWG/RFC 33 and 36\n\n   Generally, we are satisfied with the suggestions for the new Host-\n   to-Host protocol.  However, we think that a few refinements may be\n   helpful.\n\n   I.   It seems that there are two cases of reconnection:\n\n     1. Reconnect from a socket in a local Host to another socket in the\n        local Host.  This was referred to in RFC #33 as \"switch\".  The\n        local sockets can belong to different processes (such as the\n        \"Login\" process switching a connection to another process just\n        created) or can belong to the same process (such as a process\n        that accepts calls for connections on a particular socket, and\n        after a connection is established switches to another of his\n        sockets).\n\n     2. Reconnect from a socket at a local Host to a socket in a foreign\n        Host.\n\n     We suggest separation of these two cases for the following reasons:\n     a) Reconnection in Case 1 is necessary and useful, while the\n        usefulness of Case 2 is still in doubt.\n\n     b) Case 1 is simple to implement (at least conceptually) while Case\n        2 involves an elaborate mechanism of commands because of the\n        asynchronous nature of the network (four out of nine commands\n        were suggested to handle Case 2 in RFC #36).\n\n     Thus we think that at least in the first usage of the Host-to-Host\n     protocol reconnection in Case 2 should be left out.  An additional\n     system call (not a command) is therefore needed to permit Case 1,\n     which is SWITCH \u003csocket 1\u003e \u003csocket 2\u003e.\n\n   II.  The CLOSE command as suggested in RFC #36 seems to be used for\n        two purposes: block a connection and abort a connection.  To\n        avoid ambiguity it would be desirable to have two commands:\n        BLOCK and CLOSE.  As suggested in RFC #36, the response for both\n        commands can be the SUSPEND command which acknowledges the\n        reception of BLOCK or CLOSE commands.\n\n\n\n\nShoshani, et al.                                                [Page 1]\n\f\nRFC 44                Comments on NWG/RFC 33 \u0026 36             April 1970\n\n\n   III. After a connection has been established, we see no reason for\n        keeping the \"foreign socket\" in a local connection table.  Since\n        there is a one-to-one correspondence between a link number of\n        the foreign Host and a foreign socket number, we can use the\n        link number in the commands.  Thus, except for the RFC command,\n        all commands can use link numbers and therefore eliminate a 40-\n        bit foreign socket number in every entry of the connection table\n        (size being critical for some Hosts).  We note that if\n        connections will be multiplexed over links as suggested in RFC\n        #38, then the foreign socket would be needed in the connection\n        table.\n\n   IV.  In RFC#33 the term PORT was introduced.  Although this is\n        private to every Host, we have a comment.  If ports are used\n        such that there is a one-to-one correspondence between a port\n        for some user and a socket, then ports are completely redundant.\n        However, a Host may wish to multiplex ports over connections, in\n        which case an additional mechanism is needed.\n\n   To summarize the last four comments, we suggest that in the initial\n   version the following system calls and commands will be used (most of\n   them in RFC 33 and 36).\n\n   System Calls:\n   1) INITIATE \u003cmy socket\u003e \u003cyour socket\u003e\n   2) ACCEPT  \u003cmy socket\u003e\n   3) SWITCH \u003csocket 1\u003e \u003csocket 2\u003e\n   4) LISTEN \u003cmy socket\u003e\n   5) CLOSE \u003cmy socket\u003e\n   6) TRANSMIT \u003cmy socket\u003e \u003caddress\u003e\n\n   Commands:\n   Commands 0, 1, 3, 4 as in RFC #36 (pp.5) and in addition:\n   1) BLOCK: BLK \u003clink\u003e\n   2) CLOSE: CLS \u003clink\u003e\n\n   V.   In addition to the above it seems necessary to decide on the\n        following issues one way or the other together with the first\n        version of the protocol (perhaps by setting a date for people to\n        express their preferences and decide accordingly).  All of these\n        issues were mentioned in the meeting at UCLA on March 17, 1970,\n        but were put aside.\n\n        1. \"Double padding\" - when a message does not end on a word\n           boundary.  Two possible solutions were mentioned:\n\n           a) Hosts provide their padding in addition to the IMP's\n              padding (double padding).\n\n\n\nShoshani, et al.                                                [Page 2]\n\f\nRFC 44                Comments on NWG/RFC 33 \u0026 36             April 1970\n\n\n           b) Hosts make sure that all messages end on a word boundary\n              by shifting their messages (when necessary) and adjusting\n              the \"marking\" accordingly.\n\n        2. \"Echoing\" - there are three apparent possibilities:\n           a) Echoing\n           b) No echoing\n           c) Optional Echoing - possibly a bit in the \"Leader\" can be\n              used to designate this option.\n\n        3. \"Code Conversion\" - originally, BB\u0026N suggested doing the\n           conversion in the IMPs  using ASCII-8 as the common code.\n           This was rejected, mainly because of claims that ASCII-8 is\n           not large enough for some uses, such as graphics.  Also\n           conversion in the IMPs may slow them down and take up space\n           which could be used for buffers.  We feel that it is very\n           desirable to have a common code (even when the conversion is\n           not done by the IMPs), such that all incoming text messages\n           are in the same code and only one conversion table is needed.\n           Outgoing text messages should be converted into this common\n           code.  Obviously, the option \"no translation\" should be\n           possible for the purpose of binary data or data that is not\n           representable in the common code.  Since every known code can\n           be considered to be too restrictive for some purposes, we\n           suggest adopting a Network Common Code (NCC), and use all of\n           the 256 possible characters (for 8-bit code) to include the\n           \"important\" part of the union of the codes used throughout\n           the network.\n\n   VI.   Our preference to the above issues is as follows:\n        a) \"Double padding\" -it turns out to be easy for us to get our\n           messages to be sent on a word boundary by shifting the leader\n           of a message (and adjusting the \"marking\" accordingly) rather\n           than the data.  Thus we will prefer solution V.1.b).\n        b) \"Echoing\" - we prefer no echoing.  We think that character\n           echoing should be managed locally.\n        c) \"Code Conversion\" we prefer a Network Common Code.\n           Initially, ASCII-8 can be used, and then expanded according\n           to the needs of the Network.\n\n\n       [ This RFC was put into machine readable form for entry ]\n      [ into the online RFC archives by Alison De La Cruz 12/00 ]\n\n\n\n\n\n\n\n\nShoshani, et al.                                                [Page 3]\n\f\n"
}