{
  "series": "Request for Comments",
  "number": "430",
  "howpublished": "RFC 430",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0430",
  "url": "https://www.rfc-editor.org/info/rfc430",
  "title": "Comments on File Transfer Protocol",
  "pagetotal": "8",
  "year": "1973",
  "month": "feb",
  "body": "\n\n\n\n\n\nNetwork Working Group                                          R. Braden\nRequest for Comments: 430                                       CCN/UCLA\nNIC: 13299                                               7 February 1973\n\n\n                   COMMENTS ON FILE TRANSFER PROTOCOL\n\n   On January 23, 1973, Jon Postel (NMC), Eric Harslem (RAND), Stephen\n   Wolfe (CCN), and Robert Braden (CCN), held and informal meeting at\n   UCLA on FTP.  This RFC generally reports the consensus of that\n   meeting on the following issues: server-server transfers (ref.  RFC\n   438 by Thomas and Clements); site-dependent information; and\n   miscellaneous questions/disagreements with RFC 354, 385, and 414.\n   There was also a discussion of the print file muddle, but that\n   subject is addressed in a separate RFC, No. 448.\n\nMiscellaneous Comments on FTP\n\n   1. RFC 385, P. 1 (3)\n\n      The question of print files will be discussed at length in another\n      RFC.  However, we did feel that the word \"still\" on the second\n      line from the bottom of Page 1 is gratuitous.\n\n   2. RFC 385, P. 2 (5.)\n      RFC 385, P. 3 (8.)\n      RFC 414, P. 4 (11.i)\n\n      To the extent that we understand these items, they seem to be\n      unnecessary and probably undesirable concessions to particular bad\n      implementations (\"hacks\").  In reference to the second item, No. 8\n      in RFC 385, one should note that in an asynchronous multi-process\n      system like the ARPA Network, the phrase \"immediately after\" has\n      little meaning.  An implementation which depends upon \"immediately\n      after\" is erroneous and should be fixed.  If the protocol as\n      defined has an intrinsic race condition, of course, the protocol\n      should be fixed, but we don't believe such a problem exists.  It\n      would help if definitions of command-response sequences in the FTP\n      document were tightened up considerably.  As for the last item, we\n      don't understand why Wayne Hathaway is so strongly opposed to\n      \"implied eor\".\n\n   3. RFC 354, P. 13, Format Definitions for Block Mode\n\n      (a) The definition of the header length presumably is meant to be\n          the \"smallest integral number of bytes whose length is greater\n          or equal to 24 bits\".\n\n\n\n\nBraden                                                          [Page 1]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\n      (b) The same definitional problem occurs for restart markers.\n\n      (c) Why does the restart marker have to be greater than 8 bits?\n\n      (d) Note that changing the Descriptor coding to bit flags would\n          abolish the implied eor as well as the problem of RFC 385, P.\n          2, #6.\n\n   4. RFC 414, P. 5 (11.iii)\n\n          Note that text mode is not possible for any EBCDIC coded file.\n          Since EBCDIC is an 8-bit code, Telnet control characters\n          (128-255) cannot be used to distinguish either eor or eof.\n          Stream and block modes will work, however.  We have found the\n          diagram on the last page to be useful for keeping track of the\n          three-dimensional space of FTP parameters.\n\n   5. RFC 354, P. 17, PASS Command\n\n          There is no mechanism within FTP for changing a password.  A\n          user shouldn't have to use a different protocol (e.g., log\n          into a time sharing system) to merely change his password.\n\n   6. RFC 385, P. 3 (9.), TYPE Before BYTE\n\n      This admonition (to send TYPE before BYTE) should be clearly\n      labeled as a recommended procedure for user FTP, not a restriction\n      on a server FTP.\n\n   7. RFC 385, P. 2-3 (7) Order of 255 Reply\n\n      Some of the participants felt (strongly) that the timing problem\n      dealt with in this item is the result of bad NCP implementations\n      and ought not be dignified in the protocol.  The issue here is the\n      old, familiar, and touchy one of queueing RFC's or not. (My own\n      view is that the protocol asymmetry forced by NCP's which can't\n      queue RFC's is at least unaesthetic, and makes some elegant\n      solutions impossible.  For examples, see RFC 414 and the comments\n      below on server-server interaction, and RFC 438 on Reconnection\n      Protocol).\n\n   8. RFC 354, P. 15, Restart\n\n      Following a RESTart command, APPend and STORe presumably have\n      identical meanings.\n\n\n\n\n\n\nBraden                                                          [Page 2]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\nB. FTP Parameter Encoding\n\n   RFC 448, which discusses print files, points out that the print file\n   attribute is logically independent of the character code attribute\n   (ASCII vs. EBCDIC) in the type dimension; the set of allowable types\n   in FTP is the outer product of the individual attributes.  Thus FTP\n   has (at least) four character types, summarized by the following two\n   x two matrix:\n\n                  |  ASCII  |   EBCDIC\n   ---------------+---------+------------\n   Not Print File |         |\n   ---------------+---------+------------\n   Print File     |         |\n   ---------------+---------+------------\n\n   I propose that the encoding in the TYPE command model this\n   interdependence of the types.  Instead of using a distinct single\n   ASCII character for each type, we should use multiple ASCII\n   characters---qualifiers, if you wish.  For example:\n\n         A represents ASCII code\n         E represents EBCDIC code\n         P represents print file\n         I represents image\n         L represents local byte\n\n   Then the legal types according to RFC 385 would be:\n\n         A\n         AP\n         E\n         EP\n         I\n         L\n\n   Note that the attributes under consideration here are type-like; they\n   are not (logically) concerned with the structure or the transmission\n   mode, only the internal encoding of the file.\n\n   At present, this would be a trivial change.  However, I foresee the\n   file transfer protocol expanding significantly over the next several\n   years as new types are added.  Some servers will want to add server-\n   specific type variations, and the NWG will want to add some.  How\n   about an APL character set?  Or the multiple-overlay 256 character\n   ASCII which has been proposed?  Multiple qualifiers (and later\n   perhaps more structure) in the type seems to be the cleanest escape\n   mechanism for future growth.\n\n\n\nBraden                                                          [Page 3]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\nC. Server-Server Interaction\n\n   The FTP changes proposed by Thomas and Clements in RFC 438 are a\n   particular solution to a general problem inherent in the current\n   host-host protocol and higher-level protocols like FTP.  There seems\n   to be a need for a secure and simple way for two (server) processes\n   in different hosts to exchange socket names (i.e., 40-bit numbers) so\n   they can subsequently exchange RFC's and establish a connection.\n   Current second-level (host-host) protocol provides exactly one\n   (secure) mechanism by which one host can learn a socket name of a\n   process at another host in order to establish a connection: ICP.  The\n   ICP mechanism by itself is not adequate for server-server connection\n   in FTP.  Therefore, Thomas and Clements have proposed an extension to\n   the FTP protocol, roughly as follows:\n\n      (1) A controller (\"user\") process at Host A uses ICP to invoke and\n          establish Telnet control connections to two automata\n          (\"server\") processes at two other hosts.  An automaton process\n          invoked in this manner then executes controller commands sent\n          in a standard command language over the Telnet control\n          connection.\n\n      (2) The controller process commands each automaton to reserve a\n          suitable data transfer socket and to return the socket name to\n          the controller over the control connection.  An automaton\n          presumably negotiates with his own NCP in a host-dependent\n          manner to obtain the socket reservation.\n\n      (3) The controller now knows both data transfer socket names; he\n          will send them in subsequent commands to the automata so each\n          automaton will know the foreign socket name to which he is to\n          connect.  Later commands cause the automata to issue RFC's and\n          open the data connection as needed.\n\n   This appears to be useful general model for process-process\n   interaction over the Network.  Personally, I believe this symmetrical\n   model should be the basis of all FTP the controller and one of the\n   automata could be in the same host.  Then the user/server problem\n   (for any pair of hosts to transfer files, one must have a server FTP\n   and the other a user FTP) would vanish.  At least one host somewhere\n   in the Network would need a controller process; all other hosts would\n   need only an automaton process.\n\n   Perhaps at a future time the NWG should consider whether a socket-\n   reservation-and-passing mechanism ought to be incorporated into\n   second-level protocol rather than duplicated in a number of third-\n   level protocols.  We should note that this model provides secure\n\n\n\n\nBraden                                                          [Page 4]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\n   sockets only if both user and server processes \"release\" the socket\n   reservations when the Telnet control connection breaks.  The same\n   problem seems to occur with Thomas' Reconnection Protocol (426).\n\n   In any case, for the present we would endorse the general third-level\n   model of RFC 438.  However, we would propose a slightly different,\n   and more symmetrical, approach.\n\n      1. The requirement in FTP that the FTP user listen on the data\n         socket before issuing a data transfer command should be\n         removed.  The beauty of host-host protocol is that it doesn't\n         matter which host sends the first RFC, as long as they both\n         send matching RFC's \"eventually\".  (Timeouts, of course, are\n         annoying, but I believe they are workable and ultimately\n         unavoidable); queueing RFC's is also necessary).\n\n      2. We propose, instead of LSTN, a new command GETSocket.  The\n         controller (i.e., user FTP) process would send a GETSocket to\n         each automaton, probably after a successful login.  Upon\n         receiving GETSocket, an automaton would assign a (send,\n         receive) pair of data transfer sockets and return the numbers\n         over the Telnet connection. (Alternatively, FTP could specify\n         that a (send, receive) pair of sockets always be assigned when\n         the server is first entered, and the numbers returned to the\n         user process via unsolicited 255 replies).\n\n      3. Then the user process would send the socket numbers to the\n         opposite hosts by sending SOCK commands to both.\n\n      4. When it receives a data transfer command, the automaton\n         (server) process would issue an RFC containing the two socket\n         numbers.  When both servers are fired up, RFC's are exchanged\n         and data transfer starts.\n\nD. Site-Dependent FTP Parameters\n\n   Some hosts will have a problem with the current FTP because their\n   file system needs additional host-specific parameters in certain\n   cases.  As an example, the IBM operating systems tend to give the\n   programmer a number of options on the logical and physical mapping of\n   a file onto the disk.\n\n   This is true both of TSS/360 (see Wayne Hathaway's discussion of his\n   STOR command implementation, Page 5 of RFC 418), and OS/360.  The\n   large set of options and parameters to the OS/360 file system is, in\n   fact, the (legitimate) origin of most complaints about OS Job Control\n   Language (JCL).\n\n\n\n\nBraden                                                          [Page 5]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\n   If the FTP user merely wants to store data without using it at one of\n   these sites, he has no problem; defaults can be chosen to handle any\n   reasonable FTP request.  However, the FTP user who sends a file to an\n   IBM/360 for use there may need to specify local file system\n   parameters which are not derivable from any of the existing FTP\n   commands.\n\n   In designing an FTP server implementation for CCN, for example, we\n   first tried to handle the mapping problem by choosing a (possibly\n   different) default mapping for each combination of FTP parameters--\n   type, mode, and structure.  We hoped that if a user chose\n   \"reasonable\" or \"suitable\" FTP parameters for a particular case\n   (e.g., \"ASCII, stream, record\" for source programs, and \"image,\n   block, record\" for load modules), then the right OS/360 file mapping\n   would result.  We were forced to abandon this approach, however,\n   because of the following arguments:\n\n      1. Some user FTP's probably may not implement all FTP\n         type/mode/structure combinations (though they ought to!).\n\n      2. Some user FTP's may not give the user full or convenient\n         control over his type/mode/structure.  Indeed, the mode should\n         be chosen on grounds of efficiency, not end use.\n\n      3. There weren't enough logically distinct combinations of FTP\n         parameters.\n\n      4. The result would have been a set of hard-to-remember rules for\n         sending files to CCN for use here.\n\n      5. Some common cases require non-invertible transformations on the\n         data.  For example, most IBM language processors (i.e.,\n         compilers) accept only fixed length records of (surprise!) 80\n         bytes each, i.e., literal card images.  Such ugly (and\n         logically unnecessary) implementation stupidities in OS/360 are\n         a fact of life.  Now if a FTP user innocently sent a data file\n         to CCN with the particular type/mode combination which\n         defaulted to card images, he would find his records truncated\n         to 80 bytes.  That would be downright unfriendly.\n\n   Thus, the CCN server FTP would have to choose between being useful or\n   being friendly.  We decided upon the following strategy:\n\n      1. The defaults will be friendly; we will accept any FTP\n         type/mode/structure and store it invertibly (except print\n         files).  However, the user who uses only these defaults will\n         probably find he has to later run a utility under TSO to\n         reformat the data.\n\n\n\nBraden                                                          [Page 6]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\n      2. We will provide some mnmonic keywords associated with STOR\n         commands to choose the proper disk mapping.  For example, if he\n         wants to STORe a Fortran source file for compilation at CCN,\n         the user will need only to specify \"SOURCE\" or \"FORT\" to get\n         reasonable and workable OS/360 file system parameters.  In\n         addition, we will provide fairly complete \"DD\" parameters for\n         the sophisticated user.  The syntax and semantics of these\n         keywords and parameters will be as close as possible to the\n         corresponding TSO commands.  Full details will be published as\n         soon as the implementation is working.\n\n   All of this discussion leads to a general protocol question: how\n   should such host-dependent information appear within FTP? Hathaway\n   used the ALLO command (see RFC 418, P. 6).  CCN, on the other hand,\n   feels that such information belongs in the only part of FTP syntax\n   which is already host-dependent: the pathname.  So CCN plans to allow\n   a \"generalized\" pathname in a STOR command, a (full or partial) file\n   name optionally followed by one or keywords or keyword parameters\n   separated by commas.\n\n   A third possible solution might be for the user to precede his STORe\n   command by a server-dependent data set creation command, using\n   Hathaway's proposed SRVR command.  The data set creation command\n   could then have all the parameters necessary for the server file\n   system.  CCN might change to this approach if SRVR is adopted and if\n   people find the generalized pathname objectionable or unworkable.\n\n   For another interesting example of host-dependent problems, see\n   Hathaway's discussion of his DELE command in RFC 418 (pp.6-7).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                          [Page 7]\n\f\nRFC 430            COMMENTS ON FILE TRANSFER PROTOCOL      FEBRUARY 1973\n\n\n+-------++-------+-------+-------++-------+-------+-------++\n| \\ MODE||       |       |       ||       |       |       ||\n|   \\   ||STREAM | TEXT  | BLOCK ||STREAM | TEXT  | BLOCK ||\n|TYPE \\ ||       |       |       ||       |       |       ||\n+-------++-------+-------+-------++-------+-------+-------++\n|       ||       |       |       ||       |       |       ||\n| ASCII ||       |       |       ||       |       |       ||\n|       ||       |       |       ||       |       |       ||\n+-------++-------+-------+-------++-------+-------+-------++\n|       ||       |///////|       ||///////|///////|       ||\n| IMAGE ||       |///////|       ||///////|///////|       ||\n|       ||       |///////|       ||///////|///////|       ||\n+-------++-------+-------+-------++-------+-------+-------++\n| LOCAL ||       |///////|       ||///////|///////|       ||\n| BYTE  ||       |///////|       ||///////|///////|       ||\n|       ||       |///////|       ||///////|///////|       ||\n+-------++-------+-------+-------++-------+-------+-------++\n|       ||       |///////|       ||       |///////|       ||\n| EBCDI ||       |///////|       ||       |///////|       ||\n|       ||       |///////|       ||       |///////|       ||\n+-------++-------+-------+-------++-------+-------+-------++\n| ASCII/||///////|///////|///////||       |       |       ||\n| ASA   ||///////|///////|///////||       |       |       ||\n| VRC   ||///////|///////|///////||       |       |       ||\n+-------++-------+-------+-------++-------+-------+-------++\n|EBCDIC/||///////|///////|///////||       |///////|       ||\n| ASA   ||///////|///////|///////||       |///////|       ||\n| VRC   ||///////|///////|///////||       |///////|       ||\n|       ||///////|///////|///////||       |///////|       ||\n+-------++-------+-------+-------++-------+-------+-------++\n\n KEY:\n +---+\n |///| Excluded\n +---+  case\n\n\n\n        [This RFC was put into machine readable form for entry]\n    [into the online RFC archives by Helene Morin, Via Genie, 12/99]\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                          [Page 8]\n\f\n"
}