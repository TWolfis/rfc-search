{
  "series": "Request for Comments",
  "number": "310",
  "howpublished": "RFC 310",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0310",
  "url": "https://www.rfc-editor.org/info/rfc310",
  "title": "Another Look at Data and File Transfer Protocols",
  "pagetotal": "7",
  "year": "1972",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                         A. Bhushan\nRequest for Comments: 310                                        MIT-MAC\nNIC: 9261                                                  April 3, 1972\n\n\n            Another Look At Data And File Transfer Protocols\n\n   Our experience with ad hoc techniques of data and file transfer over\n   the ARPANET together with a better knowledge of terminal IMP (TIP)\n   capabilities and Datacomputer requirements has indicated to us that\n   the Data Transfer Protocol (DTP) (see ref 1) and the File Transfer\n   Protocol (FTP) (see ref 2) could undergo revision.  Our effort in\n   implementing DTP and FTP has revealed areas in which the protocols\n   could be simplified without degrading their usefulness.\n\n   This paper suggests some specific changes in DTP and FTP that should\n   make them more useful and/or simplify implementation.  The attempt\n   here is to stimulate thinking so that we may come up with a better\n   protocol at the forthcoming Data and File Transfer Workshop (see ref\n   3).\n\nExperience to Date\n\n   A number of ad hoc techniques of transmitting data and files across\n   the ARPANET already exist.  Perhaps, the most versatile of these\n   existing methods is the TENEX \"CPYNET\" system.  The \"CPYNET\" system\n   uses an ad hoc or interim file transfer protocol developed by Ray\n   Tomlinson and others at BBN to transmit files among the TENEX systems\n   on the ARPANET. [Private Communication with Bill Crowther, BBN.]\n\n   In CPYNET, the using process goes through the Initial Connection\n   Protocol (ICP) to server socket 7, establishing a full-duplex\n   connection with an 8-bit byte size.  Control information, including\n   user name, password, command (read, write, or append), file name, and\n   byte size for the data connection is transmitted from the using\n   process to the serving process.  The original full-duplex connection\n   is then closed, and a new full-duplex connection is established using\n   the original socket numbers but with possibly a different byte size.\n   The file is now transmitted on this newly established connection.\n   The end-of-file is indicated by closing the connection (the mode of\n   transfer is thus similar to DTP \"indefinite bit-stream\").\n\n   CPYNET has been used quite extensively for transfer of TENEX system\n   files.  Because data is not reformatted, and because the optimum\n   connection byte size may be used for data transfer, CPYNET is quite\n   efficient.  The PDP-10 (and there are quite a lot in the ARPANET)\n   works more efficiently with a 36 bit byte size which minimizes\n   packing and unpacking of data, and increases effective I/O speed\n\n\n\nBhushan                                                         [Page 1]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   (bit rate is 36 times the I/O word transfer rate instead of 8 times).\n   The closing and reopening of connections does increase overhead but\n   this is small in TENEX when compared with inefficiency introduced in\n   data transfer using an inappropriate byte size.\n\n   Data and file transfer has been achieved at other sites by a simple\n   modification of the user TELNET to enable the transfer of ASCII files\n   as terminal I/O data streams within the constraints of the TELNET\n   protocol.  An example of this approach is the use of the \"send.file\"\n   and \"script\" features within the MIT-DMCG user-TELNET.  Send.file\n   enables the PDP-10 (DMCG) user to transmit his local ASCII files to a\n   receiving process such as an editor at the remote host via a TELNET\n   connection.  The program allows for a variable buffer size for\n   transmission, and measures the transfer rate of information bits.\n   Script enables a user to receive an ASCII file from a remote host by\n   essentially printing it out (the terminal output stream is directed\n   to a local file).\n\n   Our initial experience with the use of send.file program has affirmed\n   the almost linear relationship between buffer size and transmission\n   rate (inverse relationship to processing cost) until the limits\n   imposed by allocates, NCP sending buffers, the IMP message size, or\n   the receiving process speed, are reached.  Our experiments have\n   indicated that TELNET processes in which the receiving process\n   \"looks\" at each character are slow and expensive.  The transfer rate\n   to most TELNET receiving processes ranges between 200 and 2,000 bits\n   per second.  The NCP-to-NCP transmission rate however is an order-\n   of-magnitude higher (2,000 to 20,000 bits per second).\n\n   A variation of the above method which avoids the character-by-\n   character processing of TELNET, is transmitting files via auxiliary\n   connections (other than the TELNET connections) with or without the\n   use of DTP.  We are collecting data on response times, connect times\n   and transfer speeds employing different transfer and buffering\n   strategies.\n\nTIP Capabilities and TIP Users\n\n   It appears now that TIPs will not support DTP in its present form.\n   The more elaborate TIPs with magnetic tape units will however,\n   support the DTP block mode (descriptor and counts) [Private\n   Communication with Bill Crowther, BBN.]  It is inconvenient, at the\n   very least, for a TIP user to use services based on DTP (such as\n   remote job service, file transfer, mail, and Datacomputer).  The TIP\n   philosophy is that \"the computational load and storage should be in\n   the hosts or in the terminals and not in the terminal processor.\"\n   (See ref 4.) To be consistent with this philosophy the protocols\n   should be simple and convenient to use from the user viewpoint.\n\n\n\nBhushan                                                         [Page 2]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   Ideally, TIP users would like to connect (using the initial\n   connection protocol) to the advertised service socket (including\n   logger socket1) in the remote host and type their commands in a\n   uniform, easy to use, format.  Allowing the use of ASCII within DTP\n   would facilitate this.  (An alternate approach is extending TELNET to\n   include DTP modes, particularly the indefinite bit-stream mode.)\n   Another step would be to use printable ASCII strings instead of\n   numeric codes for commands and arguments in user-level protocols.\n   Use of standard file system commands (with uniform interpretation and\n   format) will lead towards the existence of a Network Virtual File\n   System, much in the same line as Network Virtual Terminal defined in\n   TELNET protocol.\n\n   The transparent mode in DTP was specifically included to allow\n   convenient use by TIPs.  Since the TIPs will not support transparent\n   mode, it makes sense to do away with it.  This change would lead to a\n   simplier DTP which allows transfer in Block mode, and the indefinite\n   bit-stream mode.  (The suggested default which would be acceptable to\n   all including the TIPs, as it involves no overhead.).  We can then\n   make optional or do away with the now mandatory modes available\n   handshake.  The using process can indicate if it also accepts the\n   block mode for transfer.  (Either by modes available transaction, or\n   by an argument in the command string).  The server should accept\n   input in DTP mode as well as ASCII.  These fundamental changes in DTP\n   will make communication with TIPs a lot easier.\n\n   TIP users who do not have a mediating user-FTP process and a file\n   system in their TIP, would probably want to transfer files from input\n   devices or to output devices such as line printer, card reader or\n   punch, or magnetic tape.  These devices \"listen\" on specific \"ports\"\n   or sockets on a TIP.  It would be desirable to modify FTP to allow\n   sending data to a specified socket in a specified mode and type.  TIP\n   users would then find it convenient to obtain listing of their files\n   on a high-speed line printer, input their files from a card reader,\n   and keep back-up on cards or magnetic tapes.\n\nDatacomputer Requirements\n\n   We have been having a continuing dialogue with CCA personnel (Dick\n   Winter in particular), regarding CCA's plans for data and file\n   transfer on the Datacomputer, and their specific requirements.  Dick\n\n\n\n\n\n\n\n\n\n\nBhushan                                                         [Page 3]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   Winter will be speaking on this subject at the Data and File Transfer\n   Workshop.  This is an attempt to summarize the main points of our\n   discussion, and their implication for data and file transfer.\n\n   First, CCA appears quite flexible at this stage regarding the manner\n   in which Datacomputer is to be used.  Even the Datalanguage (see ref\n   5) is flexible and can undergo change.  However, CCA would like some\n   changes in the current file transfer protocol and its envisioned use.\n\n   Ideally, CCA would like to see a single full-duplex connection for\n   transfer of all control information which is in Datalanguage.  This\n   information is generated by a process, which may be a user at a\n   console, or a user program.  Ability to inter-mix data and control\n   information would be definite advantage.  The Datacomputer would\n   probably support DTP and allow use of TELNET-ASCII.\n\n   Data may alternatively be sent to or received from a separate user\n   defined port (which may be a socket).  It would be advantageous if a\n   user could instruct the Datacomputer to transfer data to or from a\n   file in remote system via FTP (assuming a server-FTP in remote\n   system).  CCA is currently not committed to this idea, but is\n   considering it.\n\n   In the CCA view, the Datacomputer represents a data management\n   facility with Datalanguage as its command language.  From the\n   viewpoint of Datacomputer as an FTP server, FTP commands be a subset\n   of the Datalanguage.  It is therefore desirable that FTP commands be\n   printable ASCII strings instead of numeric codes.\n\nRemote Job Service Requirements\n\n   Initially two separate protocols were proposed for Remote Job Service\n   (RJS).  One was the NETRJS protocol (see ref 6) for remote job\n   service from large Hosts and the other was the NETRJT Protocol (see\n   ref 7) for remote job service from TIPs (and other mini-Hosts).  The\n   current thinking however, is to move towards a single RJS with \"as\n   much overlap as possible between the methods of dealing with these\n   two user populations.\"  (See ref 8.)  Perhaps inclusion of ASCII\n   within DTP would make this feasible.\n\n   The existing proposals for DTP and FTP have been considered somewhat\n   less than optimal for RJS needs.  Specific drawbacks of DTP and FTP\n   have been pointed out in the handling of data structures and data\n   types.  Most of these problems seem relatively easy to resolve.  It\n   would involve making Network ASCII the default data type (acceptable\n   to all hosts) and providing a way in FTP for proposing and rejecting\n   alternative data types and data structures.\n\n\n\n\nBhushan                                                         [Page 4]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   Another inadequacy of FTP (which pertains to other applications as\n   well) is in the area of error recovery.  Currently there is no way to\n   \"restart\" transmission if an element in the transmission path fails.\n   One solution suggested has involved the use of sequence number (see\n   ref 9).  A number of other solutions exist to the problem.  These are\n   discussed later in the section 'FTP Reconsidered'.\n\nDTP Reconsidered\n\n   The aspiration for DTP was that it would provide a uniform mechanism\n   for separating information into its logical structure (records,\n   files, and control), and rudimentary error control.  The evaluation\n   of DTP and its modes should be on the basis of speed (real-time),\n   efficiency (processing cost), reliability (error control and\n   recovery), and the ease of its use.\n\n   It is now clear that unless DTP was significantly revised, the TIP\n   and other mini-Host user would find it difficult to use services\n   based on use of DTP.  Allowing the use of ASCII within DTP, and using\n   defaults instead of the \"modes available\" handshake, would alleviate\n   this problem, but compromise the DTP error control function.  Whether\n   error control belongs at the DTP level or at a higher level needs\n   further discussion.\n\n   DTP, in its present form, does not provide sufficient error control\n   and recovery procedures.  To make DTP more useful, either it should\n   be simplified (at least from a user viewpoint), or it should be\n   extended to include better error control with built in error\n   recovery, and possible handling of data types and data structures.\n\n   In the simplified version, DTP would only be a format procedure in\n   which data could be transmitted as ASCII (no format) with escape to\n   an 8-bit transparent (indefinite bit-stream) mode or in data blocks\n   (descriptor and count mode).  The choice of which mode to use, and\n   all error control, error recovery, and aborts would be handled by the\n   higher-level protocol.\n\n   The utility of the block mode in data transfer has been questioned by\n   many who suggest that it puts a large overhead for providing the\n   simple function of indicating end-of-file, and separating data and\n   control information.  The alternative data transfer strategy is to\n   use separate connections for control and data information and/or\n   close and reopen connections.  This causes an overhead of a different\n   sort, but has the advantage that the byte size for connection may be\n   chosen to optimize data transfer.\n\n\n\n\n\n\nBhushan                                                         [Page 5]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   A drawback of present DTP is that it is geared to transfer of 8-bit\n   bytes.  Perhaps a good strategy for data transfer would be to allow\n   sending data in an agreed upon transfer mode.  The transfer mode\n   chosen should determine the byte size for connection, the data type\n   chosen, and any data structure information.  This mode may be chosen\n   at the DTP level, or at the using protocol level.\n\nFTP Reconsidered\n\n   The aspiration for FTP was that it would facilitate file management\n   and file transfer in the ARPANET Virtual File System.  FTP success\n   should be evaluated by the extent of its use, convenience and\n   efficiency in its use, and its suitability for other applications\n   such as Datacomputer, RJS, and Mail.\n\n   Wide use of FTP would be possible if a user could use an FTP-server\n   directly without the help of a mediating DTP/FTP-User process.  This\n   would require that commands be ASCII strings instead of numeric\n   codes, and that ASCII characters be an acceptable input.  Such a\n   change in FTP would greatly increase its acceptance at the cost of\n   making the server-implementation more complex.  Combined\n   implementation, however, would be simplified as the mediating FTP-\n   user process (if used at all) would be simplified.\n\n   Efficiency of transfer is an important factor affecting the\n   usefulness of FTP.  File transfer may be very expensive (in terms of\n   CPU time) and slow (in real-time) if an inappropriate transfer\n   strategy is used (e.g., inappropriate byte size).  Every attempt\n   should be made to optimize transfer of data.  A good strategy may be\n   to allow transfer of files over a separate connection or close and\n   reopen connections (using perhaps a different byte size).  A problem\n   with indicating end-of-file by closing connection is that is\n   uncertain if the connection was closed because end-of-file was\n   reached, or because of a failure or error condition.  Perhaps \"NCP\n   interrupts\" could be used in addition to a \"close\" to indicate\n   definite end-of-file condition.\n\n   A drawback in the present FTP strategy is that it has no restart\n   procedure.  One proposal for restart has involved the use of the\n   sequence numbers used in DTP block mode.  Our feeling is that perhaps\n   restart may best be accomplished by incorporating a command in FTP\n   that allows a user to specify the place in file where to begin\n   retransmission.  A possible solution is to use the \"SPF\" command\n   implemented in the UCSB Simple-Minded File System (see ref 10).\n   Another solution may be to have optional arguments for retrieve and\n   store commands that allow selective retrieval and replacement\n   (specified by bits, character, words, lines, pages or segments).\n\n\n\n\nBhushan                                                         [Page 6]\n\f\nRFC 310               Another Look At Data And FTP            April 1972\n\n\n   Another useful addition to FTP would be a protocol procedure between\n   user and server to agree to data type, data structure, and mode for\n   file transfer.  This would enable the user and server to reach the\n   optimum file transfer strategy acceptable to both.\n\nConcluding Remarks\n\n   We have discussed in this paper what we see as the major problem\n   areas in the present DTP and FTP specifications.  We hope this\n   discussion will stimulate thinking, so that we can arrive at revised\n   specifications for DTP and FTP that satisfy all the diverse needs in\n   an elegant manner.\n\nREFERENCES\n\n      1. The Data Transfer Protocol, Bhushan, et al, NWG/RFC #264, NIC\n   #7212.\n\n      2. The File Transfer Protocol, Bhushan, et al, NWG/RFC #265, NIC\n   #7213.\n\n      3. Data and File Transfer Workshop Announcement, A. Bhushan,\n   NWG/RFC #309, NIC #9260.\n\n      4. The Terminal IMP for the ARPA Compuer Network, Ornstein, et al,\n   SJCC, 1972, NIC #8218.\n\n      5. Datalanguage, Computer Operation of America, Datacomputer\n   Project, Working Paper No.3, October 29, 1971, NIC #8208.\n\n      6. Interim NETRJS Specifications, R. T. Braden, NWG/RFC #189, NIC\n   #7133.\n\n      7. NETRJT - - Remote Job Service Protocol for TIPs, R. T. Braden,\n   NWG/RFC #283, NIC #8165.\n\n      8. RJS Protocol Meeting Notes, 25 February 1972, A. McKenzie\n   (limited distribution).\n\n      9. A Suggested Addition to File Transfer Protocol, A. McKenzie,\n   NWG/RFC #281, NIC #8163.\n\n      10. Network Specifications for UCSB's Simple-Minded Files System,\n   James E. White, NWG/RFC #122, NIC #5834\n\n        [This RFC was put into machine readable form for entry]\n     [into the online RFC archives by H\ufffdl\ufffdne Morin, Viag\ufffdnie 10/99]\n\n\n\n\nBhushan                                                         [Page 7]\n\f\n"
}