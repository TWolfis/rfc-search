{
  "series": "Request for Comments",
  "number": "357",
  "howpublished": "RFC 357",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0357",
  "url": "https://www.rfc-editor.org/info/rfc357",
  "title": "Echoing strategy for satellite links",
  "pagetotal": "13",
  "year": "1972",
  "month": "jun",
  "body": "\n\n\n\n\n\nNetwork Working Group                                      John Davidson\nRequest for Comments: 357                           University of Hawaii\nNIC: 10599                                                 Will Crowther\nCategories: Remote Controlled Echoing, Satellite, TELNET             BBN\nReferences: RFC's 346, 355, 358, 318                      John McConnell\n                                                                  ILLIAC\n                                                              Jon Postel\n                                                                    UCLA\n                                                           June 26, 1972\n\n\n                An Echoing Strategy For Satellite Links\n\nI. Introduction\n\n   As mentioned in RFC 346 (\"Satellite Considerations\" by Jon Postel)\n   those interactive systems which provide echoing for full-duplex\n   terminals over the ARPANET become more awkward to use as transmission\n   delays increase.  The reason, of course, is that a character's round\n   trip time is added to the inherent echo delay of the server with the\n   result that the terminal echoing appears extremely sluggish.\n\n   For a terminal separated from its server by a single satellite link,\n   the delay will be such that even if echoing at the server were\n   instantaneous, the latency between keying and printing of an input\n   character will be nearly half a second.  If, in addition, the\n   character is routed thru a portion of the surface net, the delay will\n   be of course increase.  It is estimated that echo delays of at least\n   one second will not be uncommon.\n\n   This document describes a strategy which will eliminate the delay\n   associated with simple echoing and allow the transmission delay to be\n   hidden in the cost of computation only.  This scheme is proposed as\n   an optional addition to existing User TELNETs; its use requires the\n   explicit support of a cooperating server process.\n\nII.  Standard Echo Strategy\n\n   Echoing for locally connected full-duplex terminals is normally\n   provided at the server by a resident system task called the (e.g.)\n   Terminal Handler.  The Terminal Handler echoes on a one-for-one or\n   simple replacement basis and buffers all typed input on behalf of the\n   user process.\n\n   To let the user process operate most efficiently, the Terminal\n   Handler should collect characters until a complete command or\n   parameter (or whatever) has been typed.  Then, presumably, the\n   process can do some significant computing.  Since the user process\n\n\n\nDavidson                                                        [Page 1]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   knows the syntax of the string it expects, it can specify to the\n   Terminal Handler those characters which delimit completed parameters.\n   Such characters are called 'Wakeup Characters' since the user process\n   is awakened as they are echoed.\n\n   Certain commands keyed by the user will require an output response\n   from the process.  In order that the typed commands be followed by\n   its response and be separated from succeeding commands, the Terminal\n   Handler must suspend echoing of user type-ahead.  It can resume\n   echoing (starting for type-ahead - with the unechoed characters in\n   the buffer) as soon as the process has stated (implicitly or\n   explicitly) that it has completed the output response.\n\n   Characters which cause the Terminal Handler to suspend echoing are\n   called 'break characters' They are specified by the user process\n   based upon the syntax of the expected input.  Normally break\n   characters are also wakeup characters.  As examples:\n\n      1. A text editor may gobble up typed English sentences every time\n         a period or question mark is echoed.  The two characters are\n         wakeup characters only.  There is no need to suspend echoing.\n\n      2. In some systems, an ESC character is used to invoke command\n         recognition.  The user who types\n\n               CO [ESC] ABC [ESC] XYZ\n\n         should see as output\n\n            COPY (FROM FILE) ABC (TO FILE) XYZ\n\n         The ESC is both a break and a wakeup.  The printout should be\n         the same no matter how fast the user types.\n\n   The server must provide a means for each user process to communicate\n   the following to the Terminal Handler:\n\n      1. the set of wakeup characters,\n      2. the set of break characters,\n      3. which break characters should and which should not be echoed,\n         (Some break characters - such as ESC in example 2 - should not\n         be echoed).\n      4. completion of an output response,\n      5. whether or not to echo characters. (Not echoing is useful in\n         \"hide your input\" applications.)\n\n\n\n\n\n\nDavidson                                                        [Page 2]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   As far as implementation, 1. and 2. could be communicated by allowing\n   the user process to specify a 128-bit (for an ASCII device) table\n   with 1's set for each wakeup character, and another table with 1's\n   set for each break character.  This approach becomes fairly expensive\n   in terms of core memory as the number of terminals becomes large; the\n   system must store these bit tables itself since in most cases the\n   user process will not be in core while echoing is being done by the\n   Terminal Handler.\n\n   To reduce the storage requirements, the system can make known to all\n   its programmers a limited number, say 4, of supported break\n   characters for his process from, for example:\n\n      a. alphanumeric characters,\n      b. punctuation characters,\n      c. echoable control characters (including the bell and CR, etc.),\n         or\n      d. non-echoable control characters (Control-C, etc.),\n\n   by specifying in a system call which break set(s) should be used.\n   This requires no more than 4 bits of system storage per terminal, and\n   a single table to identify the set(s) to which each of the 128\n   possible ASCII characters belongs.\n\n   For the user process to communicate (3) to the Terminal Handler\n   (which break characters should and which should not have echoed), the\n   process can specify another 4 bit field with 1's set for those break\n   classes whose members should be echoed.  For the 4 classes above,\n   only 3 bits would be required since members of class (d) are defined\n   to be non-echoable.\n\n   To communicate the completion of an output response (4), the user\n   process could issue an explicit system call; or, the Terminal Handler\n   could assume completion when the user process requests input of the\n   first character following the break.\n\n   \"Hide your input\" (5) would be communicated by a system call which\n   specifies either:\n\n     (a) \"break on every character and don't echo any break characters\",\n         or, for example\n     (b) \"don't echo anything and break on punctuation, or any control\n         character\" for an alphanumeric password,\n\n   depending on the syntax of the expression to be hidden.\n\n\n\n\n\n\nDavidson                                                        [Page 3]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\nIII.  Definitions\n\n   Several new terms need to be defined, some of which are direct\n   extensions of the terms used in the \"standard echo strategy\"\n   description.  There is no reason to insist that the four buffers\n   presented all be implemented as individual constructs; they are\n   logically separated for clarity in the discussions which follow.\n\n   Remote Controlled Echoing (RCE)\n\n      This is the name for the echo strategy described in this document.\n      Echoing will be controlled by the (remote) server but performed by\n      the User TELNET.\n\n   Input Buffer\n\n      This is a logical buffer used by a User TELNET to hold characters\n      in sequence as they are received from the terminal keyboard (after\n      they have been converted to NVT characters).\n\n   Transmission Buffer\n\n      This is a logical buffer used by a User TELNET to hold NVT\n      characters which have been typed but have not yet been transmitted\n      to the server.\n\n   Output Buffer\n\n      This is a logical buffer used by a User TELNET to hold the NVT\n      characters received from the server.\n\n   Print Buffer\n\n      This is a logical buffer residing in the User TELNET from which\n      characters will be sent in sequence to the terminal printer. (The\n      output buffer contains NVT characters which may have to be\n      converted to characters employed by the actual terminal.)\n\n   Break Classes\n\n      The 128 possible (7-bit) ASCII characters employed by the Network\n      Virtual Terminal can be partitioned into several quasi-equivalence\n      classes (for example alphabetic, numeric, punctuation characters,\n      etc.). These classes can be defined so that each character is a\n      member of at least one class, although it may belong to more than\n      one.\n\n\n\n\n\nDavidson                                                        [Page 4]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n      A server process may indicate to a User TELNET that certain of\n      these classes (or all, or none) are to be considered break\n      classes.  That is, a break class is an equivalence class which is\n      of special significance to the server process.  In terms of the\n      discussion of section II, the Server recognized 4 equivalence\n      classes any combination of which might be designated as break\n      class by a particular process.\n\n      The RCE implementation will have more than 4 equivalence classes\n      (perhaps as many as 8) to provide more flexibility in the choice\n      of break character sets.\n\n   Break Action\n\n      Two break actions are possible:\n\n      (1) a break character encountered in the input buffer IS moved to\n          the print buffer at the appropriate time, or\n      (2) a break character encountered in the input buffer IS NOT moved\n          to the print buffer.\n\n      The server process will specify which break action should be\n      followed. (The two actions correspond to echoing or not echoing\n      the break character.)\n\nIV.  Description\n\n   (This description is written in terms of the TIP which, of course,\n   embodies a User TELNET.)\n\n   Remote Controlled Echoing is an attempt to remove the echo\n   responsibility from the Terminal Handler and push it off into the\n   TIP; wakeup processing is still handled at the server.  The process'\n   interface (system calls, etc.) to the server's Terminal Handler need\n   not change, but the (abbreviated) Terminal Handler (actually a Server\n   TELNET) must find a way to relay the process' echo requirements to\n   the TIP.  It does this with TELNET commands and control information.\n   System calls and echo parameters (break classes, etc.) peculiar to a\n   particular serving Host must be interpreted by the Server Telnet\n   commands.\n\n   Character Flow\n\n      Refer to figure 1.  A character received from a full-duplex\n      terminal will be converted to its NVT equivalent and placed in\n      both the transmission AND the input buffers.  The TIP's\n      transmission strategy determines when it will be removed from the\n      transmission buffer; the server's RCE control commands dictate\n\n\n\nDavidson                                                        [Page 5]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n      when it will be removed from the input buffer.\n\n      A character received from the server will be placed in the output\n      buffer.\n\n      Of the three labeled paths DISCARD, ECHO and OUTPUT, exactly one\n      is enabled at all times.  RCE commands dictate which one.  Thus\n      characters may\n\n         (DISCARD:) be removed in sequence from the input buffer and\n                    discarded,\n         (ECHO:)    be removed in sequence from the input buffer and\n                    placed in the print buffer, of\n         (OUTPUT:)  be removed in sequence from the output buffer and\n                    placed in the print buffer.\n\n      From the print buffer they will be converted from NVT characters\n      and be immediately send to the terminal's printer.\n\n                              +----------------------+\n                              | Terminal Keyboard    |\n                              +----------------------+\n                                           |\n                                       Convert to NVT characters\n      To       +-------------------+       |\n   Server \u003c----|Transmission Buffer|       |\n               +-------------------+       |      +-----From Server\n                        ^                  |      |\n                        |------------------+      |\n                        V                         V\n                +-----------------+       +-----------------+\n                | Input Buffer    |       |  Output Buffer  |\n                +-----------------+       +-----------------+\n                    |        |                    |\n            DISCARD |        +--ECHO---+      +---+ OUTPUT\n                    |                  |      |\n                    V                  V      V\n                   To          +----------------------+\n              Oblivion         |     Print Buffer     |\n                               +----------------------+\n                                          |\n                                      Convert from\n                                     NVT Characters\n                                          |\n                                          V\n                                 To Terminal Printer\n\n                 Figure 1.  Character Flow within the TIP\n\n\n\nDavidson                                                        [Page 6]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   Commands: Server to Host\n\n      The following are the proposed TELNET commands sent by the server\n      process to the TIP.  Commands (2) thru (5) should not be sent if\n      RCE is not being used.\n\n        (1) Use Remote Controlled Echoing.  The server asks the TIP to\n            employ the echo strategy described in this document.  The\n            TIP can respond either YES (I will use it) or NO. (It is\n            suggested that the response YES also be \"Use RCE\" to\n            eliminate race conditions.)\n\n        (2) Set Break Action.  This is actually 2 commands.  The server\n            can set the break action to echo or not echo a break\n            character.\n\n        (3) Set Break Classes.  This command specifies those equivalence\n            classes which are to be considered break classes.  It will\n            be a two (8-bit) byte command.\n\n            Note: The envisioned implementation requires the TIP to have\n            a table with one entry per ASCII character.  Each entry is\n            formatted with one bit position for each equivalence class,\n            and a bit is set or reset according as the given character\n            is or is not a member of that class.  The server sends a\n            \"Set Break Classes\" command (1st byte) followed by a\n            formatted control word (2nd byte) to the TIP with bit\n            positions set for those equivalence classes which represent\n            break classes for the server process.\n\n            When a (virtual) character is taken from the input buffer\n            the TIP does a table look-up indexed by the character.  If a\n            simple ANDing of the table entry with the terminal's control\n            word yields a non-zero result, a break was received.\n            (Receipt of a break character enables the OUTPUT path.)\n\n        (4) Move to Break (MTB).  This command directs the TIP to move\n            characters in sequence from the input buffer to the print\n            buffer until a break character is encountered.  The break\n            character will be moved or discarded depending on the\n            previously-specified break action.  (Essentially, MTB\n            enables the ECHO path.)\n\n        (5) Delete to Break (DTB).  This command directs the TIP to move\n            characters in sequence from the input buffer and discard\n            them until a break character is encountered.  The break\n            character will also be discarded.  This provides a\n            convenient mechanism for hiding a user's input.  (DTB\n\n\n\nDavidson                                                        [Page 7]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n            enables the DISCARD path.)\n\n   Commands: User to Server\n\n            The USER may send (via TIP) a request to the server process\n            requesting that it \"Use Remote Controlled Echoing\" to which\n            the server must respond \"YES\" or \"NO\".\n\n   General Operation\n\n      Very simply, the Remote Controlled Echoing strategy works as\n      follows: The Server TELNET will tell the TIP to (essentially)\n\n         (1) echo a message,\n         (2) print the process' response to that message,\n         (3) echo the next message\n         (4) print the response to that message\n                      . . .\n\n      etc., to effect an orderly listing of inputs and responses much as\n      would be imposed when using a half-duplex device.\n\n      The actual interaction depends on the control commands.  When a\n      terminal-serving process is invoked on behalf of a TIP user, the\n      Server TELNET will send the \"Use RCE\" command; the TIP will\n      respond \"YES\".  Then the Server TELNET will send the \"Set Break\n      Action\" and \"Set Break Classes\" commands to properly reflect the\n      break strategy requested by the terminal-serving process.  Lastly\n      the Server TELNET will send an MTB command.  This enables the ECHO\n      path.\n\n      The TIP removes characters from the input buffer and places them\n      in the print buffer.  When it encounters a break character, it\n      performs the break action specified, and enables the OUTPUT path.\n\n      Characters are then moved in sequence from the output buffer to\n      the print buffer.  When an MTB (or, DTB) is encountered, it is\n      discarded and the ECHO (DISCARD) path is enabled.\n\n      Etcetera.\n\n      The Server TELNET may change the break action or break classes\n      after an interaction, but should normally do so prior to sending\n      the MTB or DTB commands.  It should only send an MTB (DTB) after\n      all process output from the previous message has been sent.\n\n\n\n\n\n\nDavidson                                                        [Page 8]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   Why Does This Work?\n\n      The RCE strategy described above produces the correct result at\n      the user's terminal because it is in essence the same scheme used\n      by the Terminal Handler which normally provides the echoing at the\n      serving site.  Initially, the characters are echoed as they are\n      typed; then a break character is keyed, echoing is suspended.  If\n      the process produces any output response, it is printed before\n      echoing of subsequent input.\n\n      Echoing of the next command begins, if there is type-ahead, with\n      the characters in the input buffer, and even if the input buffer\n      is emptied immediate echoing of keyed input from the terminal is\n      provided since the ECHO path remains enabled up to a break.\n\n   An Example\n\n      (In the following, we assume all break characters are also wakeup\n      characters and (carelessly) treat the two interchangeably.)\n\n      Suppose a TIP user attempts to login to a remote server with the\n      properly formatted message\n\n            LOG NAME PASSWORD [CR]\n\n      and that the Server TELNET has requested the use of RCE.\n      Presuming that the break (and wakeup) characters sets are\n      appropriately defined to include space and CR (and that the break\n      action specifies they should be echoed), the primary sequence of\n      RCE commands which will drive the TIP to produce the correct\n      printout at the user's terminal is:\n\n         (1) MTB (to print \"LOG \"), and since the space is a break\n            character,\n         (2) MTB (to print \"NAME \"),\n         (3) DTB (to delete \"PASSWORD [CR]\" (See section VI, number\n            11)), and perhaps a message followed by\n         (4) MTB (to reenable the echo path).\n\n      We investigate in some detail how interaction at the\n      process/Server TELNET interface causes these commands to be send\n      to the TIP.\n\n      When the EXEC is invoked, it issues a system call to set its break\n      classes.  The Server TELNET interprets the system call in terms of\n      the classes supported by RCE, and sends the appropriate two-byte\n      \"Set Break Classes\" (SBC) command to the TIP.  A space is among\n      the characters of the break set.\n\n\n\nDavidson                                                        [Page 9]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n      The EXEC asks for input, so the Server TELNET send MTB ((1)\n      above).  We presume the EXEC blocks until some input is available.\n\n      The EXEC is awakened when the first space arrives; it recognizes\n      the LOG command to be a call upon the LOGIN subsystem which it\n      (promptly!) invokes.\n\n      The LOGIN process issues a system call to set its break classes\n      (this time both space and CR are included, and, as before, the\n      Server TELNET forwards the command as an SBC).  Then it asks for\n      input (so the Server TELNET sends MTB ((2) above)), and blocks\n      until the second space arrives.\n\n      When the LOGIN process has verified the existence of a user with\n      name NAME, it issues a system call to suppress printing of the\n      next parameter (the password).  In compliance, the Server TELNET\n      sends DTB ((3) above).\n\n      Once the password has been examined and verified, a message like\n\n            [CR][LF] LOGIN COMPLETED [CR][LF]\n\n      can be sent, followed by a request for input.  The Server TELNET\n      thus forwards an MTB ((4) above) and the sequence is completed.\n\n   Another example\n\n      Suppose in the above example the user had typed\n\n            LOG NAME[CR]\n\n      When the LOGIN process regained control, it would have noted that\n      the break was a CR instead of a space.  It then could have issued\n\n            [LF]password =\n\n      which the Server TELNET would follow (when LOGIN requests print\n      suppression) with DTB.  When the TIP had finished its output, the\n      DISCARD path would be enabled and the user's terminal would have\n      printed:\n\n            LOG NAME[CR]\n            password =\n                       ^\n\n      with the cursor positioned just after the =.  The TIP will hide\n      the characters of the password.\n\n\n\n\nDavidson                                                       [Page 10]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   Another Example\n\n      Suppose a user were using a text editor, TEXT, to create a source\n      file of English sentences.  The TEXT subprocess might allow only\n      non-formatting control characters (e.g., \"Control-C\") as break\n      characters.  The RCE strategy would allow the user to receive\n      immediate echoing for all his input until he typed such a control\n      character.\n\nV. Discussion\n\n   The Remote Controlled Echoing Strategy is designed to provide echoing\n   for a full-duplex terminal as if it were locally connected to its\n   server.  The effect of the long transmission delays will only be\n   evident as an increase in the processing performed at a break.  Only\n   in the most interactive systems will such a delay be consistently\n   noticeable.  For example if a user invokes a long FORTRAN\n   compilation, the fact that its start is delayed for half a second\n   will not normally be evident.\n\n   Furthermore, users who are able to type several messages ahead may\n   only notice a processing delay as a result of the first break-\n   interaction; both transmission and processing of successive messages\n   may occur during the printing of \"echoes\" and responses to previous\n   messages.\n\n   Transmission considerations:\n\n      In the standard echoing scheme, characters are buffered at the\n      same server as they are keyed.  But the user process does not see\n      them until a wakeup character has been typed.  This means a TIP\n      using RCE could buffer characters in the transmission buffer until\n      a wakeup occurs and then send off the whole bunch.  Unfortunately\n      we have chosen, for simplicity, to keep all knowledge of wakeup\n      characters at the serving site.  This means that the TIP may\n      buffer beyond a wakeup (if it is not also a break) and delay the\n      process from doing some useful work.  However, since in this case\n      no output is expected from the process, no noticeable delay is\n      visible to the user, except that the next break interaction may\n      take a little longer.\n\n      If the TIP chooses to buffer input before transmission, it will\n      transmit AT LEAST at every break character.  The SERVER should be\n      able to instruct the TIP to transmit more often if it is\n      appropriate.\n\n\n\n\n\n\nDavidson                                                       [Page 11]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n   An Example:\n\n      Conversational output LINKING is an example where transmission\n      strategy is separate from the break and wakeup strategies.\n      Transmission should occur on every character so that the character\n      can be promptly printed at each linked terminal, but no break or\n      wakeup need occur until a special escape character is typed (this\n      reawakens the EXEC, for example).\n\n      Conversational output linking also introduces another funny:\n\n   Unsolicited Output:\n\n      What happens when the ECHO (or DISCARD) path is enabled, but the\n      input buffer is empty (i.e. immediate echoing is occurring) and\n      something arrives in the output buffer? This \"something\" cannot be\n      a response to a previously keyed command, or the ECHO path would\n      be disabled. (This proof is left to the reader!) It is most likely\n      a system message like\n\n\n         [CR][LF]SYSTEM WILL GO DOWN IN 5 MINUTES[CR][LF]\n\n      or, a character arriving from another linked terminal.\n\n      Since such output does not fit neatly into our RCE scheme, the\n      following kludge is proposed.  Unsolicited output should cause the\n      OUTPUT path to be enabled.  The occurrence of either an MTB (DTB)\n      Or Empty Output Buffer will reenable the ECHO (DISCARD) path.\n\nIV.  Orthogonal Issues\n\n   Several other mechanisms may reasonably be incorporated within this\n   proposed addition to TELNET.  The problems which need some further\n   discussion include:\n\n         1)  Some means should be provided for the server to clear the\n             input, transmission, print and output buffers.\n         2)  Some means should be provided for the user to immediately\n             clear the output buffer (i.e. suppress printing of lengthy\n             output).\n         3)  The server may want to ask about the number of characters\n             remaining to be printed.\n         4)  A special tag character may be required to note where\n             clearing of the input buffer occurred.\n         5)  The TIP's transmission strategy should be specifiable by\n             the server; perhaps a \"Set Wakeup Classes\" command should\n             be implemented.\n\n\n\nDavidson                                                       [Page 12]\n\f\nRFC 357         An Echoing Strategy For Satellite Links        June 1972\n\n\n         6)  The server should be able to cause the TIP to break on the\n             n-th input character regardless of whatever a break\n             character has been encountered.\n         7)  Should the TIP or the server be responsible for properly\n             echoing a formatting control character such as a TAB?\n         8)  The proper equivalence classes of ASCII characters have to\n             be finalized.\n         9)  How should a CR be echoed?\n         10) Should one-for-one echo replacement (e.g. \"$\" for ESC) or\n             multi-character substitution (e.g. \"^A\" for Control-A) be\n             provided by the TIP?\n         11) The proposed DTB command directs the TIP to also discard\n             the delimiting break character.  Should the break character\n             discard rather be dependent on setting the Break Action to\n             \"don't echo\" before sending the DTB?\n\n   Several of these issues will be addressed in RFC 358.\n\nVII.  Conclusion\n\n   This document has presented a proposed optional addition to the User\n   TELNET.  The next step is to perform some simulations and to\n   incorporate RCE into an experimental version of TELNET.\n\n   No recommendation is made that the current TELNET be discarded.  For\n   example RCE should not be used for those half-duplex devices which\n   perform their own \"echoing\".  If RCE is adopted as an alternate means\n   of echoing, changes to those TELNETs choosing not to implement it\n   should be minimal.  Switching from RCE to the current echo mechanism\n   is an immediate result of either user or server sending a \"You Echo\"\n   (or \"I'll Echo\").\n\n   Much of the machinery required to implement RCE already exists at the\n   interface between the server process and its Terminal Handler or\n   Server TELNET.  This means that no server process need be changed,\n   but that the process' means of specifying break classes, break\n   actions and echoing conventions must be interpreted by the Terminal\n   Handler and reissued to the TIP in terms of the corresponding RCE\n   commands.\n\n\n\n\n\n         [ This RFC was put into machine readable form for entry ]\n       [ into the online RFC archives by Erik J. Verbruggen 12/97 ]\n\n\n\n\n\nDavidson                                                       [Page 13]\n\f\n"
}