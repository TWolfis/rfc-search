{
  "series": "Request for Comments",
  "number": "187",
  "howpublished": "RFC 187",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0187",
  "url": "https://www.rfc-editor.org/info/rfc187",
  "title": "Network/440 Protocol Concept",
  "pagetotal": "11",
  "year": "1971",
  "month": "jul",
  "body": "\n\n\n\n\n\n                     A NETWORK/440 PROTOCOL CONCEPT\n\nNetwork Working Group              Douglas B. McKay\nRequest for Comments #187          Donald P. Karp\nNIC #7131                          IBM Thomas J. Watson Research Center\nCategories:  C3,C4,C5,C6,D7        Yorktown Heights, New York\nUpdate:  None\nObsoletes:  None\n\n\n\n\n\n\n\n                 This RFC is being circulated as an\n                 information RFC. Its intent is to\n                 convey some of the thinking and\n                 philosophy that went into IBM's\n                 network protocol and overall\n                 network design.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nINTRODUCTION\n\nNetwork/44O is an experimental project in computer netting that was\nundertaken by the Computer Science Department of IBM Research. The\nprimary objectives of the project have been to understand netting,\nidentify design problems and implement the solutions to these problems.\n\nThe above objectives have been met since a network has been built and is\npresently being operated by the project. Implementation discussions\ntranspired with another department at Research in order to define a\nrealistic user system interface. The protocol defined for the project's\nnetwork is also the basis for the operation of an IBM OS network.\n\nThe Network/44O project has also been involved in the philosophical and\narchitectural concepts of network systems. The basic premise in our work\nis the concept of a logical network machine.(1) The main theme is to\ntreat all systems involved in the network as a part of a single (large)\nmultiprocessor system. Although many of the ideas have been based on\nhypothetical concepts, an equal number of ideas were derived from our\nnetwork implementation and operating experience.\n\nThe scope of this paper is to describe the philosophy and definition of\na network protocol that is not restricted to any physical configuration.\nThis is exemploified by the fact that a major portion of the ideas are\nimplemented in IBM's two major operational networks, one of which is a\ndistributed configuration and the other a star configuration.\n\n(1) Intenet - Report 2, February 1, 1970, Computer Science Department,\n    IBM Corporation, T. J. Watson Research Center, Yorktown Heights,\n    New York.\n\nBASIC ASSUMPTIONS\n\nThere was a necessity to delineate many network functions in setting up\nan operating protocol. These functions included switching control,\nbuffer control, message control, and operating control. The operating\ncontrol function becomes further complicated as the user is able to\nprogram the network as if it were a single operating system. The\nprotocol had to be further broken dowm into detailed functions in order\nto cope with error recovery and handling techniques.\n\nThe original thoughts on handling these functions were to provide two\nbasic realms of control. The net control is a higher level function that\nrecognizes and controls all aspects of net jobs and the execution of job\nsteps in the network machine. In addition, a communication control\nfacility (referred to as an \"Express Interpreter\") was incorporated to\nprovide fast service for all messages that were to be moved between user\nsystems without intervention by the net controller.\n\n\n\n                                                                [Page 2]\n\f\n                       ---------------\n                       |      NC     |\n                       ---------------           ^\n                              |                 /\n         ----\u003e  in            |         out    /\n               --------------------------------\n               |      Express Exchange        |\n        \u003c----  --------------------------------\n                out                     in  ^\n                                              \\\n                                               \\\n\nThe above figure illustrates the two major functions with messages\ntravelling in both directions and directly through the Express Exchange,\nexcept in the case of messages that must be acted on by the Net\nController. These messages will be explained in detail later.\n\nThese two functions can exist on any system and operate in any physical\nconfiguration providing the control information reflects the\nconfiguration so that proper operation can be maintained. There is no\nreference to physical configuration in this paper because of the\nflexible nature of the protocol and its adaptability to any\nconfiguration. For example, in the case of a distributed net, the\nExpress Exchange would pass messages directly to the next station\nwithout any 'NC' overhead. The 'NC' would only come into play at the\nfinal destination and with the same reasoning, the 'NC' would not have\nto be present at every station.\n\nDEFINITIONS\n\nBefore proceeding with the discussion of protocol and control, the basic\nmessage content and concepts must be defined.\n\nA transmission block is a physical entity that consists of header and\ntext. A message (logical) consists of many transmission blocks.\n\n     ------------------------------------\n     |     Header     |      Text       |\n     ------------------------------------\n\nThe primary purpose of the network is to deliver messages from one user\nsystem to another in an orderly controlled manner. In order to provide\nall the information necessary to maintain control, the header contains a\nset of operational functions. These functions are listed below with the\nrationale for each.\n\n\n\n\n\n\n                                                                [Page 3]\n\f\nAction Code\n\nThis code selects the immediate destination of the transmitted blocks;\nthe data may be transmitted directly to the user described in the DSID\nfield, sent to 'NC', or used by 'EE'. Any conflict in information\nbetween this field and any other field in the header will cause an error\nmessage to be returned to the originating station. The AC will serve a\nsimilar function at the receiving system, indicating to the\ncommunications interface (CI) whether the data block is destined for a\nuser routine or contains control information for the CI. [The CI is that\nfunction which interfaces directly with the local operating system.]\n\nTransmission Block Number\n\nEach block of transmission within the network will contain a sequential\nnumber inserted by the transmitting station. As the block flows through\nthe network, every station will insert its own number into the block,\noverlaying the previous station's number. The purpose of this sequential\nnumber is to guarantee that no messages are lost in the physical\ncommunications process.\n\nNetwork Job Identifier\n\nThe function of this field is to associate a transmission block with the\nnetwork job to which it belongs. The identifier is assigned to the\nnetwork job and to each associated transmission block by the user system\nor by the 'NC'. In order to establish a unique name for each job within\nthe network, the user node identifier (i.e., the name of the user system\noriginating the net job) will be concatenated with a number generated by\nthe originating user system.\n\nJob Step (Marker)\n\nThe purpose here is to uniquely identify a job step within a network\njob. The NC will assign this name since it maintains control of all\nnetwork jobs.\n\nOriginating System Identifier\n\nIn order to route a block of data from one user system to another, a\nunique name must be associated with each user system. The name will be\nassigned by the network control group at the time the user system is\naccepted as a network participant. The station originating a block of\ndata will place his assigned identification in this field in every block\nof data originating at his system.\n\n\n\n\n\n\n                                                                [Page 4]\n\f\nMessage Priority\n\nThis field indicates transmission priority (not to be confused with\nprocessing priority) by block within the queue for a particular user\nsystem.\n\nDestination System Identifier\n\nThis is similar to the originating node identifier except that the\nidentification inserted is that of the node for which the block is\ndestined.\n\nLogical Message Flags\n\nThe message flags denote the first and last blocks of a message; all\nintermediate blocks are noted by their absence. The flag field in\nconjunction with the logical message sequence number will enable the\nuser to determine if any blocks are missing from a message and will also\nprovide an identifier that can be used to recover missing blocks.  When\nthe first and last indicators are turned on in a single block, the\nmessage is contained within the block.\n\nLogical Message Sequence Number\n\nThis field is used to number sequentially the blocks within a message.\nThe first block (denoted by the LMID) will contain the lowest number\nassigned (not necessarily 1) within a message while the last block will\ncontain the highest number. Unlike the TBN, this number will remain\nintact throughout the journey of the block through the network.  It is\nused for error detection and recovery along with the logical message\nflag.\n\nLogical Message Identifier\n\nSince all communications lines in the network can be multiplexed (blocks\nwithin a message will be interleaved with blocks from other messages), a\nmessage identifier becomes necessary in order to reassemble the message\nat the user destination. Therefore; each block within a message will\ncontain an identifier unique to the message. In the simple case where\nthe message is contained in one block, the identifier performs no\nfunction.\n\nWhen multiple blocks comprise a message, LMID will enable the user to\nreassemble the message. There can be any number of physical message\nblocks associated with any logical message. It is important that the\nthat this LMID be used in the messages generated by the CI in response\nto NC commands.\n\n\n\n\n                                                                [Page 5]\n\f\nLength of Text\n\nThis field contains a binary number that equals the number of characters\nin the text portion of the transmission block, Although there are other\nmeans available to obtain this number, it is included in the header for\nredundancy check purposes.\n\nLogical Message Structuring\n\nThe network controller maintains control for every user job submitted by\nNJID. The following hierarchical structure is set up for a message\nconfiguration, Any message pertaining to any step in a network job can\nbe tracked and retransmitted if necessary. It provides a mapping of the\nlogical structure of any network job into their appropriate message\nconfiguration.\n\n                           Net Controller\n                   -------------------------------\n                   |             |            |\n                NJID(1)       NJID(2) - - - NJID(N)\n              ---------------------- . . . . .\n              |              |\n          Stepname       Stepname\n           -------------------------------\n           |             |             |\n        LMID(1)       LMID(2)       LMID(n)\n        -----------------------------------\n        |                                 |\n      LMSN(1)       LMSN(2)             LMSN(n)\n\n\nThe Express Exchange is a combination of functions. It is basically a\ncommunication handler and store and forward switch. The 'EE' has the\nability to keep track of all messages in the network by TEN (defined\nearlier). It is therefore possible to record and reflect the entire\nstatus of the network down to any detail desired.\n\nPROTOCOL\n\nThe protocol for operating a network system has different levels of\ncontrol. The 'EE' must exercise control on the communication link\nbetween any pair of stations. The NC maintains control at the net job\nlevel. However, the functions that each unit performs are combined to\nhandle special control cases. These complimentary functions will be\ndiscussed in detail as they arise in the protocol discussion.\n\n\n\n\n\n\n                                                                [Page 6]\n\f\nFirst of all, there must be a series of initialization messages sent\nfrom one station to another before any actual message transmission takes\nplace. These messages are sent between each station and positive\nacknowledgments must be received in order to complete the initial hand\nshaking.\n\nAt any point during the transmission of messages an error can occur\nwhich will be detected by a negative acknowledgement. The message in\nerror will be retransmitted several times. If the error persists, the\nline is timed out and will be retried later. The assumption here is the\nline may be temporarily noisy and we give it time to quiesce.\n\nWhen a station receives an initialization message it is possible to\nrespond in several ways depending on the status of the user system.\n\n(1) The station receiving the initialization message can acknowledge\n    that it is ready to receive and transmit.\n(2) Temporarily cannot receive certain logical messages (actual data\n    transmissions) but can receive special control messages.  This\n    option allows a user system to selectively process net jobs as\n    facilities on his system become available.\n(3) Unable to receive traffic (in other words, the user system is\n    logically or physically disconnected from the network).\n(4) Unable to receive new network job requests but able to handle\n    traffic for jobs in progress. The user system may have several\n    jobs in progress that are transmitting and receiving messages.\n    This acknowledgement gives the user system the ability to allow\n    these jobs to continue normal processing.\n\nThe last alternative gives the CI at each user system the mechanism to\nselectively demultiplex itself to handling one logical message. The\ntemporarily deactivated.\n\nThus, all user systems can selectively halt messages throughout the\nentire network. The destination system can selectively halt all messages\nfor a given NJID or selective halt logical messages within a net job.\nThe adjacent system would keep accepting messages until its buffers were\nfilled to some operational threshold limit that must be maintained to\nkeep the network from coming to a complete standstill, and would issue\nselective halts to systems sending to it. It is conceivable that the\nmessage blocks of one logical message would be stored in distributed\nsegments throughout the network.\n\nThe same selective halt mechanism can be applied in reverse through a\nresume message. The resume message can apply to an entire set of\nmessages for a net job or selective logical messages within a job. The\nreinitiation of a transmission takes place between any two stations that\nwish to allow more message blocks to be transmitted. The destination\n\n\n\n                                                                [Page 7]\n\f\nstation must resume on a particular logical message to allow the message\nto reach its final destination and complete transmission through the\nnetwork. The LMID of the message header enables the 'EE' and 'NC' to\ncooperate in controlling and cleaning up network operation. Not only\ndoes this cooperation between logical levels reduce a duplication of\neffort but it enables the control to become realistic and practical.\nComplete separation of communications and control functions could cause\na loss of useful information that may not be obtained by other means.\n\nFor example, if a file transmission consisted of many blocks and a\ntransmission error occurred that the network was unable to recover.  The\n'EE' would notify the 'NC' of the error occurrence on this file\ntransmission and then 'NC' would issue purge messages to the 'EE's for\nthose particular 'logic message' blocks. This mechanism-allows a general\n'clean-up' and management of all file transmissions.\n\nThere is also the condition when a receiving system goes down. When this\noccurs there may be a number of network jobs involved with that user\nsystem. If the user system remains down for an extended period of time\nand the 'EE' buffer resources are filled to threshold limit, it may be\nnecessary to purge pending message blocks. The 'EE' will notify the 'NC'\nof the user system being down and the 'NC' will issue purge commands to\nthe 'EE' for all pending messages of those netjobs involved with the\ndown user system. However, in our present implementation the 'EE' uses\ndisk storage as a logical extension of core for message buffering. In\nthis operation, the freeing of real core buffers becomes a simple matter\nof moving the messages on to disk for later retrieval. In some instances\nof transmission a file may be scored in segments at several locations\nuntil the receiving system is able to receive it. Network buffer\nresources are treated as a logically simple entity that may be\nphysically distributed.\n\nWhen the user system comes back on the air the involved user network job\nwill be restarted by issuing resume transmit commands to the 'EE'.  If\nthe user is, an interactive user controlling the network, he would be\nnotifed of the problem and status of his file transmission. He could\nthen reinstate his command at a later time. The batch network jab would\nbe restarted at a point where no unnecessary retransmission would occur.\n\nIt has not been determined how long files should reside in a store and\nforward node before being purged from the network. If a backing storage\ndevice is available to network operation, the file can remain for a\nlonger time but still not indefinitely.\n\n\n\n\n\n\n\n\n                                                                [Page 8]\n\f\nNC PROTOCOL\n\nThe File Transmission Protocol of the 'NC' is primarily concerned with\nthe control and transfer of user files for storage, temporary use at a\nremote system, and execution.\n\nThe commands and status messages that pertain to the second level logic\nof the 'NC' are sent and interpreted by the sending and receiving\nsystems. All initiation of file transfers result from direct user\ncommands to the 'NC'.\n\nThe sending system will first be interrogated to determine if the file\nis resident at that system. The user must provide the necessary\ninformation to locate the file if it is not catalogued at that system.\nThis information consists of the physical attributes, such as volume and\nserial number. A negative acknowledgement to this message would result\nin the termination of a net job step with the reason for termination\nreturned to the originator.\n\nWhen a positive acknowledgement is received by the 'NC' it has two\noptions available. It must first determine the amount of unused buffer\nspace in the 'EE' and based on the size of the file to be transferred,\ndecide whether to have the data set sent immediately or wait for an\nacknowledgement to the receive message.\n\nIf the 'NC' decides to move the file regardless of the state of the\nreceiving system, the 'NC' will issue a send or receive message to both\nsystems simultaneously. A negative response to the 'receive' message is\ntaken as a definite refusal by the receiving system to accept the data\ntransmission. This may result from insufficient resources to handle the\njob. If the file was transmitted from the receiving system and is\nresident in the network storage facilities, the user will be notified of\nits exact location so that he may move it from that point at a later\ntime. If the 'NC' chose the second option, the file would still be\nresident at the originating system.\n\nA positive acknowledgement will allow the file to continue its normal\nflow through the network. Queuing in the 'EE' is always done in order\nthat 'receive' messages will be sent before the actual data files. The\npossibilities include loading the file directly into the job stream\n(this step assumes the appropriate JCL is included in the text of the\nfiles) or cataloguing the file at the remote system or storing it for\ntemporary immediate use. All network files are catalogues with a unique\nname that includes User ID (unique at his home node), home node ID\n(unique in the network) and his own data name which is unique in his own\nwork. The 'receive' message may also contain some special instructions\nto print or punch a file.\n\n\n\n\n                                                                [Page 9]\n\f\nWhen the sending and receiving stations have completed the file\ntransfer, they send status messages back to the 'NC' indicating the\ncompleted action. These status messages enable the 'NC' to keep a record\nof user network job steps and their progress through the network. These\nstatus messages play an important part in insuring proper checkpoint\nrestart for the network.\n\nFiles routed specifically for execution require a third status message\nfrom the receiving user system. The system must indicate when and how\nthe job completed execution. This status message will also contain the\nappropriate accounting information to allow dynamic updating of network\nuser and system accounting information. It is not clear at this time\nwhat should be accounted for in the network, but it is an area of prime\nconcern to operational networks.\n\nAn error in the second logic level can occur during the file\ntransmission. There may be an error moving files from devices into the\nline buffers or reading from the line buffers. When this occurs, the\noperating system must pass this information to the 'NC'. The 'NC' will\nthen terminate the task involved in this job step and purge all the\nnetwork buffers containing blocks of this message transmission.\n\nWhen the 'NC' receives the file error message it will immediately send a\n'release' message to all the network tasks supporting this job step.\nThis action will cause the user systems to end all pending tasks\nassociated with this net job step. In addition a purge message for that\njob step will be sent to the 'EE' to purge the message from its buffers.\nIf there is more than one 'EE' involved, the purge message would be\npassed to all other 'EE's.\n\nThis is another example of the 'EE' and 'NC' combining functional\ncapability and providing effective management of network traffic. The\nmapping of message Into the job step allows the 'NC' to selectively\nchoose all messages it wishes to purge.\n\nThe protocol the user must use for interactive use of the network is\ndifferent, There are some standard message types that are provided for\ninteractive use to insure the proper message recognition from one system\nto another, Terminal type traffic will be sent across the network\nthrough the normal netting' interface, The control information that a\nterminal sends to the operating system must be incorporated in the\nnetwork protocol by the 'CI'.\n\nThe interactive user can request a direct connection to the remote\nsystem through the 'NC'. The 'NC' will notify the remote system of the\nuser request and establish the user's direct link, The 'NC' becomes a\nmonitor of the conversation but no longer becomes involved with the\nmessages. Other conversational messages are sent back and forth through\n\n\n\n                                                               [Page 10]\n\f\nthe 'EE' with no interaction by the 'NC'. In the event one of the\nsystems goes down breaking the logical link, the 'NC' must notify the\nother system to terminate the waiting task, In most cases a user system\nwill be isolated from the second user system by other stations and the\n'NC' is a convenient way of notifying other user systems about the\n\"disaster.\"\n\nOnce the user's connection is established, three types of messages may\nbe generated, These messages are identified by the 'AC' field in the\nheader. The three basic transmission types covered by the protocol are:\na response requested - with or without text included in the message, a\ntext message which is simply a response to the first or just data to be\nprinted at the user's terminal, and finally, an interrupt message which\nindicates the user wishes to stop a task or talk directly to the\noperating system.\n\nIt is important to note that regardless of what type of conditions\nexist, there are always enough buffers left to receive an interrupt\nmessage and terminate or flush any existing task and the associated\noperation it may be supporting.\n\nCONCLUSION\n\nThe protocol concepts discussed in this paper were developed to\nfacilitate the transfer of data between two or more independent systems.\nThe protocol is able to handle the various pathological cases that may\narise during network operation, A fundamental design consideration in\ndeveloping these concepts was to maintain complete recovery from any\nrecoverable error condition.\n\nMany of the concepts have been used in an operational star network, with\na single 'EE' and 'NC' located in the central system and a 'CI' located\nat each participating system. The successful operation of the network\nhas proven the feasibility of this protocol.\n\nACKNOWLEDGMENT\n\nThe authors wish to acknowledge the design and implementation effort of\nthe contributing members of the Computer Science Department of the T. J.\nWatson Research Center.\n\n\n       [ This RFC was put into machine readable form for entry ]\n           [ into the online RFC archives by Tim Buck 5/97 ]\n\n\n\n\n\n\n\n                                                               [Page 11]\n\f\n"
}