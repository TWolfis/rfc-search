{
  "series": "Request for Comments",
  "number": "74",
  "howpublished": "RFC 74",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0074",
  "url": "https://www.rfc-editor.org/info/rfc74",
  "title": "Specifications for Network Use of the UCSB On-Line System",
  "pagetotal": "9",
  "year": "1970",
  "month": "oct",
  "body": "\n\n\n\n\n\nNetwork Working Group                                           J. White\nRequest for Comments: 74                                            UCSB\n                                                        October 16, 1970\n\n\n       SPECIFICATIONS FOR NETWORK USE OF THE UCSB ON-LINE SYSTEM\n\nIntroduction\n\n   UCSB's On-Line System (OLS) is available to Network users as socket\n   number x'101' at site 3.  Network users should log in with the\n   following OLS accounts parameters:\n\n           USER NUMBER = 196\n           ID NUMBER =  57372\n           USER NAME = site name -- UCLA, SRI, UTAH, BBN, MIT, SDC, RAND\n                       -- whichever is appropriate\n\n   Users communicate with OLS through an intermediary process, hereafter\n   called the Interface, which is addressed as socket number x'101'\n   (which is termed OLS's \"primary socket\"), and can be invoked through\n   the Logger.  This document is intended to provide programmers with\n   the information necessary to communicate with the Interface; and to\n   define the input expected and the output returned.  The readers is\n   assumed familiar with the Culler-Fried system at UCSB from a user's\n   standpoint.  Specifically, this document is not a user's manual for\n   OLS.\n\n   The interface conducts all Network transactions through the NCP,\n   which operates under the Host-Host protocol of 3 August 70.  The\n   first message sent by the Interface is of Type 0: the first eight\n   bits are zeros and thereafter, for the life of the connection Imp-\n   message boundaries are not significant.  Similarly, the Interface\n   expects the first message it receives to be Type 0, discards the\n   first eight bits assuming them to be zeros, and thereafter for the\n   life of the connection takes no notice of Imp-message boundaries.\n\n   A word about terminology.  The 360/75 is a 32-bit machine, but its\n   instruction set is byte-oriented.  A byte is eight bits, and those\n   eight bits are numbered 0-7 from left to right.  Terms such as\n\n   \"listen\", \"request connection\", \"accept a connection\", and \"reject a\n   connection\" are used freely herein to describe those primitive\n   Network functions, which are user at a foreign site presumably has\n   available to him through his NCP.  They are used here in the same\n   senses in which they have frequently been used in the NWG literature.\n\n\n\n\n\nWhite                                                           [Page 1]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\nLogging Into the Interface\n\n   To use the On-Line system, the Network user must establish a full-\n   duplex connection with the Interface.  The Interface is core resident\n   only while at least one such duplex connection is established (i.e.,\n   while at least one Network user is connected).  At all other times,\n   the Interface resides on direct-access storage and must be invoked\n   through the Logger.  A login sequence can always be initiated by\n   requesting connection to OLS's primary socket.  While in core, the\n   interface listens on that socket and will accept any call it\n   receives; at all other times, the _Logger_ listens on that socket and\n   will _reject_ the first call it receives, read the Interface into\n   core, and dispatch it.  The Interface will then listen on the primary\n   socket as before.  Thus, to initiate a login sequence, the user\n   requests connection to the primary socket.  If accepted, he is in\n   contact with the Interface.  If rejected, he should reissue the\n   connection request; when accepted, he will be connected to the\n   Interface.  A second rejection would indicate that the On-Line System\n   was inactive, or that either the Interface or the NCP had exhausted\n   its resources.\n\n   Over this initial connection, the Interface will send eight bits of\n   zeros, indicating message type zero, followed by a 32-bit socket\n   number, which it will select from a pool of socket numbers allocated\n   to it.  It will then promptly close the connection and reissue the\n   listen, to allow other users to begin login.  It will then request\n   connection of the local socket whose number was sent to the user,\n   with the foreign socket whose number is one greater than that of the\n   user's socket.  Similarly, it will request connection of the local\n   socket whose number is one greater than that sent to other user, with\n   the user's socket.  Once the two connections have been established,\n   the Interface will consider the user logged in.\n\n   The two connections thus established are maintained indefinitely by\n   the Interface.  Over its receive connection (hereafter termed the\n   \"Input Connection\"), the Interface accepts input fro OLS.  Over its\n   send connection (the \"Output Connection\"), the Interface relays\n   displays from OLS generated in response to the input.  The Interface\n   will terminate the connections only should the On-Line System\n   terminate.  The user is expected to close the two connections when\n   finished, making the local sockets available for reallocation, at\n   which time the Interface will consider the user logged off.\n\nThe Input Connection\n\n   With the exception of the first tow bytes, data received by the\n   Interface over the Input connection is treated as a continuous stream\n   of one-byte key codes, potentially endless in extent.  The Interface\n\n\n\nWhite                                                           [Page 2]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\n   passes each key code -- unexamined -- to the On-Line System, which in\n   turn processes it exactly as it would input from a keyboard connected\n   directly to the System.  The set of valid key codes and its relation\n   to the standard OLS keyboard are depicted in Figure 1.  The Interface\n   makes no validity check of the incoming data, but OLS will detect and\n   discard invalid key codes.\n\n   Normally, the first keys sent over the input Connection (i.e., the\n   first keys that the Network user pushes) should be those necessary to\n   log in to OLS.  The user may log in and out many times during the\n   life of the Network connection, and these operations are transparent\n   to the Interface.  The last key s sent over the Input Connection\n   should log the user off of OLS (_SYST DOWN_).  Failing to log off\n   before terminating the Network connection allows the possibility of a\n   later Network user's finding himself already logged in.\n\n   The first byte of data received over the Input Connection is\n   discarded unexamined by the Interface, which assumes it to be zeros\n   indicating message type zero in compliance with Host-Host protocol.\n   No significance is attached to Imp-message boundaries.  The second\n   byte of data received is not passed to OLS but is examined by the\n   Interface.  By appropriately selecting that second byte, the user can\n   cause to be suppressed by the Interface, any or all of the three\n   classes of output generated by OLS and potentially relayable to the\n   user over the Output Connection.  The byte is interpreted as follows:\n\n           Bit     0  =    1: suppress all alphanumeric output.\n           Bit     1  =    1: suppress all curvilinear output.\n           Bit     2  =    1: suppress all special character output.\n           Bits    3-7:       not examined, should be zeros.\n\n   Once made, this declaration prevails for the life of the Network\n   connections.  A user can avoid transmission of output classes he is\n   unable to process and would therefore have to discard anyway, thus\n   avoiding needless network traffic.  A user operating from a teletype\n   and capable of displaying only alphameric output, for example, might\n   specify x'60' and thereby suppress all else.\n\n   Figure 1. Input Key Code Set [Please view PDF version.]\n\nThe Output Connection\n\n   With the exception of the first byte, data transmitted over the\n   Output Connection by the Interface consists of a continuous string of\n   variable-length records.  The first byte sent consists of zeros,\n   indicating message type zero, to comply with Host-Host protocol, and\n   should be discarded by the user.  At present there are three classes\n   of records defined, one corresponding to each class of OLS output --\n\n\n\nWhite                                                           [Page 3]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\n   alphameric, curvilinear, and special characters.  Only records of\n   those classes, which have been enabled by the user will be\n   transmitted; all other output will be suppressed locally by the\n   Interface.  Each record consists of a one-byte field specifying the\n   output class, a one-byte output-class-dependent field, a variable-\n   length data field, and a two-byte field containing the combined\n   length in bits (unsigned) of the data and output-class-dependent\n   fields.  Each record has the following form:\n\n      1            2            1                 L        bits\n   ---------------------------------------------------S-----------\n   |OUT-   |               |  CLASS  |                           |\n   |PUT    |       L+8     |   DEP.  |             DATA          |\n   |CLASS  |               |  FIELD  |                           |\n   ---------------------------------------------------S-----------\n\n   The integer above each field is the length of that field in bytes\n   (except where stated to the contrary).  The lengthy of a cord, then\n   is given in bits by the contents of the length field plus twenty-\n   four.  The significance of the data and class-dependent fields, and\n   the output class assignments are given in the following sections for\n   each output class.\n\nA.  Alphameric Output (Class 1)\n\n   For alphameric output, the output class field contains the following:\n\n           Bits 0-3:       unpredictable\n           Bits 4-7:       0001\n\n   The contents of the class-dependent field are unpredictable.  The\n   data field contains the alphameric display in the form of a\n   contiguous string of one-byte characters.  Any character listed in\n   Figure 2 may be present.  The list includes the Greek and Latin\n   alphabets, a variety of special symbols, as well as carriage control\n   characters such as carriage return, line feed, backspace, and erase.\n\n   Alphameric output records embody system-generated messages, LIST mode\n   displays, lower keyboard activity on the TYPE level, TYPE level\n   operators such as UP and DOWN, etc.  The appearance of the character\n   pair 'BACK ERASE' (x'59BC') in a record represents a command to erase\n   the display scope.  When not immediately followed by ERASE, BACK\n   indicates a backspace operation.  'BREAK' (x'79') is used to\n   facilitate formatting of long messages that may be either printer- or\n   display-scope- destined.  In generating scope display, where there\n   are twenty-five characters per line, 'BREAK' should be interpreted as\n   a carriage return; in generating printer output, where longer lines\n   are possible, it should be interpreted as a space or blank.\n\n\n\nWhite                                                           [Page 4]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\nFigure 2. Alphameric Output Character Set\n\n   NAME  Lower     CODE            NAME            Upper           CODE\n         Case                                      Case\n\n   A               C1              ALPHA                           81\n   B               C2              BETA                            82\n   C               C3              CHI                             83\n   D               C4              DELTA                           84\n   E               C5              EPSILON                         85\n   F               C6              PI                              86\n   G               C7              GAMMA                           87\n   H               C8              THETA                           88\n   I               C9              IOTA                            89\n   J               D1              SIGMA                           91\n   K               D2              KAPPA                           92\n   L               D3              LAMBDA                          93\n   M               D4              MU                              94\n   N               D5              ETA                             95\n   O               D6              OMICRON                         96\n   P               D7              PI                              97\n   Q               D8              PHI                             98\n   R               D9              RHO                             99\n   S               E2              SIGMA                           A2\n   T               E3              TAU                             A3\n   U               E4              UPSLION                         A4\n   V               E5              NU                              A5\n   W               E6              OMEGA                           A6\n   X               E7              XI                              A7\n   Y               E8              PSI                             A8\n   Z               E9              ZETA                            A9\n   0               F0              ss 0                            B0\n   1               F1              ss 1                            B1\n   2               F2              ss 2                            B2\n   3               F3              ss 3                            B3\n   4               F4              ss 4                            B4\n   5               F5              ss 5                            B5\n   6               F6              ss 6                            B6\n   7               F7              ss 7                            B7\n   8               F8              ss 8                            B8\n   9               F9              ss 9                            B9\n\n\n\n\n\n\n\n\n\n\nWhite                                                           [Page 5]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\n   NAME            CODE            NAME                    CODE\n\n   PLUS +          4E              UNDERSCORE _            6D\n   MINUS -         60              AT SIGN @               7C\n   SLASH /         61              POUND SIGN #            7B\n   APOSTROPHE '    7D              CENT SIGN [cent sign]   4A\n   LOGICAL AND \u0026   50              DOLLAR SIGN $           5B\n   ASTERISK *      5C              PERCENT SIGN %          6C\n   EQUALS =        7E              COLON :                 7A\n   SEIM-COLON ;    5E              LEFT BRACKET [          73\n   LEFT PAREN (    4D              RIGHT BRACKET ]         74\n   RIGHT PAREN )   5D              LESS THAN \u003c             4C\n   COMMA ,         6B              GREATER THAN \u003e          6E\n   PERIOD .        4B              QUOTE \"                 7F\n   QUESTION MARK ? 6F              LOGICAL NOT [half arrow] 5F\n   LOGICAL OR |    4F              EXCLAMATION !           5A\n\n\n           Carriage                        Special List\n           Control                         Mode Characters\n\n   BACK (backspace)        59      SPACE  _                    62\n   RETURN (carriage        49      POST LIST :                 63\n           return)                 DIVIDE [0with /]            64\n   TAB (advance to next    77      MULTIPLY [0 with .]         65\n           line)                   SUBTRACT [0 with -]         66\n   UP (line feed up)       06      ADD [0 with +)              67\n   ENL (line feed up)      27      CARRIAGE RETURN\n   DOWN (line feed down)   07      [diagonal left down arrow]  68\n                                   DELETE [box with ///]       69\n   CON (line feed down)    28      Pointer _                   6A\n   RS (position to         13\n           upper left of                   Miscellaneous\n           display area)\n   ERASE                   BC\n   BREAK (for display      79\n           scope: RETURN           DOT (curvilinear            78\n           for line                    display\n           printer: SPACE)             dot-dot mode)\n   SPACE (blank)          40\n\n   Note:\n   Codes are specified in hexadecimal and are eight bits.  'ss' means\n   'superscript'\n\n\n\n\n\n\n\nWhite                                                           [Page 6]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\nB.  Curvilinear Output (Class 2)\n\n   For curvilinear output, the output class field contains the\n   following:\n\nBits 0-1:             00      indicates line segment mode (adjacent\n                              display points are to be connected by\n                              straight lines)\n                      01      indicates dot mode\n                      10      indicates character mode (the\n                              class-dependent field contains a\n                              character from Figure 2 which is to be\n                              displayed at each point ('dot-dot' mode is\n                              character mode with the display\n                              character 'DOT' (x'78')).\nBits 2-3:                     unpredictable\nBits 4-7:                     0010\n\n   For character mode, the class-dependent field contains the display\n   character; in other cases, the contents of that field are\n   unpredictable.  The data field contains a list of X-Y display\n   coordinates as depicted below:\n\n     2     2       2       2                               2      2\n   --------------------------------------S----------------------------\n   | X1   | Y1  |  X2  |  Y2  |         ...             | Xn  |  Yn  |\n   --------------------------------------S----------------------------\n\n   Xi and Yi are the X and Y display coordinates -- after scaling -- of\n   the ith component of the vector represented by this record.  Each\n   coordinate is contained in a two-byte field, therefore one component\n   in four bytes, and hence the context of the vector being displayed is\n   given by the contents of the length field minus eight divided by\n   thirty-two.  The assumed display area is square, with original at\n   lower left, and both X and Y ranging between 0 and 4095.  There is a\n   one-to-one correspondence between vectors displayed and curvilinear\n   output records transmitted.\n\nC. Special Character Output (Class 3)\n\n   For special character output, the output class field contains the\n   following:\n\n                   Bits 0-3:       unpredictable\n                   Bits 4-7:       0011\n\n\n\n\n\n\nWhite                                                           [Page 7]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\n   The contents of the class-dependent field are unpredictable.  The\n   data field contains a contiguous string of variable-length\n   characters, each representing either a move in one of sixteen\n   directions or a change in position relative to the lower right corner\n   of the last character frame (where for alphameric) and special\n   character display, the display area is square, 4096 units in extent\n   vertically and horizontally, and a character frame is 160 units wide\n   and 224 units high).\n\n   The sixteen characters, which define move operations are listed in\n   Figure 3, and each is one byte long.  Such a character indicates a\n   move from the current position, in the specified direction, a\n   distance equal to that of a move in the same direction from the\n   center of a 64-unit square to its perimeter.  The length of the move\n   is therefore functionally related to its direction.\n\n   A change in position relative to the lower right corner of the last\n   character frame is represented by a four-byte character of the form:\n\n   1               12 bits         12 bits\n   -----------------------------------------------\n   | x'70' |     [delta] X        |   [delta] Y  |\n   -----------------------------------------------\n\n   where [delta] X and [delta] Y are signed quantities indicating the\n   number of units change along each coordinate.\n\nFigure 3. Special Character Vector Character Set\n\n   Direction                       Code\n   000.0                           47\n   022.5                           48\n   045.0                           51\n   067.5                           52\n   090.0                           53\n   112.5                           54\n   135.0                           55\n   157.5                           56\n   180.0                           57\n   202.5                           58\n   225.0                           41\n   247.5                           42\n   270.0                           43\n   292.5                           44\n   315.0                           45\n   337.5                           46\n\n\n\n\n\nWhite                                                           [Page 8]\n\f\nRFC 74             Network Use of UCSB On-Line System   October 16, 1970\n\n\n   Note:\n   Codes are specified in hexadecimal and are eight bits.\n\n   Directions are specified in degrees, increasing counter-clockwise\n   from 0o at positive X in an X-Y coordinate system.\n\n\n   * Text enclosed in brackets describe non-ascii characters that were\n     present in the original document.  Please see the PDF file for the\n     actual representations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhite                                                           [Page 9]\n\f\n"
}