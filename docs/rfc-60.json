{
  "series": "Request for Comments",
  "number": "60",
  "howpublished": "RFC 60",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0060",
  "url": "https://www.rfc-editor.org/info/rfc60",
  "title": "A Simplified NCP Protocol",
  "pagetotal": "8",
  "year": "1970",
  "month": "jul",
  "body": "\n\n\n\n\n\nNetwork Working Group                                           R. Kalin\nRequest for Comments: 60                                             MIT\n                                                            13 July 1970\n\n\n                       A Simplified NCP Protocol\n\nAbstract\n\n   This RFC defines a new NCP protocol that is simple enough to be\n   implemented on a very small computer, yet can be extended for\n   efficient operation on large timesharing machines. Because worst case\n   storage requirements can be predicted, a conservative implementation\n   can be freed of complicated resource allocation and storage control\n   procedures. A general error recovery procedure is also defined.\n\nOverview and Rational\n\n   The central premise of this proposal is an insistence that all user-\n   to-user connections be bi-directional. For those familiar with\n   communication theory, this appears most reasonable. All communication\n   requires a cyclical flow of information. To deny a simple association\n   between a message and its reply makes protocol unnecessarily\n   complicated and turns simple mechanisms of flow control into\n   nightmares.\n\n   It is proposed that a bi-directional connection, or duplex link, be\n   identified by a pair of socket numbers, one for each end. This is\n   half the number presently required. Associated with the connection\n   are some number of \"crates\" or message containers. These crates\n   travel back and forth over the link carrying network messages from\n   one side to the other. Buffers are allocated at each end of the link\n   to hold crates and the messages that they carry. Worst case buffer\n   requirements are equal to the number of crates in circulation, or the\n   \"capacity\" of the link.\n\nDetails\n\n   A message buffer has four states which follow one another cyclically.\n   They are:\n\n   1) empty,\n\n   2) filled with a message-laden crate to be unloaded,\n\n   3) filled with an empty crate, and\n\n   4) filled with a message-laden crate to be sent.\n\n\n\nKalin                                                           [Page 1]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   Normally state transitions correspond to message arrival, message\n   removal, message insertion and message transmission.\n\n   For a process to be an NCP it must:\n\n   1) be able to make initial contact with foreign hosts via the control\n   link and, if necessary, delete user-to-user links left over from the\n   previous system incarnation.\n\n   2) be able to create user-to-user links.\n\n   3) be able to interface users with these links.\n\n   4) be able to delete user-to-user links.\n\n   The first of the four functions shall not be discussed here except to\n   point out that it contains critical races that can not be resolved\n   without making assumptions about maximum message propagation delays.\n   Since within the ARPA network, bounds on message turnaround time do\n   not exist, the approach chosen must necessarily be tender. The other\n   three functions are discussed first from the viewpoint of one\n   interested in implementing a minimal NCP. Then extensions and\n   improvements are proposed that are suitable for larger machines.\n\n   Any NCP must be capable of creating a duplex link between a local\n   user process and a remote one. The current protocol accomplishes this\n   by queuing a potentially unbounded number of RFC's and waiting for\n   the user to examine the queue to determine with whom he wishes to\n   talk.  There is no guarantee that the user will ever look at the\n   queue and there is no way to limit the size of the queue. The\n   overflow error message suggested fails in the respect because it\n   admits that the RFC will only be sent again. The picture need not be\n   this bleak. The following network conversation demonstrates how\n   connections can be made without using queues or relying on user\n   process attention.\n\n   Suppose that a local user process and a remote user process wish to\n   establish a new connection. The remote process asks its NCP to listen\n   for a connection request and gives it the socket identifier for its\n   end. Optionally it can give both socket identifiers. The user process\n   at the local end asks its NCP to send a request for a duplex link\n   (RFDL). It specifies both socket identifiers of the proposed link.\n   The local NCP sends a RFDL over the control link with the following\n   format:\n\n   RFDL \u003cmy socket\u003e \u003cyour socket\u003e \u003cmax number buffers\u003e \u003cspare\u003e\n\n\n\n\n\nKalin                                                           [Page 2]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   The third argument is normally supplied by the local NCP and\n   indicates the maximum number of buffers the NCP will consider\n   allocating to this duplex link. If buffers are in user storage the\n   count may be given by the user in a call made to the NCP.\n\n   The RFDL is received at the remote host and the remote NCP compares\n   \u003cmy socket\u003e and \u003cyour socket\u003e against the socket identifiers supplied\n   by unmatched listens issued to it. For listens in which just a single\n   identifier was given only \u003cyour socket\u003e must match. If both socket\n   identifiers were given, they both must match. If a match is found an\n   acknowledgement message with the following format is sent back by the\n   NCP:\n\n   ACDL \u003cyour socket\u003e \u003cmy socket\u003e \u003cnumber buffers\u003e \u003cspare\u003e\n\n   The \u003cnumber buffers\u003e parameter is equal to the smaller of \u003cmax number\n   buffers\u003e as specified in the RFDL and the number of message buffers\n   agreeable to the remote NCP. If no match is found the error message\n   returned is an ACDL in which \u003cnumber buffers\u003e equals zero. Note that\n   the RFDL mechanism is similar to a RFC mechanism in which the bound\n   on queue size is one and connection acceptance is done entirely by\n   the NCP.\n\n   The two varieties of a listen correspond to two modes of channel\n   operation. The single parameter variety, as typified by a LOGIN\n   process, is to be used by programs that will \"talk with anyone who\n   happens to dial their number\". Screening of contacts for\n   appropriateness is left to the user process. The double parameter\n   listen is used by user programs who know with whom they will\n   communicate and do not wish to be bothered by random RFDL's from\n   other sources. Given the way in which socket name space is\n   partitioned, it is impossible to get a matching RFDL from any process\n   but the one intended.\n\n   Message buffers for the connection are allocated in the remote host\n   before it sends the ACDL and in the local host at the time the ACDL\n   is received. The number of buffers at each end is equal to the\n   \u003cnumber buffers\u003e parameter in the ACDL. The state of all remote\n   buffers is \"empty\" and of all local buffers \"filled with empty\n   crate\". After buffers are allocated the local user process is\n   notified that it is able to start sending messages.\n\n   The type of interface presented by the NCP between the user process\n   and the newly created duplex link is a decision local to that host. A\n   simple but complete interface would provide two calls to be made to\n   the NCP. GETMESSAGE would return the next message from the link\n   complete with marking, text and padding. PUTMESSAGE would take a\n\n\n\n\nKalin                                                           [Page 3]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   message, marking and text only, and buffer it for transmission. The\n   obvious logical errors would be reported.\n\n   We suggest that message alignment be left to the user. On most\n   machines it is a simple but time consuming operation. If done in the\n   NCP there is no guarantee that the user will not have to readjust it\n   himself. It is usually not possible to know a priori whether the text\n   portion should be right adjusted to a word boundary, left adjusted to\n   a word boundary, aligned to the end of the last message, or\n   fragmented in some exotic way.\n\n   Within this protocol message boundaries are used to provide storage\n   allocation information. If not required by the user this information\n   can be forgotten and the user interface can be made to appear as a\n   bit stream. Though welcomed by purists, such a strategy may produce\n   complications when attempting to synchronize both ends of a link.\n\n   Links are deleted by removing empty crates from them and reclaiming\n   the buffers allocated to the crates removed. Only buffers with crates\n   in can be reclaimed; empty buffers must remain available to receive\n   messages that may arrive. When no crates are left, no buffers remain,\n   and the socket identifiers can be forgotten. When empty crates are\n   removed, a decrement size message is sent to the foreign NCP to allow\n   it to reduce its buffer allocation:\n\n   DEC \u003cmy socket\u003e \u003cyour socket\u003e \u003cnumber of buffers dropped\u003e\n\n   A reply is solicited from the foreign NCP to affirm the deletions or\n   to complain of an error. Possible errors include \"no such link\" and\n   \"impossible number of buffers dropped\".\n\n   The option to close a link can be given to a user process by\n   providing either of two system calls. NOMOREOUTPUT declares that no\n   more messages will be sent by the local user process. All local\n   buffers for the link that contain empty crates are reclaimed by the\n   NCP. DEC messages are sent to the foreign NCP. As crates are emptied,\n   via GETMESSAGE calls, their buffers are reclaimed too. As an\n   alternative, the call KILLMESSAGE can be implemented. This call can\n   be used in place of a PUTMESSAGE. Instead of filling an empty crate\n   with a message to be sent, KILLMESSAGE will cause the crate to be\n   reclaimed and a DEC control message sent.\n\n   In situations where the user process has died, or for some other\n   reason can not close the link, more drastic measures must be taken.\n   For these situations, the ABEND control message is defined:\n\n   ABEND \u003cmy socket\u003e \u003cyour socket\u003e\n\n\n\n\nKalin                                                           [Page 4]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   After sending an ABEND the issuing NCP starts to close the link. All\n   buffers containing input are destroyed. A DEC is issued for these and\n   the previously empty buffers. If messages arrive on the link, they\n   are destroyed and a DEC is issued. Any ABEND received for the link is\n   ignored.\n\n   When the remote NCP receives the ABEND, it stops sending messages\n   over the link and refuses new messages from the user process at its\n   end.  Empty buffers are reclaimed. Pending output messages are\n   destroyed and their buffers reclaimed. Input messages are fed to the\n   user process as long as it will accept them. Buffers are reclaimed as\n   input is accepted. DEC's are issued to cover all buffers reclaimed.\n   When the user process will take no more input, input messages are\n   destroyed and their buffers reclaimed. Eventually all buffers will be\n   reclaimed at both ends of the link. At such time the connection can\n   be considered closed and the socket numbers used can be reassigned\n   without ambiguity.\n\n   Under this proposed protocol the above four functions constitute all\n   that must be part of a network NCP. If buffers are allocated only\n   when free ones exist there can be no \"overflow\" errors nor is there\n   any need to place further constraints on message flow. For any user\n   message that arrives buffer room is guaranteed. All control messages\n   can be processed without requiring additional storage to be\n   allocated.  Attempts by a user process to issue too many listens can\n   be thwarted by local control procedures.\n\n   Inefficiencies in storage will result when the number of outstanding\n   connections gets large. One price of coding simplicity is a fifty\n   percent utilization of buffer space. On large hosts it may prove\n   advantageous to implement some of the following NCP extensions. With\n   more complicated flow control procedures, it becomes possible for an\n   NCP to allocate more buffer space than actually exists and still not\n   to get into trouble. Other extensions provide message compression,\n   improved throughput and user transparent error recovery.\n\n   Because some extensions require the cooperation of foreign hosts and\n   assume that they have implemented more than the minimal NCP it is\n   proposed that an inquiry control message be used to find out what\n   extensions the foreign host has implemented. The response to an INQ\n   will be a control message defining a host profile. If an \"undefined\n   error\" message is returned, the foreign host is assumed to have only\n   a minimal NCP.\n\n   A simple extension is to define a control message that will replace\n   user RFNM's. A user RFNM is a null text message sent, for example, as\n   a reply when a file is transferred via a duplex link. They are\n   inefficient since they tie up an entry in the IMP's link assignment\n\n\n\nKalin                                                           [Page 5]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   table and degrade network throughput. A more efficient solution is to\n   send a special message over the control link. In this way one short\n   message can replace several user messages.\n\n   URFNM \u003cmy socket\u003e \u003cyour socket\u003e \u003cnumber of user RFNM's\u003e\n\n   Because the control link is concurrent with the return side of the\n   user link, URFNM's can not be substituted for user RFNM's when there\n   are other messages to be sent on the return link. Otherwise ordering\n   will be lost and with it user transparency.\n\n   Throughput can also be increased with a mechanism to add additional\n   crates on a duplex link. This might be at user instigation or be a\n   decision of the NCP.\n\n   INC \u003cmy socket\u003e \u003cyour socket\u003e \u003cnumber buffers desired\u003e\n\n   The foreign host replies to an increase request by returning an INCR.\n\n   INCR \u003cmy socket\u003e \u003cyour socket\u003e \u003cnumber buffers to be added\u003e\n\n   If the foreign NCP is unable to meet the additional buffer demand,\n   \u003cnumber buffers to be added\u003e will be less than \u003cnumber buffers\n   desired\u003e and possibly zero. The initial state of all local buffers\n   added is \"filled with empty crate\" and of all foreign buffers\n   \"empty\".\n\n   The spare argument in the RFDL and ACDL could be used to declare the\n   maximum sized message that will actually be sent in that direction. A\n   perceptive NCP could observe this information and allocate smaller\n   buffers. A lesser NCP could ignore it and always assume maximum\n   length messages. For example, if the field were zero then only user\n   RFNM's would be sent. A smart NCP would allocate no storage at all.\n\n   If the NCP retains a copy of each user message sent over the network\n   until a reply is returned, an automatic error recovery procedure can\n   be implemented. Because the capacity of the link is always known, an\n   NCP can determine whether there are messages in transit. This is done\n   by first sending a STOP message to the foreign NCP:\n\n   STOP \u003cmy socket\u003e \u003cyour socket\u003e\n\n   The STOP message tells the foreign NCP to temporarily stop\n   transmitting messages over the selected link. Unlike CEASE-ON-LINK\n   there is no guarantee as to how many messages will be sent before the\n   STOP takes effect. The local NCP then sends a link inquiry message:\n\n   LINQ \u003cmy socket\u003e \u003cyour socket\u003e\n\n\n\nKalin                                                           [Page 6]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\n   The reply gives the number of crates at the foreign end of the link.\n   The LINQ message is repeated until this number plus the number of\n   local crates equals the capacity of the link. At this time no\n   messages are in transit and the two ends of the link have been\n   synchronized.  Messages can now be identified relative to the\n   synchronization point.  Thus the local NCP can send a control message\n   asking, for example, that the third to last message be retransmitted.\n   The foreign NCP is able to identify which message this is and to\n   retransmit it. Once all errors have been recovered a START control\n   message, similar in format to the STOP, is sent to the foreign NCP\n   and normal operation continues. The entire recovery procedure can be\n   transparent to both user processes.\n\n   It is expected that the larger hosts will not adhere strictly to the\n   worst case storage allocation requirements. Rather they will allocate\n   more buffers than they have and reply on statistics to keep them out\n   of trouble most of the time. Such conduct is perfectly permissible as\n   long as it is transparent to foreign hosts. The protocol allows an\n   NCP to lie about storage allocation as long as he is not caught. In\n   situations where detection appears imminent some of the following\n   control mechanisms will need to be applied. They are listed in\n   increasing order of power.\n\n   a) Do not send out any user RFNM's or other short messages. There is\n   a good chance that they will be replaced by longer messages that will\n   strain buffer capacity even more.\n\n   b) Try not to accept any new messages from the IMP. Block local\n   processes attempting to issue messages.\n\n   c) Issue DEC's to free up buffer space. Do not allocate more than one\n   buffer to RFDL's and refuse INC's.\n\n   d) Fake errors in messages waiting for local user action. Do this\n   only if the host that sent it has implemented error recovery. This\n   will free buffer space and allow you to recover later. This final\n   measure is admittedly a last resort, but it should be powerful enough\n   to control any emergency.\n\n   It is the hope of the author that the above protocol presents an\n   attractive alternative to that proposed by RFC 54 and its additions.\n   Although it appears at a late date, it should not be more than a\n   minor jolt to implementation efforts. It is simple enough to be\n   implemented quickly. If adopted, a majority of the present sites\n   could be talking intelligently with one another by the end of the\n   summer.\n\n\n\n\n\nKalin                                                           [Page 7]\n\f\nRFC 60                  A Simplified NCP Protocol           13 July 1970\n\n\nReferences\n\n   [1] Crocker, S.D., Postel, J., Newkirk, J. and Kraley, M., \"Official\n   protocol proffering\", RFC 54, June 1970.\n\nAuthor's Address\n\n   Richard Kalin\n   MIT Lincoln Laboratory\n\n\n\n\n\n\n\n         [ This RFC was put into machine readable form for entry ]\n           [ into the online RFC archives by Ian Redfern 4/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKalin                                                           [Page 8]\n\f\n"
}