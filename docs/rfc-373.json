{
  "series": "Request for Comments",
  "number": "373",
  "howpublished": "RFC 373",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0373",
  "url": "https://www.rfc-editor.org/info/rfc373",
  "title": "Arbitrary Character Sets",
  "pagetotal": "4",
  "year": "1972",
  "month": "jul",
  "body": "\n\n\n\n\n\nNWG/RFC #373                                       14 July 1972\nNIC 11058                                          SU-AI\n\n\n                        ARBITRARY CHARACTER SETS\n\n                            by John McCarthy\n\nIt would be nice to be able to have documents stored in computers that\ncould include arbitrary characters and to be able to display them on\nany CRT screen, edit them using any keyboard, and print them on any\nprinter.  The object of this memorandum is to suggest how to get there\nfrom here with special reference to the ARPA network.\n\nWhere are we now?\n\n   (1) At present, there is 96 character ASCII, and everyone agrees that\n   it should be included in any larger set.\n\n   (2) Many installations are dependent on 64 character sets which do not\n   even include the lower case latin alphabet.\n\n   (3) At the Stanford Artificial Intelligence Laboratory, we have a 114\n   character set that includes 96 character ASCII and which is\n   implemented in our keyboards, displays, and line printer\n\n   (4) Printers are becoming available that get their character designs\n   out of memory, for example, the Xerox XGP printer, one of which we are\n   getting.\n\n   (5) The IMLAC type display has the character designs in main memory so\n   that changing the displayed set is just a matter of reloading the\n   memory.\n\n   (6) Many display systems share the character generator among many\n   display units.  In some of these, e.g. the Datadisc, arbitrary sets\n   are probably feasible (using kludgery to be described later), but in\n   other systems, e.g. our III's arbitrary sets are not feasible.\n\nOne possible approach to communication in expanded character sets is\nto produce an expanded standard set of characters, perhaps using 8 or\n9 bits and expect new equipment to implement this set.  This approach\nhas the disadvantage that it will be very hard to get agreement on\nwhat the next step should be, and even if formal agreement is\nrealized, many groups will find it in their interest to ignore the\nstandard.\n\n\n\n\n\n                                                                [Page 1]\n\f\nNWG/RFC# 373                        JMC 14-JUL-72 12:41  11058\nARBITRARY CHARACTER SETS  by John McCarthy\n\nTherefore, I would like to suggest that the next step be to arbitrary\ncharacter sets.  I suggest implementing this in the following way:\n\n   (1) There be established a registry of characters.  Anyone can\n   register a new character.  Each character has a unique number, 17 bits\n   should be enough even to include Chinese.  Besides this, each\n   character has a name in ASCII usually mnemonic.  Finally, the\n   character has a design which is a picture on a 50 by 50 dot matrix.\n\n   (2) Besides the registry of characters, there is a registry of\n   characters sets, which different groups are using for different\n   classes of documents.  A registered character set has a registry\n   number and a table giving the correspondence between the character\n   codes as bit sequences and the registered character numbers.\n\n   (3) Associated with a document is a statement of the character code\n   used therein.  This may be one of the registered codes or it may\n   contain in addition modifications described by an auxiliary table\n   giving the code correspondence with registered character numbers.  A\n   character code may have an escape character that says that the next\n   character is described by its registry number.  The statement of the\n   character code may be a header on the document or the receiver may\n   have to learn it by some other means, e.g.  because its library\n   catalog entry contains this information.\n\n   (4) Devices such as printers and displays draw characters in different\n   ways and standardization doesn't seem feasible at present. Therefore,\n   it is necessary to provide a way of going from the standard\n   description of a character using a 50 by 50 dot matrix to whatever\n   method the device uses.  This is up to the programmers who are\n   supporting the device.  Some may choose to manually create files\n   describing how registered characters are implemented.  They may find\n   it too much work to provide for all the characters and to update their\n   files when new characters are registered.  Others will provide\n   programs for going from the registered descriptions to descriptions\n   compatible with their implementations.  Perhaps most will hand tailor\n   the characters most used and provide a program for the others.\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 2]\n\f\nNWG/RFC# 373                        JMC 14-JUL-72 12:41  11058\nARBITRARY CHARACTER SETS  by John McCarthy\n\n   (5) The easiest device to handle is the line printer because it is\n   slow.  At the beginning of the print job, the SPOOL program will look\n   up the character set and load the printer's memory with the character\n   designs used in the particular document.  Sometimes, it may have to go\n   through the network to one of the computers that stores the registry\n   in order to find out what to do.\n\n   (6) Display systems that have a character memory for each display unit\n   can be handled in about the same way.  Users will occasionally\n   experience delays when the display programs are surprised by\n   unfamiliar characters.\n\n   (7) Display systems that share character memories require more\n   complicated treatment.  The object is to keep the memory large enough\n   to keep all the characters that the current set of users is using and\n   to handle the required table lookups from the different character\n   codes in a nice way.  There will be limitations on the diversity of\n   character sets that can be in use simultaneously. Systems like the\n   Datadisc that only look up the character when it is first written can\n   be extended to work with large sets.  Systems that have to look up\n   each character code 30 times per second in order to maintain the\n   display won't work so well.\n\nI have no special ideas about how to make keyboards adaptable to\narbitrary sets.  Each user may have to fend for himself.\n\nIn this memorandum so far, I have ignored typography, i.e. the fact\nthat in printed documents the same letter may be printed in many\nfonts.  Perhaps, each character in each font will require a separate\nregistered description, but with a constant difference between the\nnumbers of the same character in different fonts.  Installations will\nagain have to decide what font distinctions they will implement.\n\nSome other issues that might be considered are whether means can be\nprovided to adapt texts automatically to the line and page lengths of\nthe different devices.\n\nIt seems to me most likely that the typographical problems cannot be\nsolved at this time, and it would be best to adopt conventions for\nregistering character designs at this time, and leave typography for\nlater.\n\n\n\n\n\n\n\n                                                                [Page 3]\n\f\nNWG/RFC# 373                        JMC 14-JUL-72 12:41  11058\nARBITRARY CHARACTER SETS  by John McCarthy\n\nIn my opinion, there is no real obstacle to establishing the registry\nin the ARPA network now, getting the standards organization to work,\nand being able to exchange documents in extended character sets as\nsoon as the various installations can acquire the printers and display\ndevices.\n\nIt is the present policy of the Stanford Artificial Intelligence\nLaboratory to acquire no more devices that are wedded to fixed\ncharacter sets.\n\n\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n       [ into the online RFC archives by BBN Corp. under the   ]\n       [ direction of Alex McKenzie.                      1/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\n"
}