{
  "series": "Request for Comments",
  "number": "189",
  "howpublished": "RFC 189",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0189",
  "url": "https://www.rfc-editor.org/info/rfc189",
  "title": "Interim NETRJS specifications",
  "pagetotal": "19",
  "year": "1971",
  "month": "jul",
  "body": "\n\n\n\n\n\nNetwork Working Group                                       R. T. Braden\nRequest for Comments: 189                                       UCLA/CCN\nObsoletes: RFC 88 (NIC 5668)                                15 July 1971\nNIC 7133\nCategory:  D\n\n\n                     INTERIM NETRJS SPECIFICATIONS\n\n   The following document describes the operation and protocol of the\n   remote job entry service to CCN's 360 Model 91.  The interim protocol\n   described here will be implemented as a production service before the\n   end of July.  Two host sites (Rand and UCLA/NMC) have written user\n   processes for the interim NETRJS, based on the attached document.\n   Questions on it should be addressed to CCN's Technical Liaison.\n\n   It is anticipated that the interim protocol will be superseded in a\n   few months by a revised NETRJS, but the changes will be minor.  The\n   revision will bring the data transfer protocol of NETRJS into\n   complete conformity with the proposed Data Transfer Protocol DTP (see\n   RFC #171).  The present differences between the DTP and NETRJS\n   protocols are:\n\n      (a)  The format (but not the contents) of the 72 bit transaction\n           header of NETRJS must be changed to conform with DTP.\n\n      (b)  The End-of-Data marker must be changed from X'FE' to X'B40F'.\n\n      (c)  The initial \"modes available\" transaction of DTP must be\n           added.\n\n      (d)  Some of the DTP error codes will be implemented.\n\n\n   No other protocol changes are presently planned, although some may be\n   suggested by operating experience with the interim protocol.  When\n   the revised protocol has been fully specified, it will be implemented\n   with different ICP sockets than the interim protocol.  This will\n   allow a site which wants to start using CCN immediately to convert\n   his protocol at leisure.\n\n   Some possible future extensions to NETRJS which have been suggested\n   are:\n\n      (1)  A 7-bit ASCII option of data transfer connections, for the\n           convenience of PDP-10s.\n\n\n\n\n\nBraden                                                          [Page 1]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n      (2)  A \"transparency\" mode for input from ASCII remote sites, to\n           allow the transmission of \"binary decks\" (object decks) in\n           the job stream from these sites.\n\n      (3)  More than one simultaneous virtual card read, printer, and\n           punch stream to the same virtual terminal.\n\n   Comments on the utility of these proposals or others for your site\n   would be appreciated.\n\n\n\n                             Robert T. Braden\n                             Technical Liaison\n                                 UCLA/CCN\n                              (213) 825-7518\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                          [Page 2]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                       REMOTE JOB ENTRY TO UCLA/CCN\n                           FROM THE ARPA NETWORK\n\n                            (Interim Protocol)\n\nA. Introduction\n\n   NETRJS is the protocol for the remote job entry service to the 360\n   Model 91 at the UCLA Campus Computing Network (CCN).  NETRJS allows\n   the user at a remote host to access CCN's RJS (\"Remote Job Service\")\n   sub-system, which provides remote job entry service to real remote\n   batch (card reader/line printer) terminals over direct communications\n   lines as well as to the ARPA Network.\n\n   To use NETRJS, a user at a remote host needs a NETRJS user process to\n   communicate with one of the NETRJS server processes at CCN.  Each\n   active NETRJS user process appears to RJS as a separate (virtual)\n   remote batch terminal; we will refer to it as a VRBT.\n\n   A VRBT may have virtual card readers, printers, and punches.  Through\n   a virtual card reader a Network user can transmit a stream of card\n   images comprising one or more OS/360 jobs, complete with Job Control\n   Language, to CCN.  These jobs will be spooled into CCN's batch system\n   (OS/360 MVT) and run according to their priority.  RJS will automati-\n   cally return the print and/or punch output images which are created\n   by these jobs to the virtual printer and/or card punch at the VRBT\n   from which the job came (or to a different destination specified in\n   the JCL).  The remote user can wait for his output, or he can sign\n   off and sign back on later to receive it.\n\n   The VRBT is assumed to be under the control of the user's teletype or\n   other remote console; this serves the function of an RJS remote\n   operator console.  To initiate a NETRJS session, the remote user must\n   execute the standard ICP (see RFC #165) to a fixed socket at CCN.\n   The result is to establish a duplex Telnet connection to his console,\n   allowing the user to sign into RJS.  Once he is signed in, he can use\n   his console to issue commands to RJS and to receive status, confirma-\n   tion, and error messages from RJS.  The most important RJS commands\n   are summarized in Appendix D.\n\n   Different VRBT's are distinguished by 8-character terminal id's.\n   There may be more than one VRBT using RJS simultaneously from the\n   same remote host.  Terminal id's for new VRBT's will be assigned by\n   CCN to individual users or user groups who wish to run batch jobs at\n   CCN (contact the CCN Technical Liaison for details).\n\n\n\n\n\n\nBraden                                                          [Page 3]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\nB. Connections and Protocols\n\n   Figure 1 shows conceptually the processes and protocols required to\n   use NETRJS.  The operator console uses a duplex connection under the\n   Telnet third-level protocol (see RFC #158).  The actual data transfer\n   streams for job input and output are handled over separate simplex\n   connections using a data transfer protocol.\n\n   We will use the term channel for one of these NETRJS connections, and\n   designate it input or output with reference to CCN.  Each data\n   transfer channel is identified with a particular virtual remote dev-\n   ice -- card reader, printer, or punch.  The data transfer channels\n   need be open only while they are in use, and different channels may\n   be used sequentially or simultaneously.  NETRJS will presently sup-\n   port simultaneous operation of a virtual card reader, a virtual\n   printer, and a virtual punch (in addition to the operator console) on\n   the same VRBT process.  RJS itself will support more than one reader,\n   printer, and punch at each remote terminal, so the NETRJS protocol\n   could easily be expanded in the future to allow more simultaneous I/O\n   streams to each Network user.\n\n   The remote user needs a local escape convention so he can send com-\n   mands directly to his VRBT process.  These local VRBT commands would\n   allow selection of the files at his host which contain job streams to\n   be sent to the server, and files to receive job output from the\n   server.  They would also allow the user to open data transfer chan-\n   nels to the NETRJS server process, and to close these connections to\n   free buffer space or abort a transmission.\n\n   When a VRBT starts a session, it has a choice of two ICP sockets,\n   depending upon whether it is an ASCII or an EBCDIC virtual terminal.\n   An EBCDIC virtual terminal transmits and receives its data as tran-\n   sparent streams of 8 bit bytes (since CCN is an EBCDIC installation).\n   It is expected that a user at an ASCII installation, however, will\n   want his VRBT declared ASCII; RJS will then translate the input\n   stream from ASCII to EBCDIC and translate the printer stream back to\n   ASCII.  This will allow the user to employ his local text editor for\n   preparing input to CCN and for examining output.  The punch stream\n   will always be transparent, for outputting \"binary decks\".\n\n   It should be noted that the choice of code for the operator console\n   connections is independent of declared terminal type; in particular,\n   they always use ASCII under Telnet protocol, even from an EBCDIC\n   VRBT.\n\n\n\n\n\n\n\nBraden                                                          [Page 4]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n   NETRJS protocol provides data compression, replacing repeated blanks\n   or other characters by repeat counts.  However, when the terminal id\n   is assigned by CCN, a particular network terminal may be specified as\n   using no data compression.  In this case, NETRJS will simply truncate\n   trailing blanks and send records in a simple \"op code-length-data\"\n   form, called truncated format.\n\nC. Starting and Terminating a Session\n\n   The remote user establishes a connection to RJS via the standard ICP\n   from his socket U to socket 11 [sub] 10 (EBCDIC) or socket 13 [sub]\n   10 (ASCII) at host 1, IMP 1.  If successful, the ICP results in a\n   pair of connections which are in fact the NETRJS operator control\n   connections.\n\n   Once the user is connected, he must enter a valid RJS signon command\n   (\"SIGNON terminal-id\") through his console.  RJS will normally ack-\n   nowledge signon with a console message; however, if RJS does not\n   recognize the terminal-id or has no available Line Handler for the\n   Network, it will indicate refusal by closing both operator connec-\n   tions.  If the user attempts to open data transfer connections before\n   his signon command is accepted, the data transfer connections will be\n   refused by CCN with an error message to his console.\n\n   Suppose the operator input connection is socket S at CCN; S is the\n   even number sent in the ICP.  Then the other NETRJS channels have\n   sockets at CCN with fixed relation to S, as shown in the table below.\n   Until there is a suitable Network-wide solution to the problem of\n   identity control on sockets, NETRJS will also require that the VRBT\n   process use fixed socket offsets from his initial connection socket\n   U.  These are shown in the following table:\n\n            Channel                        CCN Socket    Remote Socket\n                                           (Server)      (User)\n\n Telnet  / Remote Operator Console Input    S             U + 3 \\\n         \\ Remote Operator Console Output   S + 1         U + 2 / Telnet\n Data      / Card Reader #1                 S + 2         U + 5\n Transfer \u003c  Printer #1                     S + 3         U + 4\n           \\ Punch #1                       S + 5         U + 6\n\n   Once the user is signed on, he can open data transfer channels and\n   initiate input and output operations as explained in the following\n   sections.  To terminate the session, the remote user may close all\n   connections.  Alternatively, the user may enter a SIGNOFF command\n   through his console; in this case, RJS will wait until the current\n   job output streams are complete and then itself terminate the session\n   by closing all connections.\n\n\n\nBraden                                                          [Page 5]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\nD. Input Operations\n\n   A job stream for submission to RJS at CCN is a series of logical\n   records, each of which is a card image.  A card image may be at most\n   80 characters long, to match the requirements of OS/360 for job\n   input.  The user can submit a \"stack\" of successive jobs through the\n   card reader channel with no end-of-job indication between jobs; RJS\n   recognizes the beginning of each new job by the appearance of a JOB\n   card.\n\n   To submit a job or stack of jobs for execution at CCN, the remote\n   user must first open the card reader channel.  He signals his VRBT\n   process to issue Init (local = U + 5, foreign = S + 2, size = 8).\n   NETRJS, which is listening on socket S + 2, will normally return an\n   RTS command, opening the channel.  If, however, it should happen that\n   all input buffer space within the CCN NCP is in use, the request will\n   be refused, and the user should try again later.  If the problem per-\n   sists, call the Technical Liaison at CCN.\n\n   When the connection is open, the user can begin sending his job\n   stream using the protocol defined in Appendix A.  For each job suc-\n   cessfully spooled, the user will receive a confirming message on his\n   console.  At the end of the stack, he must send an End-of-Data tran-\n   saction to initiate processing of the last job.  NETRJS will then\n   close the channel (to avoid holding buffer space unnecessarily).  At\n   any time during the session, the user can re-open the card reader\n   channel and transmit another job stack.  He can also terminate the\n   session and sign on later to get his output.\n\n   The user can abort the card reader channel at any time by closing the\n   channel (his socket S + 2).  NETRJS will then discard the last par-\n   tially spooled job.  If NETRJS finds an error (e.g., transaction\n   sequence number error or a dropped bit), it will abort the channel by\n   closing the connection prematurely, and also inform the user via his\n   console that his job was discarded (thus solving the race condition\n   between End-of-Data and aborting).  The user needs to retransmit only\n   the last job.  However, he could retransmit the entire stack\n   (although it would be somewhat wasteful) since the CCN operating sys-\n   tem enforces job name uniqueness by immediately \"flushing\" jobs with\n   names already in the system.\n\n   If the user's process, NCP, or host, or the Network itself fails dur-\n   ing input, RJS will discard the job being transmitted.  A message\n   informing the user that this job was discarded will be generated and\n   sent to him the next time he signs on.  On the other hand, those jobs\n   whose receipt have been acknowledged on the operator's console will\n   not be affected by the failure, but will be executed by CCN.\n\n\n\n\nBraden                                                          [Page 6]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\nE. Output Operations\n\n   The user may wait to set up a virtual printer (or punch) and open its\n   channel until a STATUS message on his console indicates output is\n   ready; or he may leave the output channel(s) open during the entire\n   session, ready to receive output whenever it becomes available.  He\n   can also control which one of several available jobs is to be\n   returned by entering appropriate operator commands.\n\n   To be prepared to receive printer (or punch) output from his jobs,\n   the user site issues Init (local = U + 4 (U + 6), foreign = S + 3 (S\n   + 5), size = 8), respectively.  NETRJS is listening on these sockets\n   and should immediately return an STR.  However, it is possible that\n   because of software problems at CCN, RJS will refuse the connection\n   and a CLS will be returned; in this case, try again or call the\n   Technical Liaison.\n\n   When RJS has output to send to a particular (virtual) terminal and a\n   corresponding open output channel, it will send the output as a\n   series of logical records using the protocol in Appendix A.  The\n   first record will consist of the job name (8 characters) followed by\n   a comma and then the ID string from the JOB card (if any).  In the\n   printer stream, the first column of each record will be an ASA car-\n   riage control character (see Appendix C); the punch output stream\n   will never contain carriage control characters.\n\n   NETRJS will send an End-of-Data transaction and then close an output\n   channel at the end of the output for each complete batch job; the\n   remote site must then send a new RFC (and ALL) to start output for\n   another job.  This gives the remote site a chance to allocate a new\n   file for each job without breaking the output within a job.  If the\n   user at the remote site wants to cancel (or backspace or defer) the\n   output of a particular job, he enters appropriate RJS commands on the\n   operator input channel (see Appendix D).\n\n   A virtual printer in NETRJS has 254 columns, exclusive of carriage\n   control; RJS will send up to 255 characters of a logical record it\n   finds in a SYSOUT data set.  If the user wishes to reject or fold\n   records longer than some smaller record size, he can do so in his\n   VRBT process.\n\n   If RJS encounters a permanent I/O error in reading the disk data set,\n   it will notify the user via his console, skip forward to the next set\n   of system messages or SYSOUT data set in the same job, and continue.\n   In the future, RJS may be changed to send a Lost Data marker within\n   the data stream as well as a console message to the user.  In any\n   case, the user will receive notification of termination of output\n   data transfer for each job via messages on his console.\n\n\n\nBraden                                                          [Page 7]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n   If the user detects an error in the stream, he can issue a Backspace\n   (BSP) command from his console to repeat the last \"page\" of output,\n   or a Restart (RST) command to repeat from last SYSOUT data set or the\n   beginning of the job, or he can abort the channel by closing his\n   socket.  If he aborts the channel, RJS will simulate a Backspace com-\n   mand, and when the user re-opens the channel the job will begin\n   transmission again from an earlier point in the same data set.  This\n   is true even if the user terminates the current session first, and\n   re-opens the channel in a later session; RJS saves the state of its\n   output streams.  However, before re-opening the channel he can defer\n   this job for later output, restart it at the beginning, or cancel its\n   output (see Appendix D).  Note that aborting the channel is only\n   effective if RJS has not yet sent the End-of-Data transaction.\n\n   If the user's process, NCP, or host, or the Network itself fails dur-\n   ing an output operation, RJS will act as if the channel had been\n   aborted and the user signed off.  In no case should a user lose out-\n   put from NETRJS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                          [Page 8]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                                Appendix A\n\n                     Data Transfer Protocol in NETRJS\n\n\n1. Introduction\n\n   The records in the data transfer channels (for virtual card reader,\n   printer, and punch) are generally grouped into _transactions_ pre-\n   ceded by headers.  The transaction header includes a sequence number\n   and the length of the transaction.  Network byte size must be 8 bits\n   in these data streams.\n\n   A transaction is the unit of buffering within the Model 91 software.\n   Internal buffers are 880 bytes.  Therefore, CCN cannot transmit or\n   receive a single transaction larger than 880 bytes.  Transactions can\n   be as short as one record; however, those sites which are concerned\n   with efficiency should send transactions as close as possible to the\n   880 byte limit.\n\n   There is no necessary connection between physical message boundaries\n   and transactions (\"logical messages\"); the NCP can break the \"logical\n   message\" arbitrarily into physical messages.  At CCN we will choose\n   to have each logical message start a new physical message, so the NCP\n   can send the last part of each message without waiting for an expli-\n   cit request, but a remote site is not required to follow this conven-\n   tion.\n\n   Each logical record within a transaction begins with an \"op code\"\n   byte which contains the channel identification, so its value is\n   unique to each channel but constant within a channel.  This choice\n   provides a convenient way to verify bit synchronization at the\n   receiver, and also allows an extension in the future to true \"multi-\n   leaving\" (i.e., multiplexing all channels within one connection in\n   each direction).\n\n   The only provisions for transmission error detection in the current\n   NETRJS protocol are (1) this \"op code\" byte to verify bit synchroni-\n   zation and (2) the transaction sequence number.  At the urging of\n   Crowther, we favor putting an optional 16 bit check sum in the unused\n   bytes of the second-level header.  It is currently assumed that if an\n   error is detected then the channel is to be aborted and the entire\n   transmission repeated.  To provide automatic retransmission we would\n   have to put in reverse channels for ACK/NAK messages.\n\n\n\n\n\n\n\nBraden                                                          [Page 9]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n2. Character Sets\n\n   For an ASCII VRBT, NETRJS will map ASCII in the card reader stream\n   into EBCDIC, and re-map the printer stream to ASCII, by the following\n   rules:\n\n        1.  One-to-one mapping between the three ASCII characters | ~ \\\n            which are not in EBCDIC, and the three EBCDIC characters\n            [vertical bar, not-sign and cent-sign] (respectively) which\n            are not in ASCII.\n\n        2.  The other six ASCII graphics not in EBCDIC will be\n            translated on input to an EBCDIC question mark (?).\n\n        3.  The ASCII control DC3 (the only one not in EBCDIC) will be\n            mapped into and from the EBCDIC control TM.\n\n        4.  The EBCDIC characters not in ASCII will be mapped in the\n            printer stream into the ASCII question mark.\n\n3. Meta-Notation\n\n   The following description of the NETRJS data transfer protocol uses a\n   formal notation derived from that proposed in RFC #31 by Bobrow and\n   Sutherland.  (The NETRJS format is also shown diagramatically in\n   Figure 2.)\n\n   The derived notation is both concise and easily readable, and we\n   recommend its use for Network documentation.  The notation consists\n   of a series of productions for bit string variables whose names are\n   capitalized.  Each variable name which represents a fixed length\n   field is followed by the length in bits (e.g., SEQNUMB(16)).  Numbers\n   enclosed in quotes are decimal, unless qualified by a leading X\n   meaning hex.  Since each hex digit is 4 bits, the length is not shown\n   explicitly in hex numbers.  For example, '1'(8) and X'FF' both\n   represent a string of 8 one bits.  The meta-syntactic operators are:\n\n           |       :alternative string\n           [ ]     :optional string\n           ( )     :grouping\n           +       :catenation of bit strings\n\n   The numerical value of a bit string (interpreted as an integer) is\n   symbolized by a lower case identifier preceding the string expression\n   and separated by a colon.  For example, in \"i:FIELD(8)\", i symbolizes\n   the numeric value of the 8 bit string FIELD.\n\n\n\n\n\nBraden                                                         [Page 10]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n   Finally, we use Bobrow and Sutherland's symbolism for iteration of a\n   sub-string:  (STRING-EXPRESSION = n); denotes n occurrences of STRING\n   EXPRESSION, implicitly catenated together.  Here any n \u003e= 0 is\n   assumed unless n is explicitly restricted.\n\n\n4. Protocol Definition\n\n       STREAM \u003c-- (TRANSACTION = n) + [END-OF-DATA]\n\n   That is, STREAM, the entire sequence of data on a particular open\n   channel, is a sequence of n TRANSACTIONS followed by an END-OF-DATA\n   marker (omitted if the sender aborts the channel).\n\n       TRANSACTION \u003c-- THEAD(72) + (RECORD = r) + ('0'(1) = f)\n\n   That is, a transaction consists of a 72 bit header, r records, and f\n   filler bits.\n\n       THEAD \u003c-- X'FF' + f:FILLER(8) + SEQNUMB(16) + LENGTH(32) + X'00'\n\n   Transactions are to be consecutively numbered in the SEQNUMB field,\n   starting with 0 in the first transaction after the channel is (re-)\n   opened.  The 32 bit LENGTH field gives the total length in bits of\n   the r RECORD's which follow.  For convenience, the using site may add\n   f additional filler bits at the end of the transaction to reach a\n   convenient word boundary on his machine; the value f is also\n   transmitted in the FILLER field of THEAD.\n\n       RECORD \u003c-- COMPRESSED | TRUNCATED\n\n   RJS will accept intermixed RECORD's which are COMPRESSED or TRUNCATED\n   in an input stream.  RJS will send one or the other format in the\n   printer and punch streams to a given VRBT; the choice is determined\n   when CCN establishes a terminal id.\n\n       COMPRESSED  \u003c--   '2'(2) + DEVID(6) + (STRING = p) + '0'(8)\n\n       STRING      \u003c--   ('6'(3) + i:DUPCOUNT(5))\n                         This form represents a string of i\n                         consecutive blanks\n\n                         ('7'(3) + i:DUPCOUNT(5) + TEXTBYTE(8))\n                         This form represents string of i consecutive\n                         duplicated of TEXTBYTE.\n\n\n\n\n\n\nBraden                                                         [Page 11]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                         ('2'(2) + j:LENGTH(6) + (TEXTBYTE(8) = j))\n                         This form represents a string of j\n                         characters.\n\n   The first two alternatives above in the STRING production begin with\n   count bytes chosen to be distinguishable from the (currently defined)\n   Telnet control characters.  In a Telnet stream, the third count byte\n   would not be needed.  This is irrelevant to the current NETRJS, but\n   it would allow the use of compression within a Telnet data stream.\n\n      TRUNCATED \u003c-- '3'(2) + DEVID(6) + n:COUNT(8) + (TEXTBYTE(8) = n)\n\n      DEVID(6)  \u003c-- DEVNO(3) + t:DEVTYPE(3)\n\n                    DEVID identifies a particular virtual device, i.e.,\n                    it identifies a channel.  DEVTYPE specifies the type\n                    of device, as follows:\n\n                    t = 1:  Output to remote operator console\n                        2:  Input from remote operator console\n                        3:  Input from card reader\n                        4:  Output to printer\n                        5:  Output to card punch\n                      6,7:  Unused\n\n                    DEVNO(3) identifies the particular device of type t\n                    at this remote site; at present only DEVNO = 0 is\n                    possible.\n\n      END-OF-DATA \u003c-- X'FE'\n                    Signals end of job (output) or job stack (input).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                         [Page 12]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                                APPENDIX B\n\n                     Telnet for VRBT Operator Console\n\n   The remote operator console connections use the ASCII Telnet\n   protocol as in RFC #158.  Specifically:\n\n    1)  The following one-to-one character mappings are used for the\n        three EBCDIC graphics not in ASCII:\n\n               ASCII\n              in Telnet                NETRJS\n\n                  |                  [vertical bar]\n                  ~                  [not-sign]\n                  \\                  [cent-sign]\n\n    2)  Initially all Telnet control characters will be ignored.  In the\n        future we will implement the Telnet Break facility to allow a\n        remote user to terminate extensive console output from a\n        command.\n\n    3)  An operator console input line which exceeds 133 characters\n        (exclusive of CR LF) will be truncated by NETRJS.\n\n    4)  NETRJS will accept BS to delete a character, and CAN to delete\n        the current line.  The sequence CR LF terminates each input and\n        output line.  HT will be translated to a single space in RJS.\n        All other ASCII control characters will be ignored.  NETRJS will\n        translate the six ASCII graphics with no equivalent in EBCDIC\n        into the character question mark (\"?\") on input.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                         [Page 13]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                                   APPENDIX C\n\n                                Carriage Control\n\n   The carriage control characters sent in a printer channel by NETRJS\n   conform to IBM's extended USASI code, defined by the following table:\n\n            CODE                ACTION BEFORE WRITING RECORD\n\n            blank               Space one line before printing\n              0                 Space two lines before printing\n              -                 Space three lines before printing\n              +                 Suppress space before printing\n              1                 Skip to channel 1\n              2                 Skip to channel 2\n              3                 Skip to channel 3\n              4                 Skip to channel 4\n              5                 Skip to channel 5\n              6                 Skip to channel 6\n              7                 Skip to channel 7\n              8                 Skip to channel 8\n              9                 Skip to channel 9\n              A                 Skip to channel 10\n              B                 Skip to channel 11\n              C                 Skip to channel 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                         [Page 14]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                               APPENDIX D\n\n                      Network/RJS Command Summary\n\nTerminal Control and Information Command\n\n   SIGNON          First command of a session; identifies VRBT by giving\n                   its terminal id.\n\n   SIGNOFF         Last command of a session; RJS waits for any data\n                   transfer in progress to complete and then closes all\n                   connections.\n\n   STATUS          Outputs on the remote operator console a complete\n                   list, or a summary, of all jobs in the system for\n                   this VRBT, with an indication of their processing\n                   status in the Model 91.\n\n   ALERT           Outputs on the operator console the special \"Alert\"\n                   message, if any, from CCN computer operator.  The\n                   Alert message is also automatically sent when the\n                   user does a SIGNON, or whenever the message changes.\n\n   MSG             Sends a message to CCN computer operator or to any\n                   other RJS terminal (real or virtual).  A message from\n                   the computer operator or another RJS terminal will\n                   automatically appear on the remote operator console.\n\nJob Control and Routing Commands\n\n   Under CCN's job management system, the default destination for output\n   is the input source.  Thus, a job submitted under a given VRBT will\n   be returned to that VRBT (i.e., the same terminal id), unless the\n   user's JCL overrides the default destination.\n\n   RJS places print and punch output described for a particular remote\n   terminal into either an Active Queue or a Deferred Queue.  When the\n   user opens his print or punch output channel, RJS immediately starts\n   sending job output from the Active Queue, and continues this queue is\n   empty.  Job output in the Deferred Queue, on the other hand, must be\n   called for by job name, (via a RESET command from the remote opera-\n   tor) before RJS will send it.  The Active/Deferred choice for output\n   from a job is determined by the deferral status of the VRBT when the\n   job is entered; the deferral status, which is set to the Active\n   option when the user signs on, may be changed by the SET command.\n\n\n\n\n\n\nBraden                                                         [Page 15]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n   SET             Allows the remote user to change certain properties\n                   of his VRBT for the duration of the current session;\n\n                   (a)  May change the default output destination to be\n                   another (real or virtual) RJS terminal or the central\n                   facility.\n\n                   (b)  May change the deferral status of the VRBT.\n\n   DEFER           Moves the print and punch output for a specified job\n                   or set of jobs from the Active Queue to the Deferred\n                   queue.  If the job's output is in the process of\n                   being transmitted over a channel, RJS aborts the\n                   channel and saves the current output location before\n                   moving the job to the Deferred Queue.  A subsequent\n                   RESET command will return it to the Active Queue with\n                   an implied Backspace (BSP).\n\n   RESET           Moves specified job(s) from Deferred to Active Queue\n                   so they may be sent to user.  A specific list of job\n                   names or all jobs can be moved with one RESET\n                   command.\n\n   ROUTE           Re-routes output of specified jobs (or all jobs)\n                   waiting in the Active and Deferred Queues for this\n                   VRBT.  The new destination may be any other RJS\n                   terminal or the central facility.\n\n   ABORT           Cancels a job which was successfully submitted and\n                   awaiting execution or is current executing in the\n                   Model 91.  If he cancelled job was in execution, all\n                   output it produced ill be returned.\n\nOutput Stream Control Commands\n\n   BSP (BACKSPACE) \"Backspaces\" output stream within current sysout data\n                   set.  Actual amount backspaced depends upon sysout\n                   blocking but is typically equivalent to a page on the\n                   line printer.\n\n   CAN (CANCEL)    (a) On an output channel, CAN causes the rest of the\n                       output in the sysout data set currently being\n                       transmitted to be omitted.  Alternatively, may\n                       omit the rest of the sysout data sets for the job\n                       currently being transmitted; however, the remain-\n                       ing system and accounting messages will be sent.\n\n\n\n\n\nBraden                                                         [Page 16]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                   (b) On an input channel, CAN causes RJS to ignore the\n                       job currently being read.  However, the channel\n                       is not aborted as a result, and RJS will continue\n                       reading in jobs on the channel.\n\n                   (c) CAN can delete all sysout data sets for specified\n                       job(s) waiting in Active or Deferred Queue.\n\n   RST (RESTART)   (a) Restarts a specified output stream at the begin-\n                       ning of the current sysout data set or, option-\n                       ally, at the beginning of the job.\n\n                   (b) Marks as restarted specified job(s) whose\n                       transmission was earlier interrupted by system\n                       failure or user action (e.g., DEFER command or\n                       aborting the channel).  When RJS transmits these\n                       jobs again it will start at the beginning of the\n                       partially transmitted sysout data set or, option-\n                       ally, at the beginning of the job.  This function\n                       may be applied to jobs in either the Active or\n                       the Deferred Queue; however, if the job was in\n                       the Deferred Queue then RST also moves it to the\n                       Active Queue.  If the job was never transmitted,\n                       RST has no effect other than this queue movement.\n\n   REPEAT          Sends additional copies of the output of specified\n                   jobs.\n\n   EAM             Echoes the card reader stream back in the printer or\n                   punch stream, or both.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBraden                                                         [Page 17]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                  +---------------------------------+\n                  |               RJS               |\n                  +---------------------------------+\n                       ^   |         ^  |  |\n                       |   v         |  v  v\n                    +------------------------------+\n CCN -- Server      |                              |\n                    |          NETRJS              |\n                    +------------------------------+\n                       ^   |          ^    |     |\n                       |   v          |    v     v\n                  +----------+      +---------------+\n                  |  TELNET  |      |  Data  Xfer   | (server)\n                  |  Server  |      |  3rd Level    |\n                  +----------+      +---------------+\n                     ^     |          ^     |     |\n---------------------|-----|----------|-----|-----|-----------------\n                 O   |  O  |          |     |     |\n                 p   |  p  |         C|    C|    C|\n                 e I |  e O|       I h|  O h|  P h|\n ARPA            r n |  r u|       n a|  u a|  u a|\n                 a p |  a t|       p n|  t n|  n n|\n Network         t u |  t p|       u n|  p n|  c n|\n                 o t |  o u|       t e|  u e|  h e|\n                 r   |  r t|         l|  t l|    l|\n---------------------|-----|----------|-----|-----|-----------------\n                     |     |          |     |     |\n                     |     V          |     V     V\n                  +----------+      +---------------+\n                  |  TELNET  |      |  Data  Xfer   | (user)\n                  |  Server  |      |  3rd Level    |\n                  +----------+      +---------------+\n Remote              ^                ^     |     |\n                    /  \"Virtual       |     |     |\n User              /    Remote Batch  |     V     V\n                  /     Terminal\"  +------------------+\n                 /                 |                  |\n                V                  |     NETRJS       |\n         +---------+               |     User         |\n        /          |\u003c-------------\u003e|     Process      |\n       / Console   |               |                  |\n      +____________|               +------------------+\n                                       ^     |     |\n                                       |     V     V\n                                    (file) (file) (file)\n\n\n               FIGURE 1. SCHEMATIC OF NETRJS OPERATION\n\n\n\nBraden                                                         [Page 18]\n\f\nRFC 189              Interim NETRJS Specifications             July 1971\n\n\n                 +------+ +------+ +-----------+ +---------------------+\nTRANSACTION \u003c--\u003e | X'FF'| |Filler| |Sequence   | | Data Length         |\n                 |      | | Count| |   Number  | |     in bits         |\n                 +------+ +------+ +-----------+ +---------------------+\n                                                 +------+\n                                                 | X'00'|  { RECORD } *\n                                                 |      |\n                                                 +------+\n\n                                        \u003c----  n text bytes  ------\u003e\n               +--+-----+   +--------+   +--------+        +--------+\nTRUNCATED \u003c--\u003e |11|Devid|   | n (8)  |   | Text   | . . .  | Text   |\nRECORD         |  | (6) |   |        |   | (8)    |        | (8)    |\n               +--+-----+   +--------+   +--------+        +--------+\n\n\n                          /                                         \\\n                          | +---+----+                               | *\n                          | |110| n  |  (n blanks)                   |\n                          | |   |(5) |                               |\n                          | +---+----+                               |\n                          |                                          |\n               +--+-----+ / +---+----+   +--------+                  |\nCOMPRESSED\u003c--\u003e |10|Devid|\u003c  |111| n  |   |Char-   |  (n replications |\nRECORD         |  | (6) | \\ |   |(5) |   |  acter |  of \"Character\") |\n               +--+-----+ | +---+----+   +--------+                  |\n                          |                                          |\n                          | +--+-----+   +--------+      +--------+  |\n                          | |10|  n  |   | Text   | . . .| Text   |  |\n                          | |  | (6) |   | (8)    |      | (8)    |  |\n                          | +--+-----+   +--------+      +--------+  |\n                          \\                                          /\n                                                 +------+\n                                                 | X'00'|\n                                                 |      |\n                                                 +------+\n\n\n              FIGURE 2.  DATA TRANSFER PROTOCOL IN NETRJS\n\n\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n       [   into the online RFC archives by Tony Hansen 11/98   ]\n\n\n\n\n\nBraden                                                         [Page 19]\n\f\n"
}