{
  "series": "Request for Comments",
  "number": "147",
  "howpublished": "RFC 147",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0147",
  "url": "https://www.rfc-editor.org/info/rfc147",
  "title": "Definition of a socket",
  "pagetotal": "3",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\n                        Network Working Group\n\n\n                        Request for Comment 147\n\n                                NIC 6750\n\n\n\n\n\n\n\n\n\n                        The Definition of a Socket\n\n                             Joel M. Winett\n\n                            Lincoln Laboratory\n\n                                   360/67\n\n                                7 May 1971\n\n\nCategory: C1, C3, D1, H\nRFC obsoleted: None\nRFC updated: None\nRelated RFCs: RFC-129 (NIC-5845)\n\n\n\n\n\n   This material has not been reviewed for public release and is intended\n   only for use with the ARPA network. It should not be quoted or cited\n   in any publication not related to the ARPA network.\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\n                 MASSACHUSETTS INSTITUTE OF TECHNOLOGY\n                           LINCOLN LABORATORY\n\nTO:      Network Socket Committee and Network Community        7 May 1971\n\nFROM:    J. M. Winett (LL)\n\nSUBJECT: The Definition of a Socket\n\nA socket is defined to be the unique identification to or from which\ninformation is transmitted in the network. The socket is specified as a 32\nbit number with even sockets identifying receiving sockets and odd sockets\nidentifying sending sockets. A socket is also identified by the host in\nwhich the sending or receiving processer is located.\n\nPrevious network papers postulated that a process running under control of\nthe host's operating system would have access to a number of ports. A port\nmight be a physical input or output device, or a logical I/O device\nsupported by system calls to the host's operating system.  The latter\ncategory includes a) I/O directed to a physical device which is being\nspooled by the operating system, b) a physical device whose basic\ncharacteristics have not been altered but whose access has been limited and\npossibly transformed by a mapping algorithm (e.g. device address mapping or\ncylinder relocation as in virtual mini disks), c) access to a file system\nthrough a directory and access method maintained by the operating system,\nd) a procedure for process to process communications, e) a procedure for\nmachine to machine communication (such as defined by the network protocol.)\n\nA socket has been defined to be the identification of a port for machine to\nmachine communication through the ARPA network. Sockets allocated to each\nhost must be uniquely associated with a known process or be undefined. The\nname of some sockets must be universally known and associated with a known\nprocess operating with a specified protocol. (e.g., a logger socket, RJE\nsocket, a file transfer socket). The name of other sockets might not be\nuniversally known, but given in a transmission over a universally known\nsocket, (c. g. the socket pair specified by the transmission over the\nlogger socket under the Initial Connection Protocol (ICP). In any case,\ncommunication over the network is from one socket to another socket, each\nsocket being identified with a process running at a known host.\n\nThe question arises as to whether socket names must be known to users of\nnetwork programs or whether the specification of sockets can be made\ntransparent to the user. Also, should the socket used at one time by a\nprocess be the same socket used at a later time by the same process for the\nsame purpose? If sockets are not transparent to the user, then the sockets\nused must not be dependent on the order in which network connections are\nmade.\n\n\n\n\n                                                                [Page 2]\n\f\nNetwork Socket Committee and Network Community        7 May 1971\n\nThe definition of a socket is also related to the accounting procedures\nfollowed for network usage.  Network Control Programs (NCPs) should log\neach connection made and record the time the connection was made, the time\nthe connection was closed, the number of messages and number of bits\ntransmitted over the connection, the sending and receiving hosts, and the\nsockets at the sending host and receiving host which participated in the\nconnection. In order for these sockets to be meaningful, they should be\nidentifiable with the user, account, or process name with which each socket\nis associated.\n\nIt has previously been suggested that the sockets used by a network user be\nidentified with that user no matter which host he used for network\ncommunications. Users would be registered at some host and be identified as\na user from that host even if he used the system as a second host to\ncommunicate with the system at a third host.\n\nTo satisfy the above requirements within the name space of a 32 bit socket,\nthe following procedure is suggested. This procedure has been implemented\nwith the NCP on the Lincoln Laboratory 360/67 system and is used by all\nprocesses making use of network facilities. ) A 32 bit socket is divided\ninto an 8 bit \"home\" field, a 16 bit \"user\" field and an 8 bit \"tag\" field.\nThe tag consists of a 7 bit \"plug\" and a one bit \"polarity\" where a \"0\"\npolarity indicates a receive socket and a \"1\" polarity indicates a send\nsocket. Thus a user on one host system may run processes with up to 128\nsend sockets and 128 receive sockets.  This procedure allows for 256 hosts\nand 65,536 users per host.  The only difficulty is in mapping user or\nprocess identifiers at a host into a 16 bit user number. This may be done\nthrough a table lookup, possibly using a hash coding technique.  Though\nmany systems have a unique run time index associated with each process, if\nthis index were used as the user number, the user number would not be the\nsame each time the process were used for network activity.  What is\nrequired, is a unique mapping from a process identifier (usually a\ncharacter string) into a 16 bit binary number.\n\nThe sockets used for facilities following a common network protocol, such\nas the ICP, should also follow this socket definition. Thus the logger\nsocket at the Lincoln Laboratory 360/67 would be, and is, x'0A0000 01, ',\ni.e. home 10, user 0, and tag 1.\n\nThis procedure for defining sockets enables an accounting procedure for\nidentifying users of network facilities and for measuring network usage.\n\n       [ This RFC was put into machine readable form for entry ]\n       [ into the online RFC archives by BBN Corp. under the   ]\n       [ direction of Alex McKenzie.                   12/96   ]\n\n\n\n\n                                                                [Page 3]\n\f\n"
}