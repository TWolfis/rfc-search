{
  "series": "Request for Comments",
  "number": "125",
  "howpublished": "RFC 125",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0125",
  "url": "https://www.rfc-editor.org/info/rfc125",
  "title": "Response to RFC 86: Proposal for Network Standard Format for a Graphics Data Stream",
  "pagetotal": "4",
  "year": "1971",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\n                         NETWORK WORKING GROUP\n\n                        REQUEST FOR COMMENT: 125\n\n                                NIC 5841\n\n\n\n\n                             APRIL 18, 1971\n\n\n\n\n\n\n\n\n\n\n\n\n                             JOHN McCONNELL\n\n                          AMES RESEARCH CENTER\n                       MOFFETT FIELD, CALIFORNIA\n\n\n\n\n\nResponse to RFC #86, Proposal for Network Standard Format for a graphics\ndata stream.\n\n\n\nCategory         D.6\nRFCs obsoleted   None\nRFCs updated     86\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nThe basic approach of transmitting an intermediate, device independent\nlanguage which is translated into specific device codes at the\nreceiving host is sound. It appears to be the only approach that will\nallow thought to be centered on picture descriptions. Ames Research\nCenter has adopted this approach in tying its graphic facilities, of\nvarious types, and on various computers together. At present, we are\nin the design phase and expect our package to be running in about six\nmonths. The main objections to the structure as it now exists, is that\nit takes no cognizance of the many features available on graphics\ndevices. Since these features will always be changing with new\ndevices, a set of option or mode primitives should be defined which\nare logically separate from the drawing primitives provided in RFC 86.\nThe mode primitives will act upon the drawing primitives to modify\ntheir actions. The scope of a mode primitive extends until a new mode\nprimitive resets an option. The use of mode primitives will allow the\nnetwork standard stream interpreter to treat them as null operations\nif the features are missing at a particular host, or to perform more\ndetailed interpretation of the following data stream to achieve\nresults. The drawing primitives may also then keep a standard format\nwhich need not be changed to incorporate new features.\n\nOverall modes which primitives could control would be intensity\nlevels, or color selections for objects, in addition blinking of\nobjects should be provided. For vectors, the additional facility for\ndrawing dashed lines is necessary.\n\nCharacter strings require another set of specification. The convention\nfor the beam is usually that it is in the center of the rectangular\narea defining a character's boundaries. The beam position is usually\nundefined at the finish of drawing a character string. A strong\nexception is taken to the exclusion of form control characters from\nstrings. If included in the character string, they could provide for\nshifting from upper to lower case, subscripting, superscripting, and\nunderscoring, as well as tab and other \"carriage\" motion functions.\nThe appropriate characters could be extracted at interpretation time\nto provide the necessary information to display more complex strings.\nTo allow the facility for generating ALGOL-like delimiters, such as\n\"then\", a convention for canonical character string should be adopted.\nI believe the Multics conventions described in reference 1 will\nsuffice.\n\nAdditional options for character strings should include a size\nspecification and an orientation selection. As many devices, have\nhardware character generators that are fixed, some of these options\nmay not be desirable to implement as subroutines.\n\nAnother area that should be looked at further is the additional\nsymbols available which are not specified in ASCII. Some means of\n\n\n\n                                                                [Page 2]\n\f\ndefining them should be provided within the argument string itself,\nagain Multics has allowed the specification of arbitrary characters by\nentering their octal equivalents. The convention should use a control\ncharacter code followed by a l6-bit list name which specifies the\nsub-list defining the character. The other alternative is to allow\n8-bit characters and allow the interpreter to choose a sub-list if the\ncharacter is not realizable with a hardware generator.\n\nThe special form control characters to be used are:\n\n    a. BS    - backspace\n    b. LF    - for new line\n    c. SO/Sl - shift case\n    d. DC2   - superscript following characters\n    e. DC4   - subscript following characters\n    f. DC3   - special non-ASCII character follows\n    g. Tab   - position to next tab. May be predefined or specified.\n\nAnother construct should be added to those proposed in RFC 86. This is\nthe display list pointer (NGDLP). It will have as a value the next\ndrawing primitive to be executed. The value is a displacement from the\nhead of a list. With no mode setting primitives, this value is one to\none with the drawing primitives transmitted in the NGDS. The NGDLP is\nneeded for consistency for execution of the nested list structure.\nWhenever an execute list primitive is encountered, the current value\nof the NGDLP is saved along with the list name and current origin\nvalue. When execution of a list is finished, the last values saved are\nrestored.\n\nAn include list primitive would allow the treatment of a sub-list to\nbe equivalent to a macro instead of a subroutine. This would be\nnecessary to avoid changes to all sub-pictures on the screen due to\nthe manipulation of a sub-list. The include primitive should have as\nparameters such specifications as size, intensity, orientation,\nblinking, etc. After a sub-list has been included in another list, it\nis no longer distinguished as a separate entity.\n\nTo cut down on the volume of data being transferred, other commands to\nbe parsed by the stream interpreter should be added. These would allow\nthe manipulation of a list by the receiving host without a\nretransmission.  The types of manipulations would include rescaling\nthe coordinates for shrinking or zooming, translation of the origin,\nor rotation. Other manipulations to provide for displaying or not\ndisplaying a list, or enabling of disabling light pen detections would\nbe desirable.\n\nThe problem of interaction with the displayed picture has yet to be\naddressed, so this will be an attempt to elicit some more discussion\n\n\n\n                                                                [Page 3]\n\f\nin this area. The use of a keyboard or function keys poses no problem\nin that both can be handled as a standard message from the graphics\nterminal. The use of devices that interact with the picture or the\nscreen such as light pens, mice, joysticks, or tablets presents a\ndifferent and more complex problem. This problem is the standard one\nof making an association between the point selected and some\nmeaningful entity such as a list or a primitive. This association\nshould be made at the receiving host since the NGDS has been changed\nin unknown ways.\n\nTo allow the transmitting host to identify the object pointed at, the\nstack of suspended lists and the current value of the NGDLP will\nqualify the object to any level in a hierarchical structure. In\naddition, normalized x,y coordinates should be returned, as well as a\ncharacter displacement if a string was pointed at. This structure will\nserve a light pen device very well since the light pen mechanism\nallows the determination of the currently executing primitive. Other\ndevices interact with the picture in an asynchronous fashion and the\nassociation of an x,y pair to a structure is a more difficult problem.\nThis may require that the host generating the graphic data stream be\nresponsible for making that association. A further complication arises\nwhen it is desired to use a light pen in an area where no beam motion\noccurs, then some directive to periodically sweep the screen and\n\"find\" the pen must be provided. This might be a sub-list which is\nexecuted periodically for this function.\n\n\n       [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by Jerry Tenenbaum 4/97 ]\n\n---------------------------------------------------------------------------\nReference: Osanna, J., Sahzer, J.\n           Remote Terminal Character Stream Processing of Multics\n           Proceedings SJCC, 1970, p. 671\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 4]\n\f\n"
}