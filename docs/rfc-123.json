{
  "series": "Request for Comments",
  "number": "123",
  "howpublished": "RFC 123",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0123",
  "url": "https://www.rfc-editor.org/info/rfc123",
  "title": "Proffered Official ICP",
  "pagetotal": "3",
  "year": "1971",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                         S. Crocker\nRequest for Comments: 123                                           UCLA\nNIC #5837                                                    20 April 71\nCategories: D.1\nObsoletes: RFCs 66, 80\nUpdates: RFCs 98, 101\n\n\n                        A Proferred Official ICP\n\nBy Initial Connection Protocol (ICP), I mean a third level protocol\nwhich is initiated by a user process at one site in order to contact a\nserver process at another site.  Typically, the user process will be a\nTelnet and the server process will be a logger, but there may be other\ncases.\n\nIn this RFC, I wish to describe a family of ICPs suitable for\nestablishing one pair of connections (one in each direction) between any\nuser process and any server process, and to propose further a particular\nsubset of this family as the standard ICP for connecting user processes\nto loggers on systems which accept teletype-like devices.\n\nNotation\n\nWe have no standard notation for describing system calls which initiate\nand close connections or cause data to be sent, so I will use the\nfollowing ad hoc notation.\n\nInit (local = l, foreign = f, size = s)\n\n   causes the local Host to attempt to establish a connection between\n   socket l at the local Host and socket f, with a byte size of s for\n   the connection.\n\n   l is a 32 bit local socket number,\n   f is a 40 bit foreign socket number, the high-order eight bits\n   of which specify the foreign Host, and\n   s is an eight bit non-zero byte size.\n   The sum of l and f must be odd.\n\nListen (local = l, size = s)\n\n   causes the local Host to wait for a request for connection to local\n   socket l with byte size s.  The process will be woken when a\n   connection is established.  The parameters l and s are the same as\n   for Init.\n\n\n\n\n\n                                                                [Page 1]\n\f\nSend (socket = l, data = d)\n\n   The data named by d is sent over the connection attached to local\n   socket l. l must be a send socket attached to a connection.  d is the\n   name of a data area.\n\nReceive (socket = l, data = d)\n\n   The receive side counterpart to send.\n\nClose (socket = l)\n\n   Any connection currently attached to a local socket l is closed.\n\nA Family of ICPs\n\nBriefly, a server process at a site attaches a well-advertised send\nsocket L and listens.  A user process initiates connection to L from its\nreceive socket U.  The byte size for this connection is 32.  The server\nprocess then transmits a 32-bit even number S and closes the connection.\nThe 32-bit number S and its successor, S+1, are the socket number the\nserver will use.  The final steps are for sockets S and S+1 at the\nserver site to be connected to sockets U+1 and U respectively at the\nuser site.\n\nUsing the notation, the server executes the following sequence:\n\n   Listen (socket = L, size = 32)\n   [Wait until a user connects]\n   Send (socket = L, data = S)\n   Close (socket = L)\n   Init (local = S, foreign = U+1, size = Bu)\n   Init (local = S+1, foreign = U, size = Bs)\n\nThe user executes the following:\n\n   Init (local = U, foreign = L, size = 32)\n   Receive (socket = U, data = S)\n   Close (socket = U)\n   Init (local = U+1, foreign = S, size = Bu)\n   Init (local = U, foreign = S+1, size = Bs)\n\nNote that L is a send socket (odd), while S and U are receive sockets\n(even).  Where L, S or U are used as values of local, they are 32-bit\nnumbers; where they are values of foreign, they are 40-bit numbers.  The\nparameters Bs and Bu are the byte sizes to be sent by the server and\nuser, respectively.\n\n\n\n\n                                                                [Page 2]\n\f\nExamination of the above sequences reveals that an ICP is characterized\nby the three numbers L, Bs and Bu, and must meet the restrictions that\n\n   (a) L is a send socket,\n   (b) Bs and Bu are legal byte sizes, and\n   (c) for each L there is only on pair of associated byte sizes.\n\nThis last restriction prevents two distinct services from being\navailable through the same socket and distinguished only by the byte\nsizes.\n\nTelnet ICP\n\nFor connecting teletype-like users, i.e. interactive and ASCII, to Hosts\nserving such users, I propose an ICP of the form described above and\ncharacterized by L = 1, Bs = Bu = 8. [There has been some confusion\nabout socket numbers.  Here I specifically mean L = X00000001]\n\nFormalities\n\nI propose that the Telnet ICP be made official.  Comments should be\npublished before the May NWG meeting, the subject will be discussed\nthere, and we will decide there to accept or reject this protocol.\n\n\n       [ This RFC was put into machine readable form for entry ]\n          [ into the online RFC archives by Jeff Sorte 5/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 3]\n\f\n"
}