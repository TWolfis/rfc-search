{
  "series": "Request for Comments",
  "number": "120",
  "howpublished": "RFC 120",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0120",
  "url": "https://www.rfc-editor.org/info/rfc120",
  "title": "Network PL1 subprograms",
  "pagetotal": "16",
  "year": "1971",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\n                        NETWORK PL1 SUBPROGRAMS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             April 21, 1971\n\n                            Mark Krilanovich\n\n                         Computer Research Lab\n\n                        University of California\n\n                       Santa Barbara, California\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                [Page 1]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n                                PREFACE\n\n   The subroutines described in this document have been implemented at UCSB\n   and make the Network (via the NCP) accessible to PL1 programs executing\n   in the 360/75.  They are callable from within any PL1 main program or\n   subroutine compiled at UCSB.\n\n\n   A  set  of  assembly-language  written  subprograms  is  provided  to\n   facilitate  the use of the Network by PL1 programmers.  They serve as\n   an interface between the user and the Network Control Program  (NCP),\n   which supervises all Network operations at this site.\n\n\n   A concept  fundamental  to  PL1  Network  operations  is  that  of  a\n   completion code variable.  Associated with each socket that is not in\n   the closed state is a  unique  variable,  called  a  completion  code\n   variable.   This  variable  serves  two  purposes:  it identifies the\n   local socket referenced, and upon  completion  of  the  operation  it\n   contains  a  completion code to indicate the outcome of the operation\n   to the programmer.  It may be used at any time for any purpose  other\n   than  Network  operations.   Its  value at the beginning of a Network\n   operation is immaterial;  rather, it is the variable itself  that  is\n   important.   In  all  Network  operations, whenever a completion code\n   variable is called  for,  the  only  acceptable  attributes  for  the\n   variable are BINARY FIXED(31,0)ALIGNED.\n\n   In general, the subprograms will initiate the  operation,  and  enter\n   the WAIT state (consume no CPU time) until notified by the NCP of the\n   completion of the operation.  For  such  operations,  the  programmer\n   supplies  a  time  limit,  with  attributes BINARY FIXED(31,0), which\n   specifies, in tenths of a second, the  maximum  length  of  time  the\n   subprogram  is  to  wait for the operation to complete.  If this time\n   limit is exceeded, a completion code  is  supplied  to  indicate  the\n   error,  and  control  is  returned  to  the calling program, with the\n   operation still pending.\n\n   In those operations requiring a socket to be specified by its  socket\n   identifier,   the  following  format  is  used.   The  identifier  is\n   specified as a BINARY FIXED(31,0) array, singly dimensioned  with  at\n   least  two  elements,  and  with a lower subscript bound of one.  The\n   first element is taken to be the site number, and the second  element\n   the  socket  number.   A  socket number may have any value, positive,\n   negative, or zero.  Since negative numbers are represented internally\n   in two's complement form, for the purposes of the gender of a socket,\n   a socket number is even or odd  according  to  whether  its  absolute\n   value is even or odd, respectively.\n\n\n\n\n                                                                [Page 2]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n   Following is a description  of  each  subprogram,  its  function  and\n   calling sequence.\n\n(1)  OPEN\n\n     By invoking this subprogram, the user requests that  the  specified\n     local  socket be removed from the closed state and thus be prepared\n     to  participate  in  data  transfer.   There  are  three   distinct\n     operations  that can be performed by this subprogram, and these are\n     described below:\n\n     (A)  CONNECT\n\n          By initiating this  operation,  the  user  requests  that  the\n          specified local socket be logically connected to the specified\n          foreign socket, and that data transfer between the two sockets\n          be enabled.  The subprogram will wait until the foreign socket\n          either  accepts  or  rejects  the  connection  attempt.   This\n          operation  is  valid  only  when  the  socket is in the closed\n          state.\n\n          The calling sequence is as follows:\n\n               CALL @OPEN(cmpcd, time,lclsck,fgnsck,ws);\n\n          where\n\n               'cmpcd' is the completion code variable to be associated\n                    with the local socket.\n               'time' is the length of time the subprogram is to wait\n                    for the completion of the operation.\n               'lclsck' is the socket identifier of the local socket.\n               'fgnsck' is the socket identifier of the foreign socket.\n               'ws' is a workspace which has the same attributes as a\n                    socket identifier, and, if the operation if\n                    successful, will become associated with the local\n                    socket for the life of the connection.  In response\n                    to certain future operations, information may be\n                    returned to the programmer in this workspace.\n\n          The  following  completion  codes  are   possible   for   this\n          operation:\n\n               0,  The operation was successful and the connection has\n                   been established\n               4,  The specified completion code variable is already\n                   assigned to a socket;  the operation was suppressed\n               8,  The specified local socket is not in the closed\n\n\n\n                                                                [Page 3]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n                   state;  the operation was suppressed\n              12,  All communication paths to the specified foreign site\n                   are in use;  the operation was suppressed\n              16,  Local resources are insufficient to support another\n                   connection;  the operation was suppressed\n              20,  The connection attempt was rejected by the foreign\n                   process\n              24,  The specified local socket is not local to UCSB;  the\n                   operation was suppressed\n              28,  The specified foreign site is invalid;  the operation\n                   was suppressed\n              32,  An addressing or protection exception was encountered\n                   with respect to the specified workspace;  the\n                   operation was suppressed\n              36,  Either hardware at the foreign site is inoperative or\n                   the NCP's counterpart at the foreign site does not\n                   exist or has failed\n              40,  Local and foreign sockets are both either send or\n                   receive sockets;  the operation was suppressed\n              44,  By operator command, all Network operations were\n                   terminated;  the socket will be closed\n              60,  An NCP control transmission error occured;  the\n                   operation was suppressed\n             252,  The specified time limit was exceeded;  the operation\n                   was initiated but not completed\n\n     (B)  LISTEN\n\n          This operation is a request for notification of any connection\n          attempt  directed  toward  the  specified  local  socket.  The\n          subprogram waits until such a call is received, at which  time\n          the  calling  process'  socket  identifier  is returned to the\n          calling program.   This  operation  is  valid  only  when  the\n          designated  local  socket is in the closed state.  The calling\n          sequence is as follows:\n\n               CALL @OPEN(cmpcd, time,lclsck,ws);\n\n          where\n\n               'cmpcd' is the completion code variable to be associated\n                    with the local socket.\n               'time' is the length of time the subprogram is to wait\n                    for the completion of the operation.\n               'lclsck' is the socket identifier of the local socket.\n               'ws' is a workspace which, if the operation is\n                    successful, will contain the socket identifier of\n                    the calling socket, and will become associated with\n\n\n\n                                                                [Page 4]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n                    the local socket for the life of the connection.\n                    'ws' has the same attributes as a socket identifier.\n\n          The  following  completion  codes  are   possible   for   this\n          operation:\n\n               0,  The operation was successful and a call has been\n                   received\n               4,  The specified completion code variable is already\n                   assigned to a socket;  the operation was suppressed\n               8,  The specified local socket is not in the closed\n                   state;  the operation was suppressed\n              12,  Local resources are insufficient to support another\n                   connection;  the operation was suppressed\n              16,  The specified local socket is not local to UCSB;  the\n                   operation was suppressed\n              20,  An addressing or protection exception was encountered\n                   with respect to the specified workspace;  the\n                   operation was suppressed\n              44,  By operator command, all Network operations were\n                   terminated;  the socket will be closed\n             252,  The specified time limit was exceeded;  the operation\n                   was initiated but not completed\n\n     (C)  ACCEPT\n\n          This operation accepts  connection  with  the  foreign  socket\n          whose  call  caused successful completion of a previous LISTEN\n          operation by the specified local socket.  After completion  of\n          this  operation,  data may be transferred to or from the local\n          socket, depending on its gender.  This operation is valid only\n          when  the  last  operation  referencing the local socket was a\n          LISTEN  operation.   The  subprogram  will  wait   until   the\n          operation is completed.\n\n          The calling sequence is as follows:\n\n               CALL @OPEN(cmpcd, time);\n\n          where\n\n               'cmpcd' is the completion code variable associated with\n                    the local socket by a previous LISTEN operation.\n                'time' is the length of time the subprogram is to wait\n                    for the completion of the operation.\n\n          The  following  completion  codes  are   possible   for   this\n          operation:\n\n\n\n                                                                [Page 5]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n               0,  The operation was successful, and the connection is\n                   established\n               4,  The specified local socket is in the closed state\n                   (the NCP may have received an abort notification from\n                   the foreign process);  the operation was suppressed\n               8,  The previous operation specifying the designated\n                   local socket was not a LISTEN;  the operation was\n                   suppressed\n              12,  All communication paths to the specified foreign site\n                   are in use;  the socket has been returned to the\n                   closed state\n             252,  The specified time limit was exceeded;  the operation\n                   was initiated but not completed\n\n(2)  CLOSE\n\n     This operation is a request that  the  specified  local  socket  be\n     returned to the closed state.  If the last operation involving this\n     socket was a LISTEN, this operation refuses  the  foreign  process'\n     connection  attempt.   If  the  last  operation  was a CONNECT, the\n     attempt is aborted.  If a connection is established,  any  data  in\n     transit  from  the  local  socket  is  allowed to reach the foreign\n     socket and to be either received or flushed before the local socket\n     is  closed.   The  subprogram  will  wait until the socket has been\n     returned to the closed state.\n\n     The calling sequence is as follows:\n\n          CALL @CLOSE(cmpcd,time);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'time' is the length of time the subprogram is to wait for the\n               completion of the operation.\n\n     The following completion codes are possible for this operation:\n\n          0,  The operation was successful, and the socket has been\n              returned to the closed state\n          8,  The specified completion code variable is not currently\n              assigned to a socket;  the operation was suppressed\n         12,  The specified local socket is in the process of being\n              closed;  the operation was suppressed, but the local\n              socket will be closed\n         36,  Either hardware at the foreign site is inoperative, or the\n              NCP's counterpart at the foreign site does not exist or\n\n\n\n                                                                [Page 6]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n              has failed\n         44,  By operator command, all Network operations were\n              terminated;  the socket will be closed\n         60,  An NCP control transmission error occured;  the operation\n              was aborted\n         64,  A transmission error occured;  the operation was aborted,\n              but the socket will be closed\n        252,  The specified time limit was exceeded;  the operation was\n              initiated but not completed\n\n(3)  SEND\n\n     This operation causes data to be sent to the foreign  socket.   The\n     subprogram  will  wait  until  the  data  has  been received by the\n     foreign socket, or until it has been queued locally by the NCP.\n\n     The calling sequence is as follows:\n\n          CALL @WRITE(cmpcd, bfr,len,time[,offset]);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'bfr' is the data to be sent, and must be a singly dimensioned\n               array, either DECIMAL or BINARY, FIXED or FLOAT.\n          'len' is the number of bits of data to be sent.  If 'len' is\n               non-positive, no operation is performed.  'len' has the\n               attribute BINARY FIXED(31,0).\n          'time' is the length of time the subprogram is to wait for the\n               completion of the operation.\n          'offset' is the bit offset from the first bit of 'bfr' at\n               which data transmission is to begin, and must have the\n               attributes BINARY FIXED(31,0).  If not specified,\n               'offset' defaults to zero.\n\n     The following completion codes are possible for this operation:\n\n          0,  The operation was successful, and the data has been sent\n          4,  The specified local socket is not a SEND socket;  the\n              operation was suppressed\n          8,  The specified completion code variable is not assigned to\n              a socket;  the operation was suppressed\n         12,  A previous SEND operation is in progress;  the operation\n              was suppressed\n         16,  The connection is not fully open;  the operation was\n              suppressed\n         20,  The foreign socket terminated the connection before\n\n\n\n                                                                [Page 7]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n              completion of the SEND operation;  not all data was\n              transmitted\n         36,  Either hardware at the foreign site is inoperative, or the\n              NCP's counterpart at the foreign site does not exist or\n              has failed\n         44,  By operator command, all Network operations were\n              terminated;  the socket will be closed\n         52,  One or more interrupts were received from the foreign\n              socket;  the operation was suppressed\n         56,  An addressing exception was encountered with respect to\n              the data buffer;  the operation was suppressed\n         60,  An NCP control transmission error occured;  the operation\n              was suppressed\n         64,  A transmission error occured;  the operation was aborted,\n              and the socket will be closed\n        252,  The specified time limit was exceeded;  the operation was\n              initiated but not completed\n\n(4)  RECEIVE\n\n     This operation causes data to be received from the foreign  socket.\n     The subprogram will wait until the reception of data is complete.\n\n     The calling sequence is as follows:\n\n          CALL @READ(cmpcd,bfr,len,time[,offset]);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'bfr' is the variable into which the data is to be placed, and\n               must be a singly dimensioned array, DECIMAL or BINARY,\n               FIXED or FLOAT.\n          'len' is the number of bits of data to be received.  If 'len'\n               is non-positive, no operation is performed.  'len' has\n               the attribute BINARY FIXED(31,0).\n          'time' is the length of time the subprogram is to wait for the\n               completion of the operation.\n          'offset' is the bit offset from the first bit of 'bfr' at\n               which the first bit of data is to be placed, and must\n               have the attributes BINARY FIXED(31,0).  If not\n               specified, 'offset' defaults to zero.\n\n     The following completion codes are possible for this operation:\n\n          0,  The operation was successful and the data has been\n              received\n\n\n\n                                                                [Page 8]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n          4,  The specified local socket is not a receive socket;  the\n              operation was suppressed\n          8,  The specified completion code variable is not assigned to\n              a socket;  the operation was suppressed\n         12,  A previous RECEIVE operation is in progress;  the\n              operation was suppressed\n         16,  The connection is not fully open;  the operation was\n              suppressed\n         20,  The foreign socket terminated the connection before\n              completion of the RECEIVE operation;  data is\n              unpredictable\n         36,  Either hardware at the foreign site is inoperative, or the\n              NCP's counterpart at the foreign site does not exist or\n              has failed\n         44,  By operator command, all Network operations were\n              terminated;  the socket will be closed\n         24,  An addressing or protection exception was encountered with\n              respect to the data buffer;  the operation was suppressed\n         52,  One or more interrupts were received from the foreign\n              socket;  the operation was suppressed\n         60,  An NCP control transmission error occured;  the operation\n              was aborted, and the socket will be closed\n        252,  The specified time limit was exceeded;  the operation was\n              initiated but not completed\n\n(5)  CHECK\n\n     This operation causes the status of the specified local  socket  to\n     be  returned.  There is no completion code variable associated with\n     this operation, since it is always successful  and  the  socket  is\n     identified  by  its  socket number.  This operation is valid at any\n     time and is always completed immediately.\n\n     The calling sequence is as follows:\n\n          CALL @CHECK(lclsck,stat,mnem,fgnsck,deficit);\n\n     where\n\n          'lclsck' is the socket identifier of the local socket.\n          'stat' is a code for the status, and has the attribute BINARY\n               FIXED(31,0).\n          'mnem' is a mnemonic for the status, and has the attribute\n               CHARACTER, of any fixed length greater than or equal to\n               eight.  If 'mnem' is longer than eight bytes, it will be\n               padded to the right with blanks.\n          'fgnsck' is the socket identifier of the foreign socket, or\n               zero.\n\n\n\n                                                                [Page 9]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n          'deficit' is the send/receive deficit in bits, or zero, and\n               has the attributes BINARY FIXED(31,0).\n\n          'lclsck' is the only argument the programmer need define;\n              the others are output from the subprogram.\n\n     Following are  the  possible  status  codes,  together  with  their\n     mnemonics and interpretations.\n\n          'STAT'  'MNEM'        MEANING\n           ----    ----\n             0    OPEN       A connection is fully established.  No\n                             SEND/RECEIVE operation is in progress.\n                             'fgnsck' is the socket identifier of the\n                             connected socket.  'deficit' is the number\n                             of bits queued locally at the socket by the\n                             NCP and available to satisfy a future\n                             RECEIVE operation, or awaiting output as\n                             the result of a previous SEND operation.\n\n             1    LISTEN     A LISTEN has been issued.\n\n             2    CONNECT    A CONNECT has been issued.  'fgnsck' is the\n                             socket identifier of the foreign socket.\n\n             3    DECISION   A LISTEN has been completed.  'fgnsck' is\n                             the socket identifier of the calling\n                             socket.\n\n             4    CALL(S)    One or more calls have been received for\n                             the local socket.  No LISTEN or CONNECT has\n                             been issued.\n\n             5    I/O        A connection is fully established.  A\n                             SEND/RECEIVE operation is in progress.\n                             'fgnsck' is the socket identifier of the\n                             connected socket.  'deficit' is the number\n                             of bits yet to be sent or received.\n\n             6    CLOSED     The socket is in the closed state.\n\n             7    \u003c--DRAIN   The foreign socket is attempting to close\n                             the connection.  The NCP has data yet to be\n                             read by the local socket.  'fgnsck' is the\n                             socket identifier of the connected socket.\n                             'deficit' is the number of bits yet to be\n                             received.\n\n\n\n\n                                                               [Page 10]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n             8    DRAINED    The foreign socket is attempting to close\n                             the connection.  The NCP is awaiting\n                             arrival at the foreign site of data\n                             currently in transit.  'fgnsck' is the\n                             socket identifier of the connected socket.\n\n             9    CLOSING    The local socket has issued a CLOSE.  The\n                             NCP is in the process of returning the\n                             local socket to the closed state.  'fgnsck'\n                             is the socket identifier of the connected\n                             socket.\n\n            10    DRAIN--\u003e   The local socket has issued a CLOSE.  The\n                             NCP is completing the last SEND operation\n                             before returning the local socket to the\n                             closed state.  'fgnsck' is the socket\n                             identifier of the connected socket.\n                             'deficit' is the number of bits the NCP has\n                             yet to transmit.\n\n(6)  IDENTIFY\n\n     This operation is used to identify a local socket by its completion\n     code  variable.   The operation is valid at any time, and is always\n     completed immediately.  Since it is always successful, there are no\n     completion  codes  for  the  operation,  and  the  contents  of the\n     completion code variable are not changed.\n\n     The calling sequence is as follows:\n\n          CALL @ID(cmpcd,lclsck);\n\n     where\n\n          'cmpcd' is the completion code variable to be associated with\n               the local socket\n          'lclsck' is set to the socket identifier of the local socket\n               if the completion code variable is associated with a\n               socket, or to zero otherwise.\n\n(7)  SIGNAL\n\n     This operation is used to convey a signal to the  foreign  process.\n     The  significance  of the signal is completely user-dependent.  The\n     effect is that  the  next  time  the  foreign  socket  attempts  to\n     initiate  a  RECEIVE  or  SEND  operation,  the  operation  will be\n     suppressed, and a completion code supplied indicating that a signal\n     had  been  received.  The subprogram will wait until the signal has\n\n\n\n                                                               [Page 11]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n     been sent to the foreign NCP.  This operation is  valid  only  when\n     the socket is fully open.\n\n     The calling sequence is as follows:\n\n          CALL @ID(cmpcd,time);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'time' is the length of time the subprogram is to wait for\n               completion of the operation.\n\n     The following completion codes are possible for this operation:\n\n          0,  The operation was successful, and the signal has been sent\n          4,  The specified completion code variable is not assigned to\n              a socket;  the operation was suppressed\n          8,  The connection is not fully open; the operation was\n              suppressed\n\n   Certain of the Network subprograms are  intended  for,  although  not\n   restricted  to,  use  with the On-Line System Network operators.  The\n   following is a general description of these operators:\n\n   In all  Network  operations  involving  the  On-Line  System  Network\n   operators, there are certain conventions concerning the format of the\n   data sent and received.  The data is grouped in 'messages' consisting\n   of  three  fields,  op code, length, and text, in that order.  The op\n   code is one byte in length and is a code which indicates how the text\n   field  is to be interpreted.  The length field is two bytes long, and\n   gives the length, in bits, of the  text  field,  which  contains  the\n   actual  data.   (The  op code and length fields together are termed a\n   header.)\n\n   The following op codes are presently defined:\n\n     op code        meaning\n\n        0     The op code is a NOP.  No text field exists, and the\n              contents of the length field are unpredictable.  (This op\n              code is used mainly as a delimiter.)\n\n        1     The text field contains EBCDIC characters, one character\n              per byte.  The On-Line System Network operators consider\n              the characters as intended for display as soon as the\n              text field has been received.\n\n\n\n                                                               [Page 12]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n        2     The text contains codes for keypushes, one byte per key.\n              The On-Line operators consider the text as intended for\n              execution as soon as the text field has been received.\n\n        3     The same as for an op code of 2, except that the On-Line\n              operators consider that the execution of the keys will be\n              delayed until all data for that receive operation has\n              been received.\n\n   The standard format of data sent or received by  the  On-Line  System\n   operators is a string of messages, with the last message indicated by\n   a header with a NOP op code, called a trailer.  These conventions are\n   the  default  situation; any of them may be overridden by appropriate\n   programming.\n\n   Following are descriptions of those subprograms intended for use with\n   the On-Line System operators.\n\n(8)  WRITE TO ON-LINE CONSOLE\n\n     This subprogram causes data, assumed to be  characters  represented\n     by  their EBCDIC codes, to be sent from the specified local socket.\n     The characters are sent  in  a  standard  message,  preceded  by  a\n     header, and optionally followed by a trailer.  The subprogram waits\n     for the data to be received by the foreign socket, or to be  queued\n     locally  by  the  NCP.  This operation is valid only when the local\n     socket is a send socket, and is fully open.\n\n     The calling sequence is as follows:\n\n          CALL @WTOLC(cmpcd,bfr,len,level,across,down,time);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'bfr' is the character string to be sent, and must have the\n               attribute STRING, either CHARACTER or BIT, of any length,\n               fixed or varying.\n          'len', in absolute value, is the number of characters to be\n               sent.  If 'len' is positive or zero, the end of the data\n               is indicated by a trailer;  if 'len' is negative, no\n               trailer is sent.  'len' has the attributes BINARY\n               FIXED(31,0).\n          'level' indicates the mode of typing.  The absolute value of\n               'level', if non-zero, is the shift level on which to\n               type, and must be less than or equal to nine.  If greater\n               than nine, one is used.  If 'level' is positive, 'across'\n\n\n\n                                                               [Page 13]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n               and down are relative to the current typing location.  If\n               'level' is negative, the carriage is positioned to the\n               upper left-hand corner before typing begins, thus making\n               'across' and 'down' absolute coordinates.  If 'level' is\n               zero, the typing is in case one characters, and a\n               carriage return precedes the positioning for 'across' and\n               'down'.  If the characters to be displayed are case one\n               characters, the header sent will have an op code which\n               indicates characters to be displayed as soon as they are\n               received;  otherwise, the op code will indicate buttons\n               to be executed as soon as received.  'level' has the\n               attributes BINARY FIXED(31,0).\n          'across' is the number of spaces to be moved horizontally\n               across the display tube before beginning to type.\n               'across' can have any value, positive, negative, or zero,\n               and has the attributes BINARY FIXED(31,0).\n          'down' is the number of lines to be moved vertically down the\n               display tube before beginning to type.  'down' can have\n               any value, positive, negative, or zero, and has the\n               attributes BINARY FIXED(31,0).\n          'time' is the length of time the subprogram is to wait for the\n               completion of the operation.\n\n     The completion codes for this operation are the same as for SEND.\n\n(9)  READ FROM ON-LINE CONSOLE\n\n     This subprogram receives data, assumed to be characters represented\n     by  their  EBCDIC  codes,  from  the  foreign socket in one or more\n     standard  messages.   The  subprogram  will  wait  for  the   data,\n     optionally  followed  by  a  trailer,  to  be received by the local\n     socket.  This operation is valid only when the local  socket  is  a\n     receive socket and is fully open.\n\n     The calling sequence is as follows:\n\n          CALL @RFOLC(cmpcd,bfr,len,time);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local socket.\n          'bfr' is the variable into which the data is to be placed, and\n               has the attribute CHARACTER, of any fixed length.  If the\n               length of 'bfr' is greater than the amount of data\n               received, 'bfr' will be padded to the right with blanks.\n          'len', in absolute value, is the maximum number of characters\n               to be placed in 'bfr'.  If the length fields of the\n\n\n\n                                                               [Page 14]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n               header(s) received total more data than 'len', the excess\n               data will be received, but will not be placed into 'bfr',\n               and will not be accessible to the program.  If 'len' is\n               positive or zero, data will be received until a trailer\n               is encountered.  If 'len' is negative, a single message,\n               exclusive of trailer, will be received.  'len' has the\n               attributes BINARY FIXED(31,0).\n          'time' is the length of time the subprogram is to wait for the\n               completion of the operation.\n\n     The completion codes  for  this  operation  are  the  same  as  for\n     RECEIVE.\n\n(10)  WRITE TO ON-LINE CONSOLE WITH REPLY\n\n     This  subprogram  combines  the  functions  of  'WRITE  TO  ON-LINE\n     CONSOLE'  and  'READ  FROM  ON-LINE CONSOLE'.  The subprogram first\n     sends a string of data to the foreign  socket  from  the  specified\n     send  socket, waits for it to be received by the foreign socket (or\n     queued locally by the NCP), and then waits  for  a  reply  directed\n     toward  the  specified receive socket.  The operation is valid only\n     when the sockets have the correct gender and both are fully open.\n\n     The calling sequence is as follows:\n\n          CALL @WTOLCR(cmpcd, bfr, len, level, across, down, time,\n                       cmpcd2, bfr2, len2);\n\n     where\n\n          'cmpcd' is the completion code variable associated with the\n               local send socket.\n          'bfr' is as in 'WRITE TO ON-LINE CONSOLE'.\n          'len' is as in 'WRITE TO ON-LINE CONSOLE'.\n          'level' is as in 'WRITE TO ON-LINE CONSOLE'.\n          'across' is as in 'WRITE TO ON-LINE CONSOLE'.\n          'down' is as in 'WRITE TO ON-LINE CONSOLE'.\n          'time' is the length of time the subprogram is to wait for\n               completion, individually, of the transmission and\n               reception of data.\n          'cmpcd2' is the completion code variable associated with the\n               local receive socket.\n          'bfr2' is as 'bfr' in 'READ FROM ON-LINE CONSOLE'.\n          'len2' is as 'len' in 'READ FROM ON-LINE CONSOLE'.\n\n     The completion codes for the send socket are the same  as  for  the\n     SEND operation, and the completion codes for the receive socket are\n     the same as for the RECEIVE operation.\n\n\n\n                                                               [Page 15]\n\f\nRFC 120                 NETWORK PL1 SUBPROGRAMS\n\n\n(11)  ERASE\n\n      This subprogram causes data constituting an On-Line System command\n      to  erase  the  display  tube  to be sent from the specified local\n      socket.  The data is sent in a single standard message,  including\n      an  op  code  indicating  characters  to  be displayed as they are\n      received, and optionally  including  a  trailer.   The  subprogram\n      waits  for the data to be received by the foreign socket, or to be\n      queued locally by the NCP.  This operation is valid only when  the\n      local socket is a send socket, and is fully open.\n\n      The calling sequence is as follows:\n\n           CALL @ERASE(cmpcd,delay1,delay2,time);\n\n      where\n\n           'cmpcd' is the completion code variable associated with the\n                local socket.\n           'delay1', in absolute value, is the length of time, in tenths\n                of a second, the subprogram is to pause (in the WAIT\n                state) before sending the erase.  If 'delay1' is\n                positive or zero, a trailer will be sent after the\n                erase;  if negative, no trailer will be sent.  'delay1'\n                has the attributes BINARY FIXED(31,0).\n           'delay2', is the length of time, in tenths of a second, the\n                subprogram is to pause after sending the erase and\n                before returning control to the calling program, and has\n                the attributes BINARY FIXED(31,0).\n           'time' is the length of time the subprogram is to wait for\n                the completion of the operation.\n\n      The completion codes for this operation are the same as for SEND.\n\n\n          [ This RFC was put into machine readable form for entry ]\n           [ into the online RFC archives by Rune Skaarsmoen 6/97 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                               [Page 16]\n\f\n"
}