{
  "series": "Request for Comments",
  "number": "216",
  "howpublished": "RFC 216",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0216",
  "url": "https://www.rfc-editor.org/info/rfc216",
  "title": "Telnet Access to UCSB's On-Line System",
  "pagetotal": "16",
  "year": "1971",
  "month": "sep",
  "body": "\n\n\n\n\n\nNetwork Working Group                                           J. White\nRequest for Comments: 216                     UCSB Computer Research Lab\nCategories: D.3, G.3                                      September 1971\nNIC: 7546\n\n\n                 Telnet Access To UCSB's Online System\n\nContents\n\n   I.      Motivation .................................................1\n   II.     Limitations ................................................2\n   III.    System Documentation .......................................2\n   IV.     System Access ..............................................3\n   V.      Software Structure .........................................3\n   VI.     Virtual OLS Keyboard .......................................4\n   VII.    NETOLS Commands ...........................................10\n           A. HELP ...................................................10\n           B. PREFIX .................................................10\n           C. SHIFT and UNSHIFT ......................................10\n           D. FULLDUPLEX and HALFDUPLEX ..............................10\n           E. STATE ..................................................11\n           F. LOGOUT .................................................11\n   VIII.   OLS Display ...............................................11\n   IX.     Instructing User Telnet ...................................12\n   X.      Examples ..................................................14\n           A. Logon ..................................................14\n           B. Newton-Raphson Square Root Approximation ...............15\n           C. Remote Job Entry .......................................16\n\n   Figures\n\n   Figure 1. OLS Keyboard .............................................2\n   Figure 2. Keys With One-for-One Mappings ...........................6\n   Figure 3. Keys Represented as Strings ..............................7\n   Figure 4. Characters With One-for-One Mappings ....................12\n   Figure 5. Characters Which Map Into Strings .......................13\n\nI.  Motivation\n\n   A teletype-compatible interface to UCSB's Online System (OLS) has\n   been implemented in accordance with the Telnet protocol adopted by\n   the NWG.  This Server Telnet is responsive to connection requests\n   directed by User Telnet's to socket number 1, host address 3.\n   Although OLS is not a teletype system and although much of its power\n   as mathematical tool rests in its graphical display capabilities,\n   enough of the System survives the Telnet transformation to justify\n   such an implementation.\n\n\n\nWhite                                                           [Page 1]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nII.  Limitations\n\n   In this Telnet-style implementation of OLS, all curvilinear display\n   generated by the user on Levels II and III, Real and Complex, is\n   disregarded by the System and hence not returned to the user through\n   the Net.  The same is true of the display of special, user-created\n   characters.  Although special characters may be constructed and\n   stored, their display will be suppressed, both during the process of\n   construction and later when they are invoked from the Type level.\n   All other display generated by the System will be relayed to the user\n   intact, in some cases with stylistic transformation having first been\n   applied.  For example, Greek characters are displayed as lower-case\n   a-z.  All such transformations are described in detail in this\n   document.  Finally, those elements of the System (the operators which\n   edit user programs are prime examples) which assume a fixed-screen\n   display device function abnormally in a Telnet environment.  For such\n   a device, the System can \"remember\" the position on the screen of a\n   previously displayed segment of text and return to that position to,\n   for example, underscore it.  But when the \"screen\" marches forward --\n   relentlessly -- through a continuous medium, as it does with Telnet's\n   virtual teletype, that kind of strategy fails.  Hence, the\n   underscoring is not relocated, but rather appears on the current\n   line, beginning in the next available character frame.\n\n   OLS assumes, normally, that the user is equipped with the specially-\n   designed double keyboard depicted in Figure 1.  Conventions are\n   defined in this document, which enable a Telnet user to simulate that\n   keyboard; in particular, a means is provided for designating keys on\n   the upper, or operator keyboard.\n\nIII.  System Documentation\n\n   This document has three purposes:\n\n   Figure 1. OLS Keyboard. [Please view the PDF version of this RFC.]\n\n   (1) to describe the means by which a Telnet user simulates an OLS\n       keyboard,\n\n   (2) to describe the transformations applied to output generated by\n       the System, and\n\n   (3) to enumerate those aspects of the System, which are unique to or\n       behave differently for Network (Telnet) users.\n\n   In particular, this document is not a user's manual for OLS.  Such a\n   manual is available and on file with the NIC.  In addition, a copy\n   should exist at each Network site in its NIC collection; the user\n\n\n\nWhite                                                           [Page 2]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n   should consult his Station Agent.  This document is titled \"UCSB On-\n   Line System Manual\" [NIC 5748]; its contents are current as of 1\n   January 71.  A revision to the manual is currently in preparation and\n   will be distributed when available.  In addition, tutorial manuals\n   for two of the subsystems available under OLS-MOLSF (Mathematically-\n   Oriented Language Single-Precision Floating-Point) and COL (Card\n   Oriented Language) -- will soon be made available.  The latter has\n   already been published and is being transmitted to the NIC for\n   distribution, while the former is nearing completion.\n\n   Documentation of the third subsystem of OLS--NET-- has already been\n   distributed through the NIC as two RFC's: \"Network On-Line Operators\"\n   [21 April 71, RFC 121, NIC 5833] and \"A User Telnet--Description of\n   an Initial Implementation\" [9 August 71, RFC 206, NIC 7176].  Net\n   currently houses a set of operators for system-call-level interaction\n   with UCSB's NCP, a User Telnet, and an operator (invoked by ID on\n   Level II), which returns the status of Network hosts.\n\n   Staff members at the Computer Center will be happy to field questions\n   about OLS from Network users.  In particular, an OLS consultant is\n   available for such purposes at (805) 961-4044.  Questions about OLS,\n   including those specific to use of the System through the Network,\n   may also be addressed to Jim White, UCSB's Technical Liaison, at\n   (805) 961-3454 (if necessary, messages can be left at the Computer\n   Center Office, (805) 961- 2261).\n\nIV.  System Access\n\n   The Network user is encouraged to explore the System and is invited\n   to do so with the following accounting parameters:\n\n   User Number: 196\n   Id Number: 57372\n   User Name: ARPA\n   Problem Name: (affiliation)-(name)\n                   in 16 characters or less\n                   (e.g., UCSB-White)\n\n   Such use of the System will not be billed.  Production users are\n   asked to establish their own accounts with the Computer Center ((805)\n   961-2261), the use of which will be billed in accordance with the\n   then-current rate structure.\n\nV.  Software Structure\n\n   This document is the description of a Network front-end to the Online\n   System, logically distinct from OLS itself.  This front-end is\n   hereafter referred to as NETOLS.  NETOLS is always responsive to\n\n\n\nWhite                                                           [Page 3]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n   connection requests direct4ed to socket 1.  When contacted by a\n   Network user, NTCLS performs the Network functions required to\n   establish a duplex connection to him.  The number of such duplex\n   connections (and hence the number of Network users) is bounded by an\n   assembly parameter whose current value is five.\n\n   Before the Network connection is established, NETOLS secures for the\n   user a port into OLS.  Sixty-four such ports exist and are shared by\n   local, dial-up, and Network users.  Should none be available, NETOLS\n   will abort the connection sequence.\n\n   Once a port has been secured and a Network connection established,\n   NETOLS will effectively push the _SYST_ key for the user by\n   transmitting to OLS the 8-bit code representing that key.  A login\n   sequence is thus initiated and the user is transmitted the lines:\n\n      UCSB ON-LINE SYSTEM\n      ENTER USER NUBMER\n\n   to which he should respond with his user number.  Beginning at this\n   point in time and continuing for the life of the Network connection,\n   NETOLS's sole function is that of interpreter--interpreting input\n   from the user and making it meaningful to the user (it is at this\n   point, for example, that curvilinear and special-character display\n   are discarded).\n\n   When the user breaks his Network connection to NETOLS, if eh hasn't\n   logged out of OLS already, NETOLS performs that function for him by\n   pushing_ SYST_ _DOWN_, just as it pushed the initial _SYST_.  The OLS\n   port acquired for the user is then released, and hence available for\n   use by other users.  It should be noted that the user can log out of\n   OLS and back on again without the Network connection's being broken,\n   since that action is transparent to NETOLS, who attaches no special\n   significance to the Key sequence, which accomplishes it.\n\nVI.  Virtual OLS Keyboard\n\n   A major function of NETOLS is to provide a mapping between elements\n   of the Telnet character set and the keys on an OLS keyboard (Figure\n   1).  The lower, or operand portion of that keyboard is fairly easily\n   represented, since it's similar to a standard typewriter keyboard.\n   Most of the keys on the lower keyboard are mapped on a one-for-one\n   basis from elements of the Telnet character set.  Upper-case\n   alphabetics are mapped into the alphabetics, lower-case, and\n   miscellany of punctuation into itself.  All such one-for-one mappings\n   are depicted in Figure 2.  A line of that figure reads as follows:\n\n      For ['half arrow' - see the PDF version of this RFC]:\n\n\n\nWhite                                                           [Page 4]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n      The key labeled ['half arrow'] (meaning logical not) on the lower\n      portion of an OLS keyboard is struck by causing the user's User\n      Telnet to transmit '~' (tilde).\n\n   Those lower-keyboard keys not listed in Figure 2, and _all_ the keys\n   on the upper- keyboard (hereafter referred to collectively as _non-\n   standard_ keys), are represented by the Telnet user in the following\n   manner.  For each such key, a character string has been defined; the\n   string is called the _name_ of the key.  In most cases, the name of a\n   key is identical to its label in Figure 1.  The name of the _SIN_\n   key, for example, is 'SIN (in the Online System User's Manual,\n   upper-keyboard keys are denoted by underscoring their labels, to\n   distinguish, for example, the key _SIN_ from the three keys 'SIN').\n\n      Every non-standard key on the OLS keyboard is struck by typing its\n      name (or any unique abbreviation thereof), preceded by a special\n      _prefix_ character and followed by a space.\n\n   NETOLS interprets the prefix, name, and space from them generates a\n   single, 8-bit code, which forwards to OLS.\n\n   The default prefix character is semi-colon (';'), chosen simply\n   because for touch typists it's one of the home keys.  The prefix can\n   be changed by the user to any character listed in Figure 2.  The\n   procedure for so doing is described in Section VII-B. To send the\n   prefix character through NETOLS to OLS, type it twice in succession.\n   Thus, if the default prefix is in effect, ';;' is mapped into a\n   single semi-colon and relayed to OLS.\n\n   The names of all non-standard keys are listed in Figure 3.  A line of\n   that figure reads as follows:\n\n      For _SIN_:\n\n      They key denoted _SIN_ in the OLS User's Manual (the trigonometric\n      function sine) is named 'SIN', and hence is struck by typing\n      'SIN', preceded by the prefix and followed by a space.\n\n   Assuming, then, that the default prefix ';' is in effect, SIN is\n   struck by ';SIN_' ('_' is used here and in following examples to\n   denote a space).  Furthermore, if the user chooses, he may abbreviate\n   that as ';SI_', since the key desired remains uniquely identified.\n   Further abbreviation (to ';S_') is unsatisfactory and hence\n   disallowed since the single character 'S' is insufficient to\n   distinguish between a number of keys whose names begin with that\n   character.  Key names may be typed by the user in either upper- or\n   lower-case.\n\n\n\n\nWhite                                                           [Page 5]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n   As each character of a non-standard key's name is typed by the user,\n   NETOLS consults it table of key names.  If the character string so\n   far specified cannot possibly lead to a valid name, the most recent\n   character is ignored ('?' echoed).  Hence, typing ';SJIN_' will be\n   accepted as _SIN_, the erroneous 'J' being ignored (and a question\n   mark echoed), and the subsequent 'JN_' accepted.  If when the\n   terminating space is typed, no single key is uniquely identified a\n   '?'  is echoed and the space ignored.  Thus, ';S_I_' will be\n   recognized as _SIN_; the first space is\n\nTo Push         (OLS Explanation)        Send      (Telnet Explanation)\n\n0-9             Decimal Digits           0-9         Decimal Digits\nA-Z             Alphabetics              A-Z         UC Alphabetics\n_-5             Greek Characters         a-z         LS Alphabetics\n!               Exclamation Mark          !          Exclamation Mark\n+               Plus Sign                 +          Plus Sign\n_               Underscore                _          Underscore\n-               Minus Sign                -          Minus Sign\n@               Commercial At             @          Commercial At\n/               Slash                     /          Slant\n#               Number Sign               #          Number Sign\n'               Apostrophe                '          Apostrophe\n\u0026               Ampersand                 \u0026          Ampersand\n$               Dollar Sign               $          Dollar Sign\n*               Asterisk                  *          Asterisk\n%               Percent                   %          Percent\n=               Equal Sign                =          Equal Sign\nTAB             Horizontal Tab           HT          Horiz. Tab. (_[)\n:               Colon                     :          Colon\n;               Semi-Colon                ;          Semi-Colon\n[               Left Bracket              [          Left Bracket\n]               Right Bracket             ]          Right Bracket\n(               Left Parenthesis          (          Left Parenthesis\n)               Right Parenthesis         )          Right Parenthesis\n\u003c               Less Than                 \u003c          Less Than\n\u003e               Greater Than              \u003e          Greater Than\n,               Comma                     ,          Comma\n\"               Quotation Marks           \"          Quotation Marks\n?               Question Mark             ?          Question Mark\n[half arrow]    Logical Not               ~          Tilde\n|               Logical Or                |          Vertical Line\nBACK            Backspace              BS, DEt       Backspace/Rubout\nRETURN          Carriage Return           CR         Carr. Return (_M)\nSPACE           Space                     SP         Space\n\n                Figure 2. Keys With One-for-One Mappings\n\n\n\n\nWhite                                                           [Page 6]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nTo Push          (OLS Explanation)          The Key Name Is\n\n[circle .]           Multiply                       *          1\n[circle +]           Add                            +\n[circle -]           Subtract                       -\nRETURN               Carriage Return                .\n[circle /]           Divide                         /\nL0                   Level 0                        0\nLI                   Level I                        1\nL II                 Level II                       2\nL III                Level III                      3\nL IV                 Level IV                       4\nL V                  Level V                        5\nL VI                 Level VI                       6\nL VII                Level VII                      7\n[circle +]           Add                            ADD        2\nARC                  Argument                       ARG\nATAN                 Arc Tangent                    ATAN\nBACK                 Backspace                      BACK       3\nCASE                 Case                           CASE\n[cent sign]          Cent                           SignCENT\nCLR                  Clear Tab                      CLEAR\nCMPLX                Complex                        CMPLX\nCON                  Contract                       CON\nCONJ                 Conjugate                      CONJ\nCONV                 Convolve                       CONV\nCOS                  Cosine                         COS\nCTX                  Context                        CTX\nDEL                  Delta                          DEL\nDIFF                 Forward Difference             DIFF\nDISPLAY              Display                        DISPLAY\n[circle /]           Divide                         DIV        4\nDWN                  Down                           DOWN\nENL                  Enlarge                        ENL\nENTER                Enter                          ENTER\nERASE                Erase                          ERASE\nESCAPE               Escape                         ESCAPE\nEVAL                 Evaluate                       EVAL\nEXP                  Exponentiate                   EXP\n                     NETOLS Command                 FULLDUPLEX 5\n                     NETOLS Command                 HALFDUPLEX\n                     NETOLS Command                 HELP\nID                   Identity                       ID\nINV                  Invert                         INV\n[down arrow]         Line Feed Down                 LFDN\n[up arrow]           Line Feed Up                   LFUP\n\n                 Figure 3. Keys Represented As Strings\n\n\n\nWhite                                                           [Page 7]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nTo Push           (OLS Explanation)        The Key Name Is\n\nLIST                 List                         LIST\nLOAD                 Load                         LOAD\nLOG                  Logarithm                    LOG\n                     NETOLS Command               LOGOUT\nLS                   Left Shift                   LS\nMAX                  Maximum                      MAX\nMOD                  Modulus                      MOD\n[circle .]           Multiply                     MULT         6\nNEG                  Negate                       NEG\n[half arrow]         Logical Not                  NOT          7\n|                    Logical Or                   OR           8\nPRED                 Predicate                    PRED\n                     NETOLS Command               PREFIX\nPROD                 Running Product              PROD\nPT                   Point                        PT\nPWR                  Power                        PWR\nREAL                 Real                         REAL\nREFL                 Reflect                      REFL\nREPT                 Repeat                       REPT\nRESET                Reset                        RESET\nRETURN               Carriage Return              RETURN       9\nRS                   Right Shift                  RS\n0-9                  Superscript 0-9              S0-S9\nSEL                  Select                       SELECT\nSET                  Set Tab                      SET\n                     NETOLS Command               SHIFT\nSIN                  Sine                         SIN\nSORT                 Sort                         SORT\nSQ                   Square                       SQ\nSQRT                 Square Root                  SQRT\n                     NETOLS Command               STATE\nSTORE                Store                        STORE\nSUB                  Substitute                   SUB\n[circle -]           Subtract                     SUBTRACT     10\nSUM                  Running Sum                  SUM\nSYST                 System                       SYST\nTEST                 Test                         TEST\nTYPE                 Type                         TYPE\n                     NETOLS Command               UNSHIFT\nUP                   Up                           UP\nUSER                 User                         USER\n\n             Figure 3 (cont'd) Keys Represented As Strings\n\n\n\n\n\n\nWhite                                                           [Page 8]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n   1. Alternate names for [circle .], [circle +], [circle -], RETURN,\n      and [circle /] are 'MULT', 'ADD', 'SUBTRACT', 'RETURN', and 'DIV',\n      respectively. RETURN can also be represented as the single\n      character CR (carriage return), as indicated in Figure 2.\n\n   2. An alternate name for [circle +] is '+'\n\n   3. Alternates for BACK are the single characters BS (backspace) and\n      DEL (rubout), as indicated in Figure 2.\n\n   4. An alternate name for [circle /] is 'DIV'.\n\n   5. NETOLS commands are explained in Section VII.\n\n   6. An alternate name for [circle .] is 'MULT'.\n\n   7. An alternate for '[half arrow]' is the single character '~'\n      (tilde), as indicated in Figure 2.\n\n   8. An alternate for '|' is the single character '[2 vertical lines]'\n      (vertical line), as indicated in Figure 2.\n\n   9. An alternate name for RETURN is '.' RETURN can also be represented\n      as the single character CR (carriage return), as indicated in\n      Figure 2.\n\n  10. An alternate name for [circle -] is '-'.\n\n   Notes for Figure 3.\n\n   Ignored (and a '?' echoed, indicating that 'S' alone is ambiguous).\n\n   At any point in the entry of a key name, either Altmode (ESC) or '?'\n   may be typed by the user.  NETOLS will then determine whether a key\n   has been uniquely specified by the characters already typed.  If so,\n   it will echo the remaining characters of the key's name, and consider\n   them entered by the user.  A subsequent space from the user will\n   cause the indicated key to be pushed.  If no single key is uniquely\n   specified, NETOLS will echo Bel, causing a bell to be run on many\n   terminals.  More of the key name is then expected from the user.\n\n   If after at least one character of the key name has been entered by\n   the user and accepted by NETOLS (and before the terminating space is\n   typed) the prefix is typed a second time, all already entered\n   characters of the name are discarded by NETOLS.  Thus ';CO;SIN_' is\n   interpreted as _SIN_.  If a carriage return is typed in the same\n\n\n\n\n\nWhite                                                           [Page 9]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\n   context, the initial prefix will also be discarded.  Hence, ';CO%S'\n   ('%' denotes carriage return) is interpreted as the lower-keyboard\n   key 'S'.\n\nVII.  NETOLS Commands\n\n   A number of commands to LETOLS are defined and all are described in\n   this section.  The format for each such command is the same as that\n   for the non-standard keys, and hence the command keywords are\n   included in Figure 3.  All of the conventions of Section VI apply as\n   well to the entry of commands.  The user should understand, however,\n   that such commands are processed by NETOLS, not OLS, and that they\n   are defined only for Network users of OLS.\n\nA.  HELP\n\n   The HELP command (invoked with ';HELP_' if';' is the prefix)\n   reproduces for the user the third column of Figure 3; the names of\n   all non-standard keys and the keywords for all defined NEOLS commands\n   are listed in their collating sequence on the user's virtual\n   teletype.\n\nB.  PREFIX\n\n   Issuing the PREFIX command causes the next character typed to become\n   the prefix, provided it is one of those listed in Figure 2.\n   Consequently, ';PREFIX_@' makes '@' the prefix, '@PREFIX_;' restores\n   the defaults situation.\n\nC.  SHIFT and UNSHIFT\n\n   The SHIFT command causes a perturbation of lines 2 and 3 of Figure 2.\n   After SHIFT is issued, all subsequent upper-case alphabetics are\n   mapped into the Greek characters (rather than into the alphabetics),\n   and lower-case alphabetics into alphabetics (rather than into the\n   Greek characters).  This convention change may be found convenient if\n   the user's User Telnet sends lower-case alphabetics by default, and\n   requires, for example, that a shift key be held down to send upper-\n   case characters.\n\n   The UNSHIFT command nullifies the effect of SHIFT.\n\nD.  FULLDUPLEX and HALFDUPLEX\n\n   Issuing the FULLDUPLEX command causes all subsequent characters typed\n   by the user to be echoed by _NETOLS_.  HALFDUPLEX nullifies the\n   effect of FULLDUPLEX, disabling echo by NETOLS.  Half-duplex is the\n   default situation.\n\n\n\nWhite                                                          [Page 10]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nE.  STATE\n\n   The STATE command causes the current prefix, the mode of operation\n   ('HALFDUPLX' or 'FULLDUPLEX'), and the case convention ('SHIFT IS ON'\n   or 'SHIFT IS OFF') to be displayed on the user's virtual teletype in\n   the following form:\n\n      PREFIX IS;\n      HALFDUPLEX\n      SHIFT IS OFF\n\nF.  LOGOUT\n\n   Issuing the LOGOUT command causes the user to be logged out of OLS\n   (i.e., _SYST_ _DOWN_ to be pushed) and his Network connection to\n   NETOLS to be broken.  About three seconds elapse between the two\n   events.\n\nVIII.  OLS Display\n\n   NETOLS suppresses all but alphameric display before it reaches the\n   user.  Alphameric display is mapped into the Telnet character set\n   according to Figures 4 and 5.  Figure 4 lists all those OLS display\n   character, which have one-for-one mappings.  A line of that figure\n   reads as follows:\n\n      For '[half harrow]'\n\n      The character logical not, displayed as '[half arrow]' on an OLS\n      terminal, is represented in Telnet as '~' (tilde).\n\n   Alphabetics are mapped into upper-case alphabetics and Greek\n   characters into lower-case alphabetics.  Numerics are mapped into\n   numerics, and a miscellany of punctuation into itself.  In addition a\n   number of carriage control characters are appropriately mapped-- line\n   feed down into LF, TAB into HT, BACK into BS, etc.; line feed up is\n   suppressed.  ERASE is represented as Bel.\n\n   Figure 5 lists those OLS display characters which are mapped into\n   strings of Telnet characters.  In most cases, these character strings\n   are stylistic representations of characters peculiar to OLS.  For\n   example, the _ADD_ key is normally displayed in List mode as '[circle\n   +]'.  In this Telnet implementation, '(+)' is an attempt to represent\n   that graphic.  Superscripts are represented as underscored numerics.\n   Carriage return is represented as CR LF.  No attempt is made to\n   effectively represent RS which, on an OLS display device, repositions\n   the beam to the upper left corner of the screen; it is made\n   equivalent to carriage return.\n\n\n\nWhite                                                          [Page 11]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nIX.  Instructing a User Telnet\n\n   For local users, all echoing _that's done at all_\n\nTo Display       (OLS Explanation)  OLS Sends  (Telnet Explanation)\n0-9                Decimal Digits     0-9        Decimal Digits\n_-Z                Alphabetics        A-ZUC      Alphabetics\n_-5                Greek Characters   a-z        LC Alphabetics\n!                  Exclamation Mark   !          Exclamation Mark\n+                  Plus Sign          +          Plus Sign\n_                  Underscore         _          Underscore\n-                  Minus Sign         -          Minus Sign\n@                  Commercial At      @          Commercial At\n/                  Slash              /          Slant\n#                  Number Sign        #          Number Sign\n'                  Apostrophe         '          Apostrophe\n\u0026                  Ampersand          \u0026          Ampersand\n$                  Dollar Sign        $          Dollar Sign\n*                  Asterisk           *          Asterisk\n%                  Percent            %          Percent\n=                  Equal Sign         =          Equal Sign\nTAB                Horizontal Tab.    HT.        Horiz. Tab (_I)\n:                  Colon              :          Colon\n;                  Semi-Colon         ;          Semi-Colon\n[                  Left Bracket       [          Left Bracket\n]                  Right Bracket      ]          Right Bracket\n(                  Left Parenthesis   (          Left Parenthesis\n)                  Right Parenthesis  )          Right Parenthesis\n\u003c                  Less Than          \u003c          Less Than\n\u003e                  Greater Than       \u003e          Greater Than\n,                  Comma              ,          Comma\n\"                  Quotation Marks    \"          Quotation Marks\n?                  Question Mark      ?          Question Mark\n[half arrow]       Logical Not        ~          Tilde\n|                  Logical Or         |\n                                      |          Vertical Line\nBACK               Backspace          BS         Backspace\nSPACE              Space              SP         Space\nENL/[up arrow]     Line Feed Up\nCON/[down arrow]   Line Feed Down     LF         Line Feed ([up arrow]J)\n_                  List Mode Space    _          Underscore\n[shaded rectangle] List Mode Rubout   X          Upper-case X\n_                  List Mode Pointer  _          Underscore\nBREAK              Break              SP         Space\nERASE              Erase              BEL        Bell (_G)\n\n             Figure 4. Characters With One-for-One Mappings\n\n\n\n\nWhite                                                          [Page 12]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nTo Display          (OLS Explanation)              OLS Sends\n\n:                     Post List                  (:)\n[circle +]            List Mode Add              (+)\n[circle -]            List Mode Subtract         (-)\n[circle .]            List Mode Multiply         (*)\n[circle /]            List Mode Divide           (/)\n[arrow]               List Carriage Return       ([2 vertical lines])\nRETURN                Carriage Return            CR LF\nRS                    Reset to Upper Left        CR LF\n[cent sign]           Cent Sign                  C BS [2 vertical lines]\n0-9                   Superscript 0-9            0 BS _\n                                                  -\n                                                 9 BS _\n\n              Figure 5. Characters Which Map Into Strings\n\n   is done by OLS; the terminal never echoes.  In general, OLS does not\n   echo the user's input.  There are exceptions to this rule, but they\n   are relatively few in number and occur primarily on the SYST level.\n   In particular, upper keyboard keys are never echoed except in List\n   mode.  The Network user is advised to instruct his telnet to operate\n   in full-duplex mode, i.e., to echo nothing.  The FULLDUPLEX command\n   provided by NETOLS is provided because it can be provided, but its\n   use is not recommended.\n\n   OLS is meant to be used in character-at-a-time mode, and the user\n   should so instruct his User Telnet.  For those users provided with\n   only a line-at-a-time mode, the end-of-line character should not be\n   transmitted to NETOLS.\n\n   NETOLS flushes without comment all Telnet control characters it\n   detects in the input stream.  Characters in the Telnet character set\n   which have no meaning to NETOLS are echoed as '?' and discarded.\n   Exceptions are LF (line feed) and NUL, which are flushed without\n   comment.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhite                                                          [Page 13]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nX.  Examples\n\nA.  LOGON\n\n   The dialogue which logs a user onto OLS, assuming the user number of\n   Section IV, is as followings:\n\n   TELNET ENTRY            OLS QUERY/RESPONSE\n\n                                   UCSB ONLINE SYSTEM\n                                   ENTER USER NUBMER (196)\n   196%                            ID NUMBER=\n   57372%                  USER NAME= (ARPA)\n   ARPA%                   JOB NAME= (UCSB-WHITE)\n   UCSB-WHITE%             AUTOSAVE CODE = integer\n   MOLSF %                 LOAD (MOLSF)\n                                   FILE LOADED\n\n   In this and succeeding examples, '%' denotes CR (carriage return).\n   Entries echoed by OLS are enclosed in parentheses above.  The user\n   should substitute for 'UCSB-WHITE' his own affiliation and name.  The\n   procedure above loads the math subsystem of OLS.  To load instead\n   either COL or NET, substitute its name for 'MOLSF'.  To load a\n   different subsystem (say COL) after logging in:\n\n   TELNET ENTRY                    OLS QUERY/RESPONSE\n   ;SYST_                          WORK AREAS UPDATED\n   ;LOAD _COL%                     LOAD (COL)\n                                           FILE LOADED\n\n   Again, '_' denotes a space, not an underscore.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhite                                                          [Page 14]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nB.  NEWTOWN-RAPHSON SQUARE ROOT APPROXIMATION\n\n   A simple user program can be constructed to approximate the square\n   root of a number N using the Newton-Rapshon iteration procedure,\n   which derives the (k+1)th approximation from the kth by the following\n   algorithm:\n\n      X k+1= (xk+n/kk)/2\n\n   The following entries construct the user program:\n\n   ;LIST_)TYPE_%ENTER_N\n   ;1_;REAL_;LOAD_;ENTER_;STORE_N\n   ;TYPE_% ENTER_FIRST_GUESS\n   ;1_;LOAD_;ENTER_;STORE_X\n   ;TYPE_%#_OF_INTERATIONS?\n   ;0_;LOAD_;ENTER_;STORE_N\n   ;1_;REPT_(;LOAD_N ;/_X;+_X ;/_2\n           ;STORE_X ; DISP_%/_X ;+_X ;/_2\n   ;LIST_;STORE_;USER_;1_;SQRT_\n\n   To display the user program, enter:\n\n   ;USER_;DISP_;SQRT_\n\n   When executed, the program obtains from the user the number N whose\n   square root is sought, an initial guess, and the number of iterations\n   to be performed.  The program then computes and displays the results\n   of each iteration, and then calls itself, permitting a second square\n   root to be computed.  The program is executed as follows:\n\n   TELNET ENTRY                    OLS QUERY/RESPONSE\n\n   ;USER_;1_;SQRT_                 ENTER N\n   3 ;ENTER_                               ENTER FIRST GUESS\n   1 ;ENTER_                               #OF ITERATIONS?\n   4 ;ENTER_                               2.       +00\n                                           1.75     +00\n                                           1.73214+00\n                                           1.73205+00\n\n                                           ENTER N\n                   etc.\n\n\n\n\n\n\n\n\nWhite                                                          [Page 15]\n\f\nRFC 216          Telnet Access To UCSB's On-Line System   September 1971\n\n\nC.  Remote Job Entry\n\n   A file of card images can be constructed with the help of the COL\n   subsystem of OLS ard submitted as a batch job.  Assuming COL has been\n   loaded, the following entries construct a card file which invokes the\n   Fortran compiler:\n\n   ;2_//jobname_JOB_(acct#,name , , , , , ,T) ; STORE_\n   //_EXEC_FORTGCLG ; STORE_\n   //FORT.SYSIN_DD_* ; STORE_\n   source-statement-1 ;STORE_\n\n                   ...\n   source-statement-N ; STORE_\n   /* ; STORE_\n\n   To display the completed file, type:\n\n           ;3_;DISP_%\n\n   To submit the file, type:\n\n           ;4_;SUB_%\n\n   To watch for it in execution, type:\n\n           ;DISP_J%%%...\n\n   When execution is complete, 'printed' output can be retrieved with\n   the following dialogue:\n\n   TELNET ENTRY                    OLS QUERY/RESPONSE\n\n   ;CMPLX_;LOAD_                   UNIT = (2314)\n   2314%                                   VOL=SER= (MVT180)\n   MVT180%                         DSNAME= (RJEOUT)\n   RJEOUT%                         MEMBER= (jobname)\n   Jogname%                                NOW LOADING\n                                           FILE LOADED\n\n   The output can then be examined by entering:\n\n      ;2_;DISP_1%%%...\n\n\n   NOTE: Text within brackets describes non-ASCII characters that were\n   part of the original document.  Please see the PDF file for the\n   original representation.\n\n\n\nWhite                                                          [Page 16]\n\f\n"
}