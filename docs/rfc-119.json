{
  "series": "Request for Comments",
  "number": "119",
  "howpublished": "RFC 119",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0119",
  "url": "https://www.rfc-editor.org/info/rfc119",
  "title": "Network Fortran Subprograms",
  "pagetotal": "19",
  "year": "1971",
  "month": "apr",
  "day": "1",
  "body": "\n\n\n\n\n\nNetwork Working Group                                     M. Krilanovich\nRequest for Comments: 119                                           UCSB\nNIC: 5831                                                 April 21, 1971\n\n\n                      NETWORK FORTRAN SUBPROGRAMS\n\nPreface\n\n   The subroutines described in this document have been implemented at\n   UCSB and make the Network (via the NCP) accessible to Fortran\n   programs executing in the 360/75.  They are callable from within any\n   Fortran main program or subroutine compiled at UCSB.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                     [Page 1]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n   A set of assembly-language written subprograms is provided to\n   facilitate the sue of the Network by FORTRAN programmers.  They serve\n   as an interface between the user and the Network Control Program\n   (NCP), which supervises all Network operations at this site.\n\n   A concept fundamental to FORTRAN Network operations is that of a\n   completion code variable.  Associated with each socket that is not in\n   the closed state is a unique variable, called a completion code\n   variable.  This variable serves two purposes: it identifies the local\n   socket referenced, and upon completion of the operation it contains a\n   completion code to indicate the outcome of the operation to the\n   programmer.  It may be used at any time for any purpose other than\n   network operations.  Its value at the beginning of a Network\n   operation is immaterial; rather it is the variable itself that is\n   important.  In all Network operations, whenever a completion code\n   variable is called for, the only acceptable type variable is\n   INTERGER*4.\n\n   In general, the subprograms will initiate the operation, and enter\n   the WAIT state (consume no CPU time) until notified by the NCP of the\n   completion of the operation.  For such operations, the programmer\n   supplies a time limit, of type INTERGER*4, which specifies, in tenths\n   of a second, the maximum length of time the subprogram is to wait for\n   the operation to complete.  If this time limit is exceeded, a\n   completion code is supplied to indicate the error; and control is\n   returned to the calling program, with the operation still pending.\n\n   In those operations requiring a socket to be specified by its socket\n   identifier, the following format is used.  The identifier is\n   specified as a INTEGER*4 array with at least two elements, or an\n   element of such an array.  The first element specified is taken to be\n   the site number, and the next element the socket number.  A socket\n   number may have any value, positive, negative, or zero.  Since\n   negative numbers are represented internally in two's complement form,\n   for the purposes of the gender of a socket, a socket number is even\n   for odd according to whether its absolute value is even or odd,\n   respectively.\n\n   Following is a description of each subprogram, its function and\n   calling sequence.\n\n   (1) OPEN\n\n       By invoking this subprogram, the user requests that the specified\n       local socket be removed from the closed state and thus be\n       prepared to participate in data transfer.  There are three\n       distinct operations that can be performed by this subprogram, and\n       these are described below:\n\n\n\nKrilanovich                                                     [Page 2]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n       (A) CONNECT\n\n           By initiating this operation, the user requests that the\n           specified local socket be logically connected to the\n           specified foreign socket, and that data transfer between the\n           two sockets be enabled.  The subprogram will wait until the\n           foreign socket either accepts or rejects the connection\n           attempt.  This operation is valid only when the local socket\n           is in the closed state.\n\n              The calling sequence is as follows:\n\n                 CALL OPEN (cmpcd, time, lclsck, fgnsck, ws)\n\n           where\n                'cmpcd' is the completion code variable to be associated\n                     with the local socket.\n\n                'time' is the length of time the subprogram is to wait\n                     for the completion of the operation.\n\n                'lclsck' is the socket identifier of the local socket.\n\n                'fgnsck' is the socket identifier of the foreign socket.\n\n                'ws' is a workspace, which as the same attributes as a\n                     socket identifier, and, if the operation is\n                     successful, will become associated with the local\n                     socket for the life of the connection.  In response\n                     to certain future operations, information may be\n                     returned to the programmer in this workspace.\n\n                The following completion codes are possible for this\n                operation:\n\n                     0, The operation was successful and the connection\n                        has been established\n\n                     4, The specified completion code variable is\n                        already assigned to a socket; the operation was\n                        suppressed\n\n                     8, The specified local socket is not in the closed\n                        state; the operation was suppressed\n\n                    12, All communication paths to the specified foreign\n                        site are in use; the operation was suppressed\n\n\n\n\nKrilanovich                                                     [Page 3]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n                    16, Local resources are insufficient to support\n                        another connection; the operation was suppressed\n\n                    20, The connection attempt was rejected by the\n                        foreign process\n\n                    24, The specified local socket is not local to UCSB;\n                        the operation was suppressed\n\n                    28, The specified foreign site is invalid; the\n                        operation was suppressed\n\n                    32, An addressing or protection exception was\n                        encountered with respect to the specified\n                        workspace; the operation was suppressed\n\n                    36, Either hardware at the foreign site is\n                        inoperative or the NCP's counterpart at the\n                        foreign site does not exist or has failed\n\n                    40, Local and foreign sockets are both either send\n                        or receive sockets; the operation was suppressed\n\n                    44, By operator command, all Network operations were\n                        terminated; the socket will be closed\n\n                    60, An NCP control transmission error occurred; the\n                        operation was suppressed\n\n                   252, The specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n       (B) LISTEN\n\n           This operation is a request for notification of any\n           connection attempt directed toward the specified local\n           socket.  The subprogram waits until such a call is received,\n           at which time the calling processes' socket identifier is\n           returned to the calling program.  This operation is valid\n           only when the designated local socket is in the closed state.\n\n              The calling sequence is as follows:\n\n                 CALL OPEN (cmpcd, time, lclsck, ws)\n\n           Where\n                'cmpcd' is the completion code variable to be associated\n                     with the local socket.\n\n\n\nKrilanovich                                                     [Page 4]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n                'time' is the length of time the subprogram is to wait\n                     for the completion of the operation.\n\n                'lclsck' is the socket identifier of the local socket.\n\n                'ws' is a workspace which, if the operation is\n                     successful, will contain the socket identifier of\n                     the calling socket, and will become associated with\n                     the local socket for the life of the connection.\n                     'ws' has the same attributes as a socket\n                     identifier.\n\n                The following completion codes are possible for this\n                operation:\n\n                     0, The operation was successful and a call has been\n                        received\n\n                     4, The specified completion code variable is\n                        already assigned to a socket; the operation was\n                        suppressed\n\n                     8, The specified local socket is not in the closed\n                        state; the operation was suppressed\n\n                    12, Local resources are insufficient to support\n                        another connection; the operation was suppressed\n\n                    16, The specified local socket is not local to UCSB;\n                        the operation was suppressed\n\n                    20, An addressing or protection exception was\n                        encountered with respect to the specified\n                        workspace; the operation was suppressed\n\n                    44, By operator command, all Network operations were\n                        terminated; the socket will be closed\n\n                   252, The specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n       (C) ACCEPT\n\n           This operation accepts connection with the foreign socket\n           whose call caused successful completion of a previous LISTEN\n           operation by the specified local socket.  After completion of\n           this operation, data may be transferred to or from the local\n           socket, depending on its gender.  This operation is valid\n\n\n\nKrilanovich                                                     [Page 5]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n           only when the last operation referencing the local socket was\n           a LISTEN operation.  The subprogram will wait until the\n           operation is completed.\n\n              The calling sequence is as follows:\n\n                 CALL OPEN (cmpcd, time)\n\n           Where\n                'cmpcd' is the completion code variable associated with\n                the local socket by a previous LISTEN operation.\n\n                'time' is the length of time the subprogram is to wait\n                for the completion of the operation\n\n             The following completion codes are possible for this\n             operation:\n\n                     0, The operation was successful, and the connection\n                        is established\n\n                     4, The specified local socket is in the closed\n                        state 9The NCP may have received an abort\n                        notification from the foreign process); the\n                        operation was suppressed\n\n                     8, the previous operation specifying the designated\n                        local socket was not a LISTEN; the operation was\n                        suppressed\n\n                    12, All communication paths to the specified foreign\n                        site are in use; the socket has been returned to\n                        the closed state\n\n                   252, the specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n   (2) CLOSE\n\n       This operation is a request that the specified local socket be\n       returned to the closed state.  If the last operation involving\n       this socket was a LISTEN, this operation refuses the foreign\n       process' connection attempt.  If the last operation was CONNECT,\n       the attempt is aborted.  If a connection is established, any data\n       in transit from the local socket is allowed to reach the foreign\n       socket to be either received or flushed before the local socket\n       is closed.  The subprogram will wait until the socket has been\n       returned to the closed state.\n\n\n\nKrilanovich                                                     [Page 6]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n          The calling sequence is as follows:\n\n             CALL CLOSE (cmpcd, time)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'time' is the length of time the subprogram is to wait\n                     for the completion of the operation.\n\n         The following completion codes are possible for this operation:\n\n                     0, the operation was successful, and the socket has\n                        been returned to the closed state\n\n                     8, The specified completion code variable is not\n                        currently assigned to a socket; the operation\n                        was suppressed\n\n                    12, The specified local socket is in the process of\n                        being closed; the operation was suppressed, but\n                        the local socket will be closed\n\n                    36, Either hardware at the foreign site is\n                        inoperative, or the NCP's counterpart at the\n                        foreign site does not exist or has failed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                     [Page 7]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n                    44, By operator command, all Network operations were\n                        terminated; the socket will be closed\n\n                    60, An NCP control transmission error occurred; the\n                        operation was aborted\n\n                    64, A transmission error occurred; the operation was\n                        aborted, but the socket will be closed\n\n                   252, The specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n   3) SEND\n\n       This program causes data to be sent to the foreign socket.  The\n       subprogram will wait until the data has been received by the\n       foreign socket, or until it has been queued locally by the NCP.\n\n          The calling sequence is as follows:\n\n             CALL WRITE (cmpcd, bfr, len, time [,offset])\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'bfr' is the data to be sent, and can be of any type,\n                     any length.\n\n                'len' is the number of bits of data to be sent.  If\n                     'len' is non-positive, no operation is performed.\n                     'len' is of type INTEGER*4.\n\n                'time' is the length of time the subprogram is to wait\n                     for the completion of the operation.\n\n                'offset' is the bit offset from the first bit of 'bfr'\n                     at which data transmission is to begin, and is of\n                     type INTEGER*4.  If not specified, 'offset'\n                     defaults to zero.\n\n         The following completion codes are possible for this operation:\n\n                     0, The operation was successful, and the data has\n                        been sent\n\n                     4, The specified local socket is not a send socket;\n                        the operation was suppressed\n\n\n\nKrilanovich                                                     [Page 8]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n                     8, The specified completion code variable is not\n                        assigned to a socket; the operation was\n                        suppressed\n\n                    12, A previous send operation is in progress; the\n                        operation was suppressed\n\n                    16, The connection is not fully open; the operation\n                        was suppressed\n\n                    20, The foreign socket terminated the connection\n                        before completion of the send operation; not all\n                        the data was transmitted\n\n                    36, Either hardware at the foreign site is\n                        inoperative, or the NCP's counterpart at the\n                        foreign site does not exist or has failed\n\n                    44, By operator command, all Network operations were\n                        terminated; the socket will be closed\n\n                    52, One or more interrupts were received from the\n                        foreign socket; the operation was suppressed\n\n                    56, An addressing exception was encountered with\n                        respect to the data buffer; the operation was\n                        suppressed\n\n                    60, An NCP control transmission error occurred; the\n                        operation was aborted and the socket will be\n                        closed\n\n                    64, A transmission error occurred; the operation was\n                        aborted and the socket will be closed\n\n                   252, The specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n   4) RECEIVE\n\n       This operation causes data to be received from the foreign\n       socket.  The subprogram will wait until the reception of data is\n       complete.\n\n          The calling sequence is as follows:\n\n             CALL READ (cmpcd, bfr, len, time [,offset])\n\n\n\n\nKrilanovich                                                     [Page 9]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'bfr' is the variable into which the data is to be\n                     placed, and can be of any type, any length.\n\n                'len' is the number of bits of data to be received.  If\n                     'len' is non-positive, no operation is performed.\n                     'len' is of type INTEGER*4.\n\n                'time' is the length of time the subprogram is to wait\n                     for the completion of the operation.\n\n                'offset' is the bit offset from the first bit of 'bfr'\n                     at which the first bit of data is to be placed, and\n                     is of type INTEGER*4.  If not specified, the\n                     'offset' defaults to zero.\n\n         The following completion codes are possible for this operation:\n\n                     0, The operation was successful and the data has\n                        been received\n\n                     4, The specified local socket is not a receive\n                        socket; the operation was suppressed\n\n                     8, The specified completion code variable is not\n                        assigned to a socket; the operation was\n                        suppressed\n\n                    12, A previous receive operation is in process; the\n                        operation was suppressed\n\n                    16, The connection is not fully open; the operation\n                        was suppressed\n\n                    20, The foreign socket terminated the connection\n                        before completion of the receive operation; data\n                        is unpredictable\n\n                    24, An addressing or protection exception was\n                        encountered with respect to the data buffer; the\n                        operation was suppressed\n\n                    36, Either hardware at the foreign site is\n                        inoperative, or the NCP's counterpart at the\n                        foreign site does not exist or has failed\n\n\n\nKrilanovich                                                    [Page 10]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n                    44, By operator command, all network operations were\n                        terminated; the socket will be closed\n\n                    52, One or more interrupts were received from the\n                        foreign socket; the operation was suppressed\n\n                    60, An NCP control transmission error occurred; the\n                        operation was suppressed and the socket will be\n                        closed\n\n                   252, the specified time limit was exceeded; the\n                        operation was initiated but not completed\n\n   5) CHECK\n\n       This operation causes the status of the specified local socket to\n       be returned.  There is no completion code variable associated\n       with this operation, since it is always successful and the socket\n       is identified by its socket number.  This operation is valid at\n       any time and is always completed immediately.\n\n          The calling sequence is as follows:\n\n          CALL CHECK (lclsck, stat, menu, fgnsck, deficit)\n\n       Where\n                'lclsck' is the socket identifier of the local socket.\n\n                'stat' is a code for the status, and is of type\n                     INTEGER*4.\n\n                'mnem' is a mnemonic for the status, and can be of any\n                     type, of any length greater than or equal to eight\n                     bytes.\n\n                'fgnsck' is the socket identifier of the foreign socket,\n                     or zero.\n\n                'deficit' is the send/receive deficit in bits, or zero,\n                     and is to type INTEGER*4.\n\n                'lclsck' is the only argument the programmer need\n                     define; the others are output from the subprogram.\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 11]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n   'STAT'    'MNEM'         MEANING\n   ------    ------         ---------\n     0        OPEN         A connection is fully established. No\n                           SEND/RECEIVE operation is in progress.\n                          'fgnsck' is the socket identifier of the\n                           connected socket.  'deficit' is the number of\n                           bites queued locally at the socket by the NCP\n                           and available to satisfy a future RECEIVE\n                           operation, or awaiting output ads the results\n                           of a previous SEND operation.\n\n     1       LISTEN        A LISTEN has been issued.\n\n     2       CONNECT       A CONNECT has been issued. 'fgnsck' is the\n                           socket identifier of the foreign socket.\n\n     3       DECISION      A LISTEN has been completed.  'fgnsck' is\n                           the socket identifier of the calling socket.\n\n     4       CALL(S)       One or more calls have been received for the\n                           local socket. No LISTEN or CONNECT has been\n                           issued.\n\n     5       I/O           A connection is fully established. A\n                           SEND/RECEIVE operation is in progress.\n                          'fgnsck' is the socket identifier of the\n                           connected socket.  'deficit' is the number\n                           of bits yet to be sent or received.\n\n     6       CLOSED        The socket is in the closed state.\n\n     7      \u003c--DRAIN       The foreign socket is attempting to close the\n                           connection.  The NCP has data yet to be ready\n                           by the local socket.  'fgnsck' is the socket\n                           identifier of the connected socket.\n                          'deficit' is the number of bits yet to be\n                           received.\n\n     8       DRAINED       The foreign socket is attempting to close the\n                           connection.  The NCP is awaiting arrival at\n                           the foreign site of data currently in\n                           transit.  'fgnsck' is the socket identifier\n                           of the connected socket.\n\n     9       CLOSING       The local socket has issued a CLOSE. The NCP\n                           is in the process of returning the local\n                           socket to the closed state. 'fgnsck' is the\n                           socket identifier of the connected socket.\n\n\n\nKrilanovich                                                    [Page 12]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n    10       DRAIN--\u003e      The local socket has issued a CLOSE.  The NCP\n                           is completing the last SEND operation before\n                           returning the local socket to the closed\n                           state.  'fgnsck' is the socket identifier\n                           of the connected socket. 'deficit' is the\n                           number of bits the NCP has yet to transmit.\n\n   (6) IDENTIFY\n\n       This operation is used to identify a local socket by its\n       completion code variable.  The operation is valid at any time,\n       and is always completed immediately.  Since it is always\n       successful, there are no completion codes for the operation, and\n       the contents of the completion code variable are not changed.\n\n          The calling sequence is as follows:\n\n             CALL ID (cmpcd, lclsck)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'lclsck' is set to the socket identifier of the local\n                     socket if the completion code variable is\n                     associated with a socket, or to zero otherwise.\n\n   (7) SIGNAL\n\n       This operation is used to convey a signal to the foreign process.\n       The significance of the signal is completely user-dependent.  The\n       effect is that the next time the foreign socket attempts to\n       initiate a RECEIVE or SEND operation, the operation will be\n       suppressed, and a completion code supplied indicating that a\n       signal had been received.  The subprogram will wait until the\n       signal has been sent to the foreign NCP.  This operation is valid\n       only when the socket is fully open.\n\n          The calling sequence is as follows:\n\n             CALL SIGNAL (cmpcd, time)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'time' is the length of time the subprogram is to wait\n                     for completion of the operation.\n\n\n\nKrilanovich                                                    [Page 13]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n         The following completion codes are possible for this operation:\n\n                     0, The operation was successful, and the signal has\n                        been sent\n\n                     4, The specified completion code variable is not\n                        assigned to a socket; the operation was\n                        suppressed\n\n                     8, The connection is not fully open; the operation\n                        was suppressed\n\n       Certain of the Network subprograms are intended for, although not\n       restricted to, use with the Online System Network operators.  The\n       following is a general description of these operators:\n\n          In all Network operations involving the Online System Network\n          operators, there are certain conventions concerning the format\n          of the data sent and received.  The data is grouped in\n          'messages' consisting of three fields, op code, length, and\n          text, in that order. The op code is one byte in length and is\n          a code which indicates how the text field is to be\n          interpreted.  The length field is two bytes long, and gives\n          the length, in bits, of the text fields, which contains the\n          actual data. (The op code and length fields together are\n          termed a header.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 14]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n       The following op codes are presently defined:\n\n       Op Code   Meaning\n\n         0       This op code is a NOP. No text field exists, and the\n                 contents of the length field are unpredictable. (This\n                 op code is used mainly as a delimiter.)\n\n         1       The text field contains EBCDIC characters, one\n                 character per byte.  The Online System operators\n                 consider the characters as intended for display as soon\n                 as the text field has been received.\n\n         2       The text contains codes for keypushes, one byte per\n                 key.  The Online operators consider the keys as\n                 intended for execution as soon as the text field has\n                 been received.\n\n         3       The same as for an op code of 2, except that the Online\n                 operators consider that the execution of the keys will\n                 be delayed until all data for that receive operations\n                 has been received.\n\n       The standard format of data sent or received by the Online System\n       operators is a string of messages, with the last message\n       indicated by a header with a NOP op code, called a trailer.\n       These conventions are the default situation; any of them may be\n       overridden by appropriate programming.\n\n       Following are descriptions of those subprograms intended for use\n       the Online System operators.\n\n   (8) WRITE TO ONLINE CONSOLE\n\n       This subprogram causes data, assumed to be characters represented\n       by their EBCDIC codes, to be sent from the specified local\n       socket.  The characters are sent in a standard message, preceded\n       by a header, and optionally followed by a trailer.  The\n       subprogram waits for the data to be received by the foreign\n       socket, or to be queued locally by the NCP.  This operation is\n       valid only when the local socket is a send socket, and is fully\n       open.\n\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 15]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n          The calling sequence is as follows:\n\n             CALL WTOLC (cmpcd, bfr, len, level, across, down, time)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'bfr' is the character string to be sent, and can be of\n                     any type, any length.\n\n                'len' in absolute value, is the number of characters to\n                     be sent.  If 'len' is positive or zero, the end of\n                     the data is indicated by a trailer; if 'len' is\n                     negative, no trailer is sent.  'len' is of type\n                     INTEGER*4.\n\n                'level' indicates the mode of typing.  The absolute\n                     value of 'level', if non-zero, is the shift level\n                     on which to type, and must be less than or equal to\n                     nine.  If greater than nine, one is sued.  If\n                     'level' is positive, 'across' and 'down' are\n                     relative to the current typing location.  If\n                     'level' is negative, the carriage is positioned to\n                     the upper left-hand corner before typing begins,\n                     thus making 'across' and 'down' absolute\n                     coordinates.  If 'level' is zero, the tying is in\n                     case one characters, and a carriage return precedes\n                     the positioning for 'across' and 'sown.' If the\n                     characters to be displayed are case one characters,\n                     the header sent will have an op code which\n                     indicates characters to be displayed as soon as\n                     they are received; otherwise, the op code will\n                     indicate buttons to be executed as soon as\n                     received. 'level' is of type INTEGER*4.\n\n                'across' is the number of spaces to be moved\n                     horizontally across the display tube before\n                     beginning to type.  'across' can have any value,\n                     positive, negative, or zero, and is type INTEGER*4.\n\n                'time' is the length of time the subprogram is to wait\n                     for completion of the operation.\n\n                     The completion codes for this operation are the\n                     same as for SEND.\n\n\n\n\n\nKrilanovich                                                    [Page 16]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n   (9) READ FROM ONLINE CONSOLE\n\n       This subprogram receives data, assumed to be characters\n       represented by their EBCDIC codes, from the foreign socket in one\n       or more standard messages.  The subprogram will wait for the\n       data, optionally followed by a trailer, to be received by the\n       local socket.  This operation is valid only when the local socket\n       is a receive socket and is fully open.\n\n          The calling sequence is as follows:\n\n             CALL RFOLC (cmpcd, bfr, len, time)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'bfr' is the variable into which the data is to be\n                     placed, and can be of any type, any length.\n\n                'len', in absolute value, is the maximum number of\n                     characters to be placed in 'bfr'.  If the length\n                     fields of the head(s) received total more data than\n                     'len', the excess data will be received, but will\n                     not placed into 'brf', and will not be accessible\n                     to the program.  If 'len' is positive or zero, data\n                     will be received until a trailer is encountered.\n                     If 'len' is negative, a single message, exclusive\n                     of trailer, will be received. 'len' is of type\n                     INTEGER*4.\n\n                'time' is the length of time the subprogram is to wait\n                     for completion of the operation.\n\n                     The completion codes for this operation are the\n                     same as for RECEIVE.\n\n   (10) WRITE TO ONLINE CONSOLE WITH REPLY\n\n       This subprogram combines the functions of 'WRITE TO ONLINE\n       CONSOLE' and 'READ FROM ONLINE CONSOLE'.  The subprogram first\n       sends a string of data to the foreign socket form the specified\n       send socket, waits for it to be received by the foreign socket\n       (or queued locally by the NCP), and then waits for a reply\n       directed toward the specified receive socket.  The operation is\n       valid only when the sockets have the correct gender and both are\n       fully open.\n\n\n\n\nKrilanovich                                                    [Page 17]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n          The calling sequence is as follows:\n\n             CALL WTOLCR (cmpcd, bfr, len, level, across, down, time,\n             cmpcd2, bfr2, len2)\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local send socket.\n\n                'bfr' is as in 'WRITE TO ONLINE CONSOLE'.\n\n                'len' is as in 'WRITE TO ONLINE CONSOLE'.\n\n                'level' is an in 'WRITE TO ONLINE CONSOLE'.\n\n                'across' as in 'WRITE TO ONLINE CONSOLE'.\n\n                'down' is as in 'WRITE TO ONLINE CONSOLE'.\n\n                'time' is the length of time the subprogram is to wait\n                     for completion, individually, of the transmission\n                     and reception of data.\n\n                'cmpcd2' is the completion code variable associated with\n                     the local receive socket.\n\n                'brf2' is as 'bfr' in 'READ FROM ONLINE CONSOLE'.\n\n                'len2' is as 'len' in 'READ FROM ONLINE CONSOLE'.\n\n                     The completion codes for the send socket are the\n                     same as for the SEND operation, and the completion\n                     codes for the receive socket are the same as for\n                     the RECEIVE operation.\n\n   (11) ERASE\n\n       This subprogram cause data constituting on Online System command\n       to erase the display tube to be sent from the specified local\n       socket.  The data is sent in a single standard message, including\n       an op code indicating characters to be displayed as they are\n       received, and optionally including a trailer.  The subprogram\n       waits for the data to be received by the foreign socket, or to be\n       queued locally by the NCP.  This operation is valid only when the\n       local socket is a send socket, and is fully open.\n\n          The calling sequence is as follows:\n\n\n\n\nKrilanovich                                                    [Page 18]\n\f\nRFC 119               Network Fortran Subprograms         April 21, 1971\n\n\n             CALL ERASE ('cmpcd', 'delay1', 'delay2', 'time')\n\n       Where\n                'cmpcd' is the completion code variable associated with\n                     the local socket.\n\n                'delay1', in absolute value, is the length of time, in\n                     tenths of a second, the subprogram is to pause (in\n                     the WAIT state) before sending the erase.  If\n                     'delay1' is positive or zero, a trailer will be\n                     sent after the erase; if negative, no trailer will\n                     be sent.  'delay1' is of type INTEGER*4.\n\n                'delay2' is the length of time, in tenths of a second,\n                     the subprogram is to pause after sending the erase\n                     and before returning control to the calling\n                     program, and is of type INTEGER*4.\n\n                'time' is the length of time the subprogram is to wait\n                     for completion of the operation.\n\n                     The completion codes for this operation are the\n                     same as for SEND.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKrilanovich                                                    [Page 19]\n\f\n"
}