{
  "series": "Request for Comments",
  "number": "166",
  "howpublished": "RFC 166",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0166",
  "url": "https://www.rfc-editor.org/info/rfc166",
  "title": "Data Reconfiguration Service: An implementation specification",
  "pagetotal": "20",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\nNetwork Working Group                                       Bob Anderson\nRequest for Comments: 166                                           Rand\nNIC 6780                                                       Vint Cerf\n                                                                    UCLA\n                                                            Eric Harslem\n                                                            John Haefner\n                                                                    Rand\n                                                              Jim Madden\n                                                          U. of Illinois\n                                                            Bob Metcalfe\n                                                                     MIT\n                                                           Arie Shoshani\n                                                                     SDC\n                                                               Jim White\n                                                                    UCSB\n                                                              David Wood\n                                                                   Mitre\n                                                             25 May 1971\n\n    DATA RECONFIGURATION SERVICE -- AN IMPLEMENTATION SPECIFICATION\n\n                                 CONTENTS\n\n     I.  INTRODUCTION ...................................  2\n\n         Purpose of this RFC ............................  2\n         Motivation .....................................  2\n\n    II.  OVERVIEW OF THE DATA RECONFIGURATION SERVICE ...  3\n\n         Elements of the Data Reconfiguration SERVICE ...  3\n         Conceptual Network Connections .................  3\n         Conception Protocols and Message Formats .......  4\n         Example Connection Configurations ..............  7\n\n   III.  THE FORM MACHINE ...............................  8\n\n         Input/Output Streams and Forms .................  8\n         Form Machine BNF Syntax ........................  8\n         Alternate Specification of Form Machine Syntax .  9\n         Forms .......................................... 10\n         Rules .......................................... 10\n         Terms .......................................... 11\n\n           Term Format 1 ................................ 11\n           Term Format 2 ................................ 11\n           Term Format 3 ................................ 14\n           Term Format 4 ................................ 14\n\n\n\nAnderson, et al.                                                [Page 1]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n           The Application of a Term .................... 14\n           Restrictions and Interpretations of Term\n             Functions .................................. 15\n\n           Term and Rule Sequencing ..................... 16\n\n    IV.  EXAMPLES ....................................... 17\n\n         Remarks ........................................ 17\n         Field Insertion ................................ 17\n         Deletion ....................................... 17\n         Variable Length Records ........................ 18\n         String Length Computation ...................... 18\n         Transposition .................................. 18\n         Character Packing and Unpacking ................ 18\n\n\n                             I.  INTRODUCTION\n\nPURPOSE OF THIS RFC\n\n   The Purpose of this RFC is to specify the Data Reconfiguration\n   Service (DRS.)\n\n   The DRS experiment involves a software mechanism to reformat Network\n   data streams.  The mechanism can be adapted to numerous Network\n   application programs.  We hope that the result of the experiment will\n   lead to a future standard service that embodies the principles\n   described in this RFC.\n\n\nMOTIVATION\n\n   Application programs require specific data I/O formats yet the\n   formats are different from program to program.  We take the position\n   that the Network should adapt to the individual program requirements\n   rather than changing each program to comply with a standard.  This\n   position doesn't preclude the use of standards that describe the\n   formats of regular message contents; it is merely an interpretation\n   of a standard as being a desirable mode of operation but not a\n   necessary one.\n\n   In addition to differing program requirements, a format mismatch\n   problem occurs where users wish to employ many different kinds of\n   consoles to attach to a single service program.  It is desirable to\n   have the Network adapt to individual console configurations rather\n   than requiring unique software packages for each console\n   transformation.\n\n\n\nAnderson, et al.                                                [Page 2]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   One approach to providing adaptation is for those sites with\n   substantial computing power to offer a data reconfiguration service;\n   this document is a specification of such a service.\n\n   The envisioned modus operandi of the service is that an applications\n   programmer defines _forms_ that describe data reconfigurations.  The\n   service stores the forms by name.  At a later time, a user (perhaps a\n   non-programmer) employs the service to accomplish a particular\n   transformation of a Network data stream, simply by calling the form\n   by name.\n\n   We have attempted to provide a notation tailored to some specifically\n   needed instances of data reformatting while keeping the notation and\n   its underlying implementation within some utility range that is\n   bounded on the lower end by a notation expressive enough to make the\n   experimental service useful, and that is bounded on the upper end by\n   a notation short of a general purpose programming language.\n\n\n             II.  OVERVIEW OF THE DATA RECONFIGURATION SERVICE\n\nELEMENTS OF THE DATA RECONFIGURATION SERVICE\n\n   An implementation of the Data Reconfiguration Service (DRS) includes\n   modules for connection protocols, a handler of some requests that can\n   be made of the service, a compiler and/or interpreter (called the\n   Form Machine) to act on those requests, and a file storage module for\n   saving and retrieving definitions of data reconfigurations (forms).\n\n   This section describes connection protocols and requests.  The next\n   section covers the Form Machine language in some detail.  File\n   storage is not described in this document because it is transparent\n   to the use of the service an its implementation is different at each\n   DRS host.\n\nCONCEPTUAL NETWORK CONNECTIONS\n\n   There are three conceptual Network connections to the DRS, see Fig.\n   1.\n\n         1)  The control connection (CC) is between an originating user\n             and the DRS.  Forms specifying data reconfigurations are\n             defined over this connection.  The user indicates (once)\n             forms to be applied to data passing over the two\n             connections described below.\n\n         2)  The user connection (UC) is between a user process and the\n             DRS.\n\n\n\nAnderson, et al.                                                [Page 3]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n         3)  The server connection (SC) is between the DRS and the\n             serving process.\n\n   Since the goal is to adapt the Network to user and server processes,\n   a minimum of requirements are imposed on the UC and SC.\n\n      +------------+              +------+          +---------+\n      | ORIGINATING|     CC       | DRS  |    SC    | SERVER  |\n      | USER       |--------------|      |----------| PROCESS |\n      +------------+     ^        +------+     ^    +---------+\n                         |           /         |\n                         |        UC/ \u003c-----\\  |\n                         |         /         \\ |\n                         |   +-----------+    \\|\n         TELNET ---------+   | USER      |     +-- Simplex or Duplex\n         Protocol            | PROCESS   |         Connections\n         Connection          +-----------+\n\n\n                Figure 1.  DRS Network Connections\n\n\nCONNECTION PROTOCOLS AND MESSAGE FORMATS\n\n   Over a control connection the dialog is directly between an\n   originating user and the DRS.  Here the user is defining forms or\n   assigning predefined forms to connections for reformatting.\n\n   The user connects to the DRS via the standard initial connection\n   protocol (ICP).  Rather than going through a logger, the user calls\n   on a particular socket on which the DRS alway listens. (Experimental\n   socket numbers will be published later.) DRS switches the user to\n   another socket pair.\n\n   Messages sent over a control connection are of the types and formats\n   specified for TELNET.  (The data type code should specify ASCII --\n   the default.)  Thus, a user at a terminal should be able to connect\n   to a DRS via his local TELNET, for example, as shown in Fig. 2.\n\n                            +---------+   CC  +---------+\n                  +---------| TELNET  |-------|   DRS   |\n                  |         +---------+       +---------+\n      +-----------------------+\n      |         USER          |\n      | (TERMINAL OR PROGRAM) |\n      +-----------------------+\n\n                  Figure 2. A TELNET Connection to DRS\n\n\n\nAnderson, et al.                                                [Page 4]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   When a user connects to DRS he supplies a six-character user ID (UID)\n   as a qualifier to guarantee the uniqueness of his form names.  He\n   will initially have the following commands:\n\n         1.  DEFFORM (form)\n         2.  ENDFORM (form)\n\n             These two commands define a form, the text of which is\n             chronologically entered between them.  The form is stored\n             in the DRS local file system.\n\n         3.  PURGE (form)\n\n             The named form, as qualified by the current UID, is purged\n             from the DRS file system.\n\n         4.  LISTNAMES (UID)\n\n             The unqualified names of all forms assigned to UID are\n             returned.\n\n         5.  LISTFORM (form)\n\n             The source text of a named form is returned.\n\n         6.  DUPLEXCONNECT (user site, user receive socket, user method,\n             server site, server receive socket, server method, user-\n             to-server form name, server-to-user form name)\n\n             A duplex connection is made between two processes using the\n             receive sockets and the sockets one greater.  Method is\n             defined below.  The forms define the transformations on\n             these connections.\n\n         7.  SIMPLEXCONNECT (user site, user socket, user method, server\n             site, server socket, server method, form)\n\n             A simplex connection is made between the two sockets as\n             specified by method.\n\n         8.  ABORT (site, receive socket)\n\n             The reconfiguration of data is terminated by closing both\n             the UC and SC specified in part in the command.\n\n   Either one, both, or neither of the two parties specified in 6 or 7\n   may be at the same host as the party issuing the request.  Sites and\n   sockets specify user and server for the connection.  Method indicates\n\n\n\nAnderson, et al.                                                [Page 5]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   the way in which the connection is established.\n\n   The following rules apply to these commands:\n\n         1)  Commands may be abbreviated to the minimum number of\n             characters to identify them uniquely.\n\n         2)  All commands should be at the start of a line.\n\n         3)  Parameters are enclosed in parentheses and separated by\n             commas.\n\n         4)  Imbedded blanks are ignored.\n\n         5)  The parameters are:\n\n             form name        1-6 characters\n             UID              1-6 characters\n             Site             1-2 characters specifying\n                                  the hexadecimal host number\n             Socket           1-8 characters specifying the\n                                  hexadecimal socket number\n             Method           A single character\n\n         6)  Method has the following values:\n\n             C      The site/socket is already connected\n                    to the DRS as a dummy control connection\n                    (should not be the real control connection).\n             I      Connect via the standard ICP (does not\n                    apply to SIMPLEXCONNECT).\n             D      Connect directly via STR, RTS.\n\n             The DRS will make at least the following minimal\n             responses to the user:\n\n             1)  A positive or negative acknowledgement after\n                 each line (CR/LF)\n             2)  If a form fails or terminates\n             TERMINATE, ASCII Host # as hex, ASCII Socket # as hex,\n                         ASCII Return Code as decimal\n             thus identifying at least one end of the connection.\n\n\n\n\n\n\n\n\n\nAnderson, et al.                                                [Page 6]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\nEXAMPLE CONNECTION CONFIGURATIONS\n\n   There are basically two modes of DRS operation: 1) the user wishes to\n   establish a DRS UC/SC connection(s) between the programs and 2) the\n   user wants to establish the same connection(s) where he (his\n   terminal) is at the end of the UC or the SC.  The latter case is\n   appropriate when the user wishes to interact from his terminal with\n   the serving process (e.g., a logger).\n\n   In the first case (Fig. 1, where the originating user is either a\n   terminal or a program) the user issues the appropriate CONNECT\n   command.  The UC/SC can be simplex or duplex.\n\n   The second case has two possible configurations, shown in Figs. 3 and\n   4.\n\n\n   +-------+    +--------+   CC    +-----+        +----+\n   |       |----|        |---------|     |   SC   |    |\n   | USER  |    | TELNET |   UC    | DRS |--------| SP |\n   |       |----|        |---------|     |        |    |\n   +-------+    +--------+         +-----+        +----+\n\n            Figure 3.  Use of Dummy Control Connection\n\n                +---------+\n   +------+    /| USER    |   CC   +-----+\n   |      |---/ | SIDE    |--------|     |   SC   +----+\n   | USER |     +---------+   UC   | DRS |--------| SP |\n   |      |---\\ | SERVING |--------|     |        +----+\n   +------+    \\| SIDE    |        +-----+\n                +---------+\n\n            Figure 4.  Use of Server TELNET\n\n   In Fig. 3 the user instructs his TELNET to make two duplex\n   connections to DRS.  One is used for control information (the CC) and\n   the other is a dummy.  When he issues the CONNECT he references the\n   dummy duplex connection (UC) using the \"already connected\" option.\n\n   In Fig. 4 the user has his TELNET (user side) call the DRS.  When he\n   issues the CONNECT the DRS calls the TELNET (server side) which\n   accepts the call on behalf of the console.  This distinction is known\n   only to the user since to the DRS the configuration Fig. 4 appears\n   identical to that in Fig. 1.  Two points should be noted:\n\n        1)  TELNET protocol is needed only to define forms and direct\n            connections.  It is not required for the using and serving\n\n\n\nAnderson, et al.                                                [Page 7]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n            processes.\n        2)  The using and serving processes need only a minimum of\n            modification for Network use, i.e., an NCP interface.\n\n                          III.  THE FORM MACHINE\n\nINPUT/OUTPUT STREAMS AND FORMS\n\n   This section describes the syntax and semantics of forms that specify\n   the data reconfigurations.  The Form Machine gets an input stream,\n   reformats the input stream according to a form describing the\n   reconfiguration, and emits the reformatted data as an output stream.\n\n   In reading this section it will be helpful to envision the\n   application of a form to the data stream as depicted in Fig. 5.  An\n   input stream pointer identifies the position of data (in the input\n   stream) that is being analyzed at any given time by a part of the\n   form.  Likewise, an output stream pointer locates data being emitted\n   in the output stream.\n\n\n       /\\/\\                                                  /\\/\\\n  ^    |  |                     FORM                         |  |   ^\n  |    |  |                -----------------                 |  |   |\n  |    |  |            +-  -----------------  -+             |  |   |\n  |    |  |            |   CURRENT PART OF     |             |  |   |\nINPUT  |  |\u003c= CURRENT \u003c    -----------------    \u003e CURRENT =\u003e |  | OUTPUT\nSTREAM |  |   POINTER  |   FORM BEING APPLIED  |  POINTER    |  | STREAM\n       |  |            +-  -----------------  -+             |  |\n       |  |                -----------------                 |  |\n       |  |                -----------------                 |  |\n       |  |                -----------------                 |  |\n       \\/\\/                                                  \\/\\/\n              Figure 5.  Application of Form to Data Streams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnderson, et al.                                                [Page 8]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\nFORM MACHINE BNF SYNTAX\n\n   form           ::=  rule | rule form\n\n   rule           ;;=  label  inputstream  outputstream ;\n\n   label          ::=  INTEGER | \u003cnull\u003e\n\n   inputstream    ::=  terms | \u003cnull\u003e\n\n   terms          ::=  term | terms , term\n\n   outputstream   ::=  : terms | \u003cnull\u003e\n\n   term           ::=  identifier | identifier  descriptor |\n                       descriptor | comparator\n\n   identifier     ::=  an alpha character followed by 0 to 3\n                       alphanumerics\n\n   descriptor     ::=  (replicationexpression , datatype ,\n                       valueexpression , lengthexpression  control)\n\n   comparator     ::=  (value  connective  value  control)  |\n                       (identifier  *\u003c=*  control)\n\n   replicationexpression  ::=  # | arithmeticexpression | \u003cnull\u003e\n\n   datatype       ::=  B | O | X | E | A\n\n   valueexpression  ::=  value | \u003cnull\u003e\n\n   lengthexpression  ::=      arithmeticexpression | \u003cnull\u003e\n\n   connective     ::=  .LE. | .LT. | .GE. | .GT. | .EQ. | .NE.\n\n   value          ::=  literal | arithmeticexpression\n\n   arithmeticexpression  ::=  primary | primary operator\n                              arithmeticexpression\n\n   primary        ::=  identifier | L(identifier) | V(identifier) |\n                       INTEGER\n\n   operator       ::=  + | - | * | /\n\n   literal        ::=  literaltype \"string\"\n\n\n\n\nAnderson, et al.                                                [Page 9]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   literaltype    ::=  B | O | X | E | A\n\n   string         ::=  from 0 to 256 characters\n\n   control        ::=  :  options | \u003cnull\u003e\n\n   options        ::=  S(where) | F(where) | U(where) |\n                       S(where) , F(where) |\n                       F(where) , S(where)\n\n   where          ::=  arithmeticexpression | R(arithmeticexpression)\n\n\nALTERNATE SPECIFICATION OF FORM MACHINE SYNTAX\n\n                                   infinity\nform                    ::=  {rule}\n                                   1\n                                      1         1          1\nrule                    ::=  {INTEGER}   {terms}   {:terms} ;\n                                      0         0          0\n                                         infinity\nterms                   ::=  term {,term}\n                                         0\n                                                      1\nterm                    ::=  identifier | {identifier}   descriptor\n                                                      0\n                             | comparator\n                                                    1\ndescriptor              ::=  ({arithmeticexpression}  , datatype ,\n                                                    0\n                                    1                     1          1\n                             {value} ,  {lengthexpression}  {:options}\n                                    0                     0          0\n                                                                 1\ncomparator              ::=  (value  connective  value {:options} ) |\n                                                                 0\n                                                              1\n                             (identifier .\u003c=. value {:options} )\n                                                              0\nconnective              ::=  .LE. | .LT. | .GE. | .GT. | .EQ. | .NE.\n\nlengthexpression        ::=  # | arithmeticexpression\n\ndatatype                ::=  B | O | X | E | A\n\nvalue                   ::=  literal | arithmeticexpression\n\n\n\n\nAnderson, et al.                                               [Page 10]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n                                                         infinity\narithmeticexpression    ::=  primary  {operator  primary}\n                                                         0\noperator                ::= + | - | * | /\n\nprimary                 ::=  identifier | L(identifier) |\n                             V(identifier) | INTEGER\n                                                      256\nliteral                 ::=  literaltype  \"{CHARACTER}   \"\n                                                      0\nliteraltype             ::=  B | O | X | A | E\n                                                 1\noptions                 ::=  S(where) {,F(where)}  |\n                                                 0\n                                                 1\n                             F(where) {,S(where)}  | U(where)\n                                                 0\nwhere                   ::=  arithmeticexpression |\n                             R(arithmeticexpression)\n                                                     3\nidentifier              ::=  ALPHABETIC  {ALPHAMERIC}\n                                                     0\n\n\nFORMS\n\n   A form is an ordered set of rules.\n\n         form ::=  rule | rule form\n\n   The current rule is applied to the current position of the input\n   stream.  If the (input stream part of a) rule fails to correctly\n   describe the contents of the current input then another rule is made\n   current and applied to the current position of the input stream.  The\n   next rule to be made current is either explicitly specified by the\n   current term in the current rule or it is the next sequential rule by\n   default.  Flow of control is more fully described under TERM AND RULE\n   SEQUENCING.\n\n   If the (input stream part of a) rule succeeds in correctly describing\n   the current input stream, then some data may be emitted at the\n   current position in the output stream according to the rule.  The\n   input and output stream pointers are advanced over the described and\n   emitted data, respectively, and the next rule is applied to the now\n   current position of the input stream.\n\n   Application of the form is terminated when an explicit return\n   (R(arithmeticexpression)) is encountered in a rule.  The user and\n\n\n\nAnderson, et al.                                               [Page 11]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   server connections are closed and the return code\n   (arithmeticexpression) is sent to the originating user.\n\nRULES\n\n   A rule is a replacement, comparison, and/or an assignment operation\n   of the form shown below.\n\n         rule ::= label  inputstream  outputstream\n\n   A label is the name of a rule and it exists so that the rule may be\n   referenced elsewhere in the form for explicit rule transfer of\n   control.  Labels are of the form below.\n\n         label ::=  INTEGER | \u003cnull\u003e\n\n   The optional integer labels are in the range 0 \u003e= INTEGER \u003e= 9999.\n   The rules need not be labeled in ascending numerical order.\n\nTERMS\n\n   The inputstream (describing the input stream to be matched) and the\n   outputstream (describing data to be emitted in the output stream)\n   consist of zero or more terms and are of the form shown below.\n\n         inputstream   ::=  terms | \u003cnull\u003e\n         outputstream  ::=  :terms | \u003cnull\u003e\n         terms         ::=  term | terms , term\n\n   Terms are of one of four formats as indicated below.\n\n         term ::=  identifier | identifier  descriptor |\n                   descriptor | comparator\n\nTerm Format 1\n\n   The first term format is shown below.\n\n         identifier\n\n   The identifier is a symbolic reference to a previously identified\n   term (term format 2) in the form.  It takes on the same attributes\n   (value, length, type) as the term by that name.  Term format 1 is\n   normally used to emit data in the output stream.\n\n   Identifiers are formed by an alpha character followed by 0 to 3\n   alphanumeric characters.\n\n\n\n\nAnderson, et al.                                               [Page 12]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\nTerm Format 2\n\n   The second term format is shown below.\n\n         identifier descriptor\n\n   Term format 2 is generally used as an input stream term but can be\n   used as an output stream term.\n\n   A descriptor is defined as shown below.\n\n         descriptor ::= (replicationexpression, datatype,\n                        valueexpression, lengthexpression\n                        control)\n\n   The identifier is the symbolic name of the term in the usual\n   programming language sense.  It takes on the type, length, value, and\n   replication attributes of the term and it may be referenced elsewhere\n   in the form.\n\n   The replication expression, if specified, causes the unit value of\n   the term to be generated the number of times indicated by the value\n   of the replication expression.  The unit value of the term (quantity\n   to be replicated) is determined from the data type, value expression,\n   and length expression attributes.  The data type defines the kind of\n   data being specified.  The value expression specifies a nominal value\n   that is augmented by the other term attributes.  The length\n   expression determines the unit length of the term.  (See the IBM SRL\n   Form C28-6514 for a similar interpretation of the pseudo instruction,\n   defined constant, after which the descriptor was modeled.)\n\n   The replication expression is defined below.\n\n         replicationexpression ::= # | arithmeticexpression | \u003cnull\u003e\n         arithmeticexpression ::= primary | primary operator\n                                  arithmeticexpression\n         operator ::= + | - | * | /\n         primary ::= identifier | L(identifier) | V(identifier) |\n                     INTEGER\n\n   The replication expression is a repeat function applied to the\n   combined data type value, and length expressions.  It expresses the\n   number of times that the nominal value is to be repeated.\n\n   The terminal symbol # means an arbitrary replication factor.  It must\n   be explicitly terminated by a match or non-match to the input stream.\n   This termination may result from the same or the following term.\n\n\n\n\nAnderson, et al.                                               [Page 13]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   A null replication expression has the value of one.  Arithmetic\n   expressions are evaluated from left-to-right with no precedence.\n\n   The L(identifier) is a length operator that generates a 32-bit binary\n   integer corresponding to the length of the term named.  The\n   V(identifier) is a value operator that generates a 32-bit binary\n   integer corresponding to the value of the term named.  (See\n   Restrictions and Interpretations of Term Functions.)  The value\n   operator is intended to convert character strings to their numerical\n   correspondents.\n\n   The data type is defined below.\n\n             datatype ::= B | O | X | E | A\n\n   The data type describes the kind of data that the term represents.\n   (It is expected that additional data types, such as floating point\n   and user-defined types, will be added as needed.)\n\n        Data Type         Meaning              Unit Length\n\n            B             Bit string              1 bit\n            O             Bit string              3 bits\n            X             Bit string              4 bits\n            E             EBCDIC character        8 bits\n            A             Network ASCII character 8 bits\n\n   The value expression is defined below.\n\n            valueexpression ::= value | \u003cnull\u003e\n            value ::= literal | arithmeticexpression\n            literal ::= literaltype \"string\"\n            literaltype ::= B | O | X | E | A\n\n   The value expression is the nominal value of a term expressed in the\n   format indicated by the data type.  It is repeated according to the\n   replication expression.\n\n   A null value expression in the input stream defaults to the data\n   present in the input stream.  The data must comply with the datatype\n   attribute, however.\n\n   A null value expression generates padding according to Restrictions\n   and Interpretations of Term Functions.\n\n   The length expression is defined below.\n\n         lengthexpression ::= arithmeticexpression | \u003cnull\u003e\n\n\n\nAnderson, et al.                                               [Page 14]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n   The length expression states the length of the field containing the\n   value expression.\n\n   If the length expression is less than or equal to zero, the term\n   succeeds but the appropriate stream pointer is not advanced.\n   Positive lengths cause the appropriate stream pointer to be advanced\n   if the term otherwise succeeds.\n\n   Control is defined under TERM AND RULE SEQUENCING.\n\nTerm Format 3\n\n   Term format 3 is shown below.\n\n         descriptor\n\n   It is identical to term format 2 with the omission of the identifier.\n   Term format 3 is generally used in the output stream.  It is used in\n   the input stream where input data is to be passed over but not\n   retained for emission or later reference.\n\nTerm Format 4\n\n   The fourth term format is shown below.\n\n         comparator    ::= (value connective value control) |\n                           (identifier *\u003c=* value  control)\n         value         ::= literal | arithmeticexpression\n         literal       ::= literaltype \"string\"\n         literaltype   ::= B | O | X | E | A\n         string        ::= from 0 to 256 characters\n         connective    ::= .LE. | .LT. | .GE. | .GT. | .EQ. | .NE.\n\n   The fourth term format is used for assignment and comparison.\n\n   The assignment operator *\u003c=* assigns the value to the identifier.\n   The connectives have their usual meaning.  Values to be compared must\n   have the same type and length attributes or an error condition arises\n   and the form fails.\n\nThe Application of a Term\n\n   The elements of a term are applied by the following sequence of\n   steps.\n\n         1.  The data type, value expression, and length expression\n             together specify a unit value, call it x.\n\n\n\n\nAnderson, et al.                                               [Page 15]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n         2.  The replication expression specifies the number of times x\n             is to be repeated.  The value of the concatenated xs\n             becomes y of length L.\n\n         3.  If the term is an input stream term then the value of y of\n             length L is tested with the input value beginning at the\n             current input pointer position.\n\n         4.  If the input value satisfies the constraints of y over\n             length L then the input value of length L becomes the value\n             of the term.\n\n   In an output stream term, the procedure is the same except that the\n   source of input is the value of the term(s) named in the value\n   expression and the data is emitted in the output stream.\n\n   The above procedure is modified to include a one term look-ahead\n   where replicated values are of indefinite length because of the\n   arbitrary symbol, #.\n\nRestrictions and Interpretations of Term Functions\n\n   1.    Terms having indefinite lengths because their values are\n         repeated according to the # symbol, must be separated by some\n         type-specific data such as a literal.  (A literal isn't\n         specifically required, however.  An arbitrary number of ASCII\n         characters could be terminated by a non-ASCII character.)\n\n   2.    Truncation and padding is as follows:\n         a)  Character to character (A \u003c-\u003e E) conversion is left-\n             justified and truncated or padded on the right with blanks.\n         b)  Character to numeric and numeric to numeric conversions are\n             right-justified and truncated or padded on the left with\n             zeros.\n         c)  Numeric to character conversions is right-justified and\n             left-padded with blanks.\n\n   3.    The following are ignored in a form definition over the control\n         connection.\n         a)  TELNET control characters.\n         b)  Blanks except within quotes.\n         c)  /* string */ is treated as comments except within quotes.\n\n   4.    The following defaults prevail where the term part is omitted.\n\n         a)  The replication expression defaults to one.\n         b)  # in an output stream term defaults to one.\n         c)  The value expression of an input stream term defaults to\n\n\n\nAnderson, et al.                                               [Page 16]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n             the value found in the input stream, but the input stream\n             must conform to the data type and length expression.  The\n             value expression of an output stream term defaults to\n             padding only.\n         e)  The length expression defaults to the size of the quantity\n             determined by the data type and value expression.\n         f)  Control defaults to the next sequential term if a term is\n             successfully applied; else control defaults to the next\n             sequential rule.  If _where_ evaluates to an undefined\n             _label_ the form fails.\n\n   5.    Arithmetic expressions are evaluated left-to-right with no\n         precedence.\n\n   6.    The following limits prevail.\n\n         a)  Binary lengths are \u003c= 32 bits\n         b)  Character strings are \u003c= 256 8-bit characters\n         c)  Identifier names are \u003c= 4 characters\n         d)  Maximum number of identifiers is \u003c= 256\n         e)  Label integers are \u003e= 0 and \u003c= 9999\n   7.    Value and length operators product 32-bit binary integers.  The\n         value operator is currently intended for converting A or E type\n         decimal character strings to their binary correspondents.  For\n         example, the value of E'12' would be 0......01100.  The value\n         of E'AB' would cause the form to fail.\n\nTERM AND RULE SEQUENCING\n\n   Sequencing may be explicitly controlled by including control in a\n   term.\n\n        control ::=  :options | \u003cnull\u003e\n        options ::=  S(where) | F(where) | U(where)\n                     S(where) , F(where) |\n                     F(where) , S(where)\n\n        where   ::=  arithmeticexpression | R(arithmeticexpression)\n\n   S, F, and U denote success, fail, and unconditional transfers,\n   respectively.  _Where_ evaluates to a _rule_ label, thus transfer can\n   be effected from within a rule (at the end of a term) to the\n   beginning of another rule.  R means terminate the form and return the\n   evaluated expression to the initiator over the control connection (if\n   still open).\n\n   If terms are not explicitly sequenced, the following defaults\n   prevail.\n\n\n\nAnderson, et al.                                               [Page 17]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\n        1)  When a term fails go to the next sequential rule.\n        2)  When a term succeeds go to the next sequential\n            term within the rule.\n        3)  At the end of a rule, go to the next sequential\n            rule.\n\n   Note in the following example, the correlation between transfer of\n   control and movement of the input pointer.\n\n        1   XYZ(,B,,8:S(2),F(3)) : XYZ ;\n        2   . . . . . . .\n        3   . . . . . . .\n\n   The value of XYZ will never be emitted in the output stream since\n   control is transferred out of the rule upon either success or\n   failure.  If the term succeeds, the 8 bits of input will be assigned\n   as the value of XYZ and rule 2 will then be applied to the same input\n   stream data.  That is, since the complete left hand side of rule 1\n   was not successfully applied, the input stream pointer is not\n   advanced.\n\n                               IV.  EXAMPLES\n\nREMARKS\n\n   The following examples (forms and also single rules) are simple\n   representative uses of the Form Machine.  The examples are expressed\n   in a term-per-line format only to aid the explanation.  Typically, a\n   single rule might be written as a single line.\n\nFIELD INSERTION\n\n   To insert a field, separate the input into the two terms to allow the\n   inserted field between them.  For example, to do line numbering for a\n   121 character/line printer with a leading carriage control character,\n   use the following form.\n\n   (NUMB*\u003c=*1);       /*initialize line number counter to one*/\n   1 CC(,E,,1:F(R(99))),  /*pick up control character and save\n                          as CC*/\n                          /*return a code of 99 upon exhaustion*/\n   LINE(,E,,121 : F(R(98)))  /*save text as LINE*/\n   :CC,               /*emit control character*/\n   (,E,NUMB,2),       /*emit counter in first two columns*/\n   (,E,E\".\",1),       /*emit period after line number*/\n   (,E,LINE,117),     /*emit text, truncated in 117 byte field*/\n   (NUMB*\u003c=*NUMB+1:U(1));   /*increment line counter and go to\n                              rule one*/;;\n\n\n\nAnderson, et al.                                               [Page 18]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\nDELETION\n\n   Data to be deleted should be isolated as separate terms on the left,\n   so they may be omitted (by not emitting them) on the right.\n\n   (,B,,8),           /*isolate 8 bits to ignore*/\n   SAVE(,A,,10)       /*extract 10 ASCII characters from\n                        input stream*/\n   :(,E,SAVE,);       /*emit the characters in SAVE as EBCDIC\n                        characters whose length defaults to the\n                        length of SAVE, i.e., 10, and advance to\n                        the next rule*/\n\n   In the above example, if either input stream term fails,\n   the next sequential rule is applied.\n\nVARIABLE LENGTH RECORDS\n\n   Some devices, terminals and programs generate variable\n   length records.  The following rule picks up variable length\n   EBCDIC records and translates them to ASCII.\n\n   CHAR(#,E,,1),      /*pick up all (an arbitrary number of)\n                        EBCDIC characters in the input stream*/\n   (,X,X\"FF\",2)       /*followed by a hexadecimal literal,\n                        FF (terminal signal)*/\n   :(,A,CHAR,),       /*emit them as ASCII*/\n   (,X,X\"25\",2);      /*emit an ASCII carriage return*/\n\nSTRING LENGTH COMPUTATION\n\n   It is often necessary to prefix a length field to an arbitrarily long\n   character string.  The following rule prefixes an EBCDIC string with\n   a one-byte length field.\n\n   Q(#,E,,1),         /*pick up all EBCDIC characters*/\n   TS(,X,X\"FF\",2)     /*followed by a hexadecimal literal, FF*/\n   :(,B,L(Q)+2,8),    /*emit the length of the characters\n                        plus the length of the literal plus\n                        the length of the count field itself,\n                        in an 8-bit field*/\n   Q,                 /*emit the characters*/\n   TS,                /*emit the terminal*/\n\n\n\n\n\n\n\n\nAnderson, et al.                                               [Page 19]\n\f\nRFC 166               Data Reconfiguration Service              May 1971\n\n\nTRANSPOSITION\n\n   It is often desirable to reorder fields, such as the following\n   example.\n\n   Q(,E,,20), R(,E,,10) , S(,E,,15), T(,E,,5) : R, T, S, Q ;\n\n   The terms are emitted in a different order.\n\nCHARACTER PACKING AND UNPACKING\n\n   In systems such as HASP, repeated sequences of characters are packed\n   into a count followed by the character, for more efficient storage\n   and transmission.  The first form packs multiple characters and the\n   second unpacks them.\n\n   /*form to pack EBCDIC streams*/\n   /*returns 99 if OK, input exhausted*/\n   /*returns 98 if illegal EBCDIC*/\n   /*look for terminal signal FF which is not a legal EBCDIC*/\n   /*duplication count must be 0-254*/\n   1 (,X,X\"FF\",2 : S(R(99))) ;\n   /*pick up an EBCDIC char/*\n   CHAR(,E,,1) ;\n   /*get identical EBCDIC chars/*\n   LEN(#,E,CHAR,1)\n   /*emit the count and the char/*\n   : (,B,L(LEN)+1,8), CHAR, (:U(1));\n   /*end of form*/;;\n\n   /*form to unpack EBCDIC streams*/\n   /*look for terminal*/\n   1 (,X,X\"FF\",2 : S(R(99))) ;\n   /*emit character the number of times indicated*/\n   /*by the count, in a field the length indicated*/\n   /*by the counter contents*/\n   CNT(,B,,8), CHAR(,E,,1) : (CNT,E,CHAR,1:U(1));\n   /*failure of form*/\n   (:U(R(98))) ;;\n\n\n\n\n       [ This RFC was put into machine readable form for entry ]\n        [ into the online RFC archives by Simone Demmel 03/98 ]\n\n\n\n\n\n\nAnderson, et al.                                               [Page 20]\n\f\n"
}