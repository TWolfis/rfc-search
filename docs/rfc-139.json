{
  "series": "Request for Comments",
  "number": "139",
  "howpublished": "RFC 139",
  "publisher": "RFC Editor",
  "doi": "10.17487/RFC0139",
  "url": "https://www.rfc-editor.org/info/rfc139",
  "title": "Discussion of Telnet Protocol",
  "pagetotal": "11",
  "year": "1971",
  "month": "may",
  "body": "\n\n\n\n\n\nNetwork Working Group                                      T. O'Sullivan\nRequest for Comments: 139                                       Raytheon\nNIC: 6717                                                     7 May 1971\n\n\n                     Discussion of TELNET Protocol\n\n\n   The attached discussion is an extension of RFC 137, NIC #6717, and is\n   presented to provide useful background to designers and implementers\n   to help them interpret the proposed Protocol and evaluate it in\n   preparation for further discussion at the Atlantic City meetings.\n\n   While the views in the discussion represent those of various TELNET\n   committee members, they should not be interpreted as being the agreed\n   view of committee.  They are the author's understanding of some of\n   the arguments and background to the PROTOCOL proposed in the TELNET\n   PROTOCOL recommendations.\n\n   *  See Footnotes to attached discussion for changes to RFC 137.\n\nDiscussion of TELNET PROTOCOL\n\n   The use of a standard, network-wide, intermediate representation of\n   terminal code between sites eliminates the need for using and serving\n   sites to keep information about the characteristics of each other's\n   terminals and terminal handling conventions, but only if the user,\n   the using site, and the serving site assume certain responsibilities.\n\n      1. The serving site must specify how the intermediate code will be\n         mapped by it into the terminal codes that are expected at that\n         site.\n\n      2. The user must be familiar with that mapping.\n\n      3. The using site must provide some means for the user to enter\n         all of the intermediate codes, and as a convenience, special\n         control signals, as well as specify for the user how the\n         signals from the serving site will be presented at the user\n         terminal.\n\n   Other schemes were considered but rejected.  For example, a proposal\n   that the using site be responsible to transmit to and from the code\n   expected by the serving site was rejected since it required that the\n   using site keep tables of all serving site codes and provide mapping\n   for each case.  The information would require constant maintenance as\n   new hosts were added to the network.\n\n\n\n\nO'Sullivan                                                      [Page 1]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n   Since it is not known how the current or future sites will specify\n   the mapping between the network-wide standard code (7 bit ASCII in an\n   8 bit field) and the codes expected from their own terminals, it\n   seems necessary to permit the user to cause every one of the 128\n   ASCII codes, plus (for full user power) selected control signals\n   (either of a TELNET control nature, or of a special terminal nature\n   such as break or attention).\n\n   There was strong feeling about the importance of the user/system\n   interface at the using site, but equally strong feeling that this\n   problem is one of local implementation and should reflect the using\n   site installation philosophy rather than the subject to network-wide\n   standards.  Some topics of consideration in this area are:\n\n      1. How to represent special graphics, not available at the using\n         site, at the user's terminal.\n\n      2. Treatment of upper/lower case problem on TTY 33 and 35.\n\n         a. Representing lower-case output.\n\n         b. Providing users with shift and shift lock signals.\n\n      3. Incorporating editing capability in TELNET.\n\n      4. Extending user options in Network mode not available to local\n         users,\n         e.g., hold output\n\n               kill print\n\n      5. Permit users to specify how keyboard input is to be translated,\n         e.g., let a character from the terminal cause a specified\n         string to be sent by the user's TELNET.\n\n   In early discussions, there was pressure to get a simple statement of\n   protocol out early to permit early use of selected systems.  The\n   counter pressure to provide a richer set of protocol in the first\n   release was also present.  Work started in the direction of the\n   latter, but the complexities introduced were not necessary for early\n   use of the network.  The proposed solution to the TELNET protocol\n   problem seems to provide a mechanism for a minimum implementation (to\n   be discussed later) while providing a basis for developing richer\n   sets of protocol for present and future use in terminal applications,\n   process-process communications, and use by other conventions to pass\n   data or control information.\n\n\n\n\n\nO'Sullivan                                                      [Page 2]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n   The understanding that ASCII be used as a network-wide code has been\n   established for some time.  Its use in TELNET provided a problem with\n   respect to the limitation of a maximum character set of 128.  Some\n   systems provide for more than this number in their operation, and\n   therefor, as serving sites cannot map on a one for one basis.\n\n   Each such serving site could probably provide a reasonably useful\n   character set, including all system control signals, by mapping 128\n   of its codes and just not provide a network user access to the other\n   codes.  However, any character left out might later be used in a\n   major application at that site as a special control signal.  This\n   could result in denying network users the facility offered by that\n   application.  Serving sites are, therefor, encouraged to provide a\n   full mapping between the ASCII code and the code used on the serving\n   system.\n\n   The ASCII code for ESC (known to some as ALT MODE) has been selected\n   as an escape [1].  For each serving site character not mapped on a\n   one for one basis, the serving site can specify an escape character\n   or string of escape characters (preferably a printable graphic) to\n   represent it.  Thus, the user could enter the full set of serving\n   site code from any network terminal operating through the Network\n   Virtual Terminal (NVT) ASCII convention.  The serving site, in\n   generating output directed at the user's terminal, would be expected\n   to map out such a character and transmit the appropriate ESC\n   character or string of ESC characters.\n\n      Example: A serving site, whose normal code is EBCDIC, has\n      specified that cent ([5]) has not been mapped on a one for one\n      basis and that to transmit the character, users must enter ESC\n      followed by C.  At a using site, the TELNET implementers have\n      decided to try to print out all ESC characters using \\ to indicate\n      ESC.  On receipt of the representation for cent, the user would\n      see \\C on his print-out.\n\n   The representation of the end of a physical line at a terminal is\n   implemented differently on network HOSTS.  For example, some use a\n   return (or new line) key, the terminal hardware both returns the\n   carriage or printer to start of line and feeds the paper to the next\n   line.  In other implementations, the user hits carriage return and\n   the hardware returns carriage while the software returns to the\n   terminal a line feed.  The network-wide representation will be\n   carriage return followed by line feed.  It represents the physical\n   formatting that is being attempted, and is to be interpreted and\n   appropriately translated by both using site and serving site.\n\n\n\n\n\n\nO'Sullivan                                                      [Page 3]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n      Example:  A Multics user is working, through the network, on some\n      serving site HOST.  In the course of the session, the user has\n      numerous occasions to hit New Line on his Mod 37 TTY.  Each time\n      the Multics system is awakened by a New Line interrupt, the line\n      of buffered characters is passed to TELNET where it is scanned for\n      special characters.  If none is found, carriage return followed by\n      line feed is inserted where New Line was entered, and the line is\n      turned over to the NCP for transmission.  When the TELNET finds\n      the carriage return line feed sequence in the data stream coming\n      from the serving site, the two characters are replaced with New\n      Line code and sent to the terminal.\n\n   The decision to have the assumed condition for echo be that the using\n   site will provide any echo necessary for its terminals was taken\n   because of the difficulties faced by some installations that cannot\n   turn off their echo or that have terminals that print locally as a\n   result of key strokes.  Serving sites could take the position \"let\n   the user turn my echo off\", but this seems an unnecessary burden on\n   the user.  In addition, some serving sites may choose not to supply\n   any echo service, in which case the no echo assumption will supply a\n   network-wide condition, while other assumptions would give a mixed\n   starting connection. [2]\n\n   The convention of using \"I ECHO\", \"YOU ECHO\" seems to fill both the\n   requirements for dynamic echo control and for a minimum\n   implementation of TELNET Protocol. [3]  An agreed-upon exchange to\n   pass echo control (i.e., two sites exchange the I ECHO/YOU ECHO\n   codes) results in passing the control from one site to the other.\n\n      Example:  A serving site is exchanging control information with\n      the USER in an area where the serving system asks for pass word\n      and wants to suppress the printing of the pass word at the using\n      site's user terminal. (In this case, the using site has the\n      ability to control the print capability at the user's terminal.)\n      Using site has been echoing to the user's terminal.\n\n         Serving Site to Using Site (---\u003e)\n\n            I ECHO\n\n         Using Site to Serving Site (\u003c---)\n\n            YOU ECHO\n\n         ---\u003ePass word:\n\n         \u003c--- (User enters password at terminal)\n\n\n\n\nO'Sullivan                                                      [Page 4]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n         ---\u003e (No echo sent)\n\n         ---\u003e YOU ECHO\n\n         \u003c--- I ECHO\n\n      After the exchange, the original normal condition is re-\n      established.  If the using site did not have dynamic echo control\n      installed in its TELNET implementation, the serving site would\n      have signaled I ECHO several times, received no response, and\n      assumed that the using site could not comply proceeding to call\n      for the pass word without the normal protection of inhibiting\n      print.\n\n   TELNET control signals are of two types: one that results in\n   transmission of signals down the network to a receiving site; the\n   other intended for the user/process site only.  The latter type will\n   be discussed later.  So far, we have discussed the former type,\n   specifically dealing with echo control.\n\n   The use of ESC should not be considered a TELNET-wide standard, but a\n   convention limited to the 7 bit ASCII mode of transmission.  Other\n   conventions, to be incorporated later, may include binary\n   transmission, EBCDIC, etc.  Presumably, each will have its own\n   convention for an escape character to extend its code set.\n\n   Since it is expected that conventions other than ASCII will be\n   implemented under TELNET, a code to indicate a DATA TYPE representing\n   each set of conventions will be employed.  The control code X'AO' has\n   been selected to represent the ASCII convention in TELNET.  Since a\n   number of applications may wish to transmit transparently (i.e., 8\n   bit binary data), X'Al' is being reserved for that purpose.  The\n   TELNET control code X'A2' is reserved for an expected set of EBCDIC\n   conventions.  The DATA TYPE is expected as the first byte of data\n   over a TELNET connection.  Minimum implementations will be aided by\n   providing a default.  That is, if the first byte over a connection\n   has the high order bit set as zero, then the transmission has begun\n   in ASCII mode.\n\n   Each set of conventions, i.e., each DATA TYPE will be expected to\n   have a convention for that DATA TYPE to signal that it is returning\n   to control mode.  This return may be for the purpose of making use of\n   an existing control codes or to change data type.  X'88' is used [4].\n\n      Example:  At the using site, a terminal has a special device on it\n      (e.g., plotter, laboratory instrument, control box, etc.) that is\n      controlled by binary code in 8 bit bytes.  The terminal uses a\n      special \"enter\" code that routes signals to the device and cuts\n\n\n\nO'Sullivan                                                      [Page 5]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n      off printing at the terminal until a special \"leave\" signal is\n      received from the driving process.  The driving process in this\n      case is at a remote serving site.  It is assumed in this example\n      that a DLE convention is used for transparent transmission, a\n      single DLE signal representing return to control.  Normal\n      transmission has been in ASCII.\n\n      Driving Process (at Serving Site) to Using Site) ----\u003e\n\n         X'88'X'A1'\n\n      Using Site to Serving Site \u003c----\n\n         X'88'X'88'\n\n      -----------\u003e\n\n         ENTER code...8 bit binary bytes...\n\n      Using Site TELNET to Terminal |\n                                    |\n                                    V\n\n         Enter code...8 bit binary bytes...\n\n      Terminal\n\n         Turn printer off, feed transparently to special device, look\n         for LEAVE signal\n\n      ------------\u003e\n\n         8 bit binary bytes...LEAVE signal...single DLE\n         X'A0'\n\n      \u003c-----------\n\n         X'88'X'88\n\n      ------------\u003e\n\n      Message\n\n       |\n       |\n       V\n         8 bit binary data...LEAVE signal MESSAGE\n\n\n\n\nO'Sullivan                                                      [Page 6]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n      _Terminal_\n\n      During this sequence of exchanges - at the terminal, feed binary\n      data to special device until LEAVE signal is sensed, strip off\n      LEAVE signal, turn on printer and block data path to special\n      device, print MESSAGE at terminal.\n\n   There is a special control signal on some terminals that has no\n   corresponding bit pattern in ASCII, but is transmitted by a special\n   electrical signal.  This control signal is ATTN on a 2741 and BREAK\n   on a teletype.  The ASCII DATA TYPE in TELNET will use the code X'81'\n   to represent BREAK.  (There is a corresponding control signal for use\n   from serving sites to using sites for reverse break, and it is\n   assigned the code X'82').\n\n   Some systems treat the break as an extra code available for use in\n   conjunction with the data stream.  For example, one system uses break\n   as a special editing code meaning \"delete the current line to this\n   point\".  In these cases, the code may simply be inserted in the data\n   stream with no special additional action by the user.\n\n   Other systems use BREAK or ATTN in a special interrupt fashion, to\n   mean stop processing the application and give me the supervisor, or\n   cancel the present job, etc.  (Other systems use normal characters\n   for this purpose, such as \"Control C\".)  In these cases, because of\n   differences in the ways both serving and using sites operate, it is\n   necessary to take a route in addition to the normal TELNET data\n   stream to signal that the special control signal is imbedded in the\n   data stream.\n\n      _Examples-Problem_\n\n      The PDP-10 normally will, when it fills its input buffer, continue\n      to accept characters from a terminal examining each to see if it\n      is a control character, then act on it if it is or throw it away\n      if it is not.\n\n      Since the TELNET server at the serving site is at the mercy of the\n      NCP with respect to controlling the bunching, and therefor,\n      arrival at the TELNET of bursts of characters, TELNET\n      implementations might be expected to choke off flow to the buffers\n      until they are ready to accept characters without throwing them\n      away.\n\n   Under this condition, the serving process might be outputting to the\n   using terminal, the input buffers fill up, and a control C get stuck\n   in the data stream that has been choked off.\n\n\n\n\nO'Sullivan                                                      [Page 7]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n   A similar problem could occur with the Multics or some IBM system as\n   a server.  The user at a using site gets into an output loop at the\n   serving site and wants to break the process without having to release\n   his TELNET connection.  The buffers clog the connection, transmission\n   is choked off, and the control C break, or other user control signal\n   gets stuck in the pipeline.\n\n   _Example - Solution_\n\n   The user at the using site knows he is entering a special control\n   signal (break, ATTN, control C, etc.) and follows it with an X'80'.\n   (The local instructions at using sites for accomplishing this may\n   differ from site to site.)\n\n      Using Site TELNET to Serving Site\n\n         Insert X'80' in Data Stream\n\n      Using Site TELNET to Using Site NCP\n\n         Send an INS\n\n      Sending Site NCP to TELNET Server\n\n         Look out, here she come\n\n      Serving Site TELNET\n\n         Does its special thing until it sees X'80' then resumes\n         normal handling\n\n   Thus, depending on the server's local implementation to provide\n   adequate service, a special handling of the data stream can be\n   invoked whenever an INS is received in order to get the special\n   character.  When it sees X'80', it recognizes it as a SYNC character\n   and knowing that the special character has been passed on, strips the\n   X'80' from the data stream and returns to normal mode.\n\n   If the X'80' arrives before the INS, a counting scheme can keep the\n   activity appropriate to the serving site conditions.\n\n   This approach to handling selected special characters or signals\n   relieves the using TELNET processes from having to recognize the\n   special serving site characters, as well as from having to know how\n   the serving site wants to handle them.  At the same time, the\n\n\n\n\n\n\nO'Sullivan                                                      [Page 8]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n   procedure requires only a minimum level of user understanding of the\n   serving site.  This seems appropriate, since the TELNET ASCII\n   conventions are providing a Network Virtual Terminal, not a Network\n   Virtual User.\n\n   The ability of the user to cause the using site TELNET to send any\n   combination of ASCII characters in a string, and only that\n   combination, is viewed as important to the user utility of the TELNET\n   ASCII conventions.  Because of this, some user sites may find it\n   necessary to provide special local TELNET control signalling from the\n   user to the using site.\n\n      _Examples_\n\n      A user on a line at a time system (Multics, System 360, GECOS,\n      etc.)  is working through the Network on a serving site that\n      operates a character at a time.  The application is a debugging\n      aid that permits the user to type in a memory location = to which\n      it will respond with n where n represents the current contents of\n      that location.  The serving site process does not expect to see\n      the location = followed by a carriage return line feed sequence.\n      The user at the using site should be able to type in the location,\n      follow it with a signal to suppress the end of a line convention,\n      followed by a new line or return, and expect the location number =\n      to be transmitted immediately without an end of line sequence.\n\n      In another case, a using site has decided that it is convenient to\n      accumulate four characters at a time and transmit them to the\n      serving site, unless an end of line is observed, in which case the\n      end of line sequence is sent preceded by whatever number of\n      characters have been accumulated, (presumably three or less).  In\n      the same debugging application, the address is such that the end\n      does not correspond with the four character buffer demarcation.\n      The user should have the ability to enter a code for \"transmit\n      immediately\" in place of the Carriage Return in order to preserve\n      neat formatting, and expect the address to be sent to the serving\n      site.\n\n      TELNET controls have been discussed and those introduced to date\n      are probably sufficient for an early implementation of TELNET\n      ASCII convention.  There will be a need to establish a mechanism\n      for the controlled assignment (on request by Network Sites), and\n      announcement of DATA TYPE and CONTROL codes.\n\n      It should be noted that some controls are network-wide TELNET\n      controls, while others are specific to the ASCII Data Type.  It\n      should be further recognized that some local control messages do\n      not require a corresponding network-wide code.\n\n\n\nO'Sullivan                                                      [Page 9]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n      While it is recognized that even a minimum implementation of\n      TELNET for a using site is expected to permit the user to send any\n      selected ASCII string (and only that string) to the serving site,\n      it is not necessary for a serving site to implement a full mapping\n      from ASCII to local code, nor is it necessary for either the using\n      or serving sites to implement all control codes.\n\n      _Example - Using Site_\n\n      A minimum implementation of the TELNET protocol for the using site\n      would permit ignoring (and stripping) any control signals from the\n      serving site since they would all either require agreement or\n      acknowledgement (e.g., DATA TYPE, ECHO CONTROL, etc.) or can be\n      ignored with no particularly harmful results (e.g., reverse\n      break).\n\n      _Example - Serving Site_\n\n      A minimum implementation of the TELNET protocol for the serving\n      site could provide one for one mapping for the most important 128\n      serving system controls and graphic signals, and ignore all\n      control signals.\n\n   It would be helpful if a minimally implemented receiving site, when\n   it recognizes an incoming control signal for which appropriate\n   reaction is not available, could respond with X'87' (The following\n   not implemented at this site) and follow it with the code just\n   received.\n\n   Whenever an ASCII TELNET connection is lost, it should be assumed\n   that the process at the other end of the connection has been quit,\n   aborted, failed, etc.  In this way, a minimum using site installation\n   can fail to implement the break and break synchronization, and have\n   the user rely on the using site local procedure for leaving a running\n   local process and returning to the supervisor to break a connection\n   to a remote serving site.\n\n      _Example_\n\n      User recognizes that he is caught in an output loop and wishes to\n      stop his user process at the serving site.  The serving site\n      requires a break, but the using site minimum implementation has\n      not made it available.  Even if it had, the INS was not\n      implemented and could not be used to unblock the input pipe.\n      Locally, the using site convention for leaving a process and\n      getting to supervisory level is to hit the attention key on the\n      2741 terminal.  The user does this and is passed to the supervisor\n      where he signals to release the TELNET connection.  The serving\n\n\n\nO'Sullivan                                                     [Page 10]\n\f\nRFC 139              Discussion of TELNET Protocol            7 May 1971\n\n\n      site, seeing that an ASCII TELNET connection has been lost,\n      assumes that the user is ended either normally or abnormally.\n      Serving site cancels the user's process.  The user tries again by\n      re-establishing the connection, logging in again, re-initiating\n      the process, etc.\n\n   Other conventions under TELNET may make quite different assumptions\n   about lost connections, and some may go as far as dynamic\n   establishing and releasing of connections.\n\n   The proposed TELNET ASCII implementation leaves much uncovered, but\n   seems to permit early simple implementation with varying levels of\n   capability, along with the capacity to expand in several ways to meet\n   others needs.\n\n   There is an important open question.  Should a PROTOCOL such as\n   TELNET provide the basis for extending a system to perform functions\n   that go beyond the normal capacity of the local system.  For example,\n   a local system may not provide functions such as Hold Output, Kill\n   Print, etc., but it could extend it for network purposes through\n   TELNET.  If so, to what extent should such extensions be thought of\n   as Network-wide standards as opposed to purely local implementations.\n\nEndnotes\n\n   [1] Please drop the (s) at the end of \"character\" in paragraph 3,\n   page 3, RFC 137, NIC #6714.\n\n   [2] Also make note that the starting assumption in the initial\n   exchange between using site and serving site will be that the using\n   site will (if necessary) provide echo and the serving site will not.\n\n   [3] Note: Please change RFC #137, NIC #6714, page 4 - Code X'85' to\n   read Reserved.\n\n   [4] Please note on page 4 of RFC 137 that the receipt of an X'88'\n   should be responded with by the receiver sending a double signal,\n   i.e., X'88'X'88' if the new DATA TYPE can be handled.\n\n   [5] Cent sign\n\n          [This RFC was put into machine readable form for entry]\n           [into the online RFC archives by Lorrie Shiota, 1/02]\n\n\n\n\n\n\n\n\nO'Sullivan                                                     [Page 11]\n\f\n"
}